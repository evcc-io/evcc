// Code generated by "enumer -type Feature -text"; DO NOT EDIT.

package api

import (
	"fmt"
	"strings"
)

const _FeatureName = "CoarseCurrentIntegratedDeviceHeatingAverageCacheableOfflineRetryableStreamingWelcomeCharge"

var _FeatureIndex = [...]uint8{0, 13, 29, 36, 43, 52, 59, 68, 77, 90}

const _FeatureLowerName = "coarsecurrentintegrateddeviceheatingaveragecacheableofflineretryablestreamingwelcomecharge"

func (i Feature) String() string {
	i -= 1
	if i < 0 || i >= Feature(len(_FeatureIndex)-1) {
		return fmt.Sprintf("Feature(%d)", i+1)
	}
	return _FeatureName[_FeatureIndex[i]:_FeatureIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FeatureNoOp() {
	var x [1]struct{}
	_ = x[CoarseCurrent-(1)]
	_ = x[IntegratedDevice-(2)]
	_ = x[Heating-(3)]
	_ = x[Average-(4)]
	_ = x[Cacheable-(5)]
	_ = x[Offline-(6)]
	_ = x[Retryable-(7)]
	_ = x[Streaming-(8)]
	_ = x[WelcomeCharge-(9)]
}

var _FeatureValues = []Feature{CoarseCurrent, IntegratedDevice, Heating, Average, Cacheable, Offline, Retryable, Streaming, WelcomeCharge}

var _FeatureNameToValueMap = map[string]Feature{
	_FeatureName[0:13]:       CoarseCurrent,
	_FeatureLowerName[0:13]:  CoarseCurrent,
	_FeatureName[13:29]:      IntegratedDevice,
	_FeatureLowerName[13:29]: IntegratedDevice,
	_FeatureName[29:36]:      Heating,
	_FeatureLowerName[29:36]: Heating,
	_FeatureName[36:43]:      Average,
	_FeatureLowerName[36:43]: Average,
	_FeatureName[43:52]:      Cacheable,
	_FeatureLowerName[43:52]: Cacheable,
	_FeatureName[52:59]:      Offline,
	_FeatureLowerName[52:59]: Offline,
	_FeatureName[59:68]:      Retryable,
	_FeatureLowerName[59:68]: Retryable,
	_FeatureName[68:77]:      Streaming,
	_FeatureLowerName[68:77]: Streaming,
	_FeatureName[77:90]:      WelcomeCharge,
	_FeatureLowerName[77:90]: WelcomeCharge,
}

var _FeatureNames = []string{
	_FeatureName[0:13],
	_FeatureName[13:29],
	_FeatureName[29:36],
	_FeatureName[36:43],
	_FeatureName[43:52],
	_FeatureName[52:59],
	_FeatureName[59:68],
	_FeatureName[68:77],
	_FeatureName[77:90],
}

// FeatureString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FeatureString(s string) (Feature, error) {
	if val, ok := _FeatureNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FeatureNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Feature values", s)
}

// FeatureValues returns all values of the enum
func FeatureValues() []Feature {
	return _FeatureValues
}

// FeatureStrings returns a slice of all String values of the enum
func FeatureStrings() []string {
	strs := make([]string, len(_FeatureNames))
	copy(strs, _FeatureNames)
	return strs
}

// IsAFeature returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Feature) IsAFeature() bool {
	for _, v := range _FeatureValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Feature
func (i Feature) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Feature
func (i *Feature) UnmarshalText(text []byte) error {
	var err error
	*i, err = FeatureString(string(text))
	return err
}
