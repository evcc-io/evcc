template: luxtronik
products:
  - brand: Buderus
    description:
      generic: Luxtronik 2.1
  - brand: alpha innotec
    description:
      generic: Luxtronik 2.1
  - brand: CTA All-In-One (Aeroplus)
    description:
      generic: Luxtronik 2.1
  - brand: Elco
    description:
      generic: Luxtronik 2.1
  - brand: Nibe
    description:
      generic: Luxtronik 2.1
  - brand: Roth (ThermoAura, ThermoTerra)
    description:
      generic: Luxtronik 2.1
  - brand: Novelan
    description:
      generic: Luxtronik 2.1
  - brand: Wolf (BWL/BWS)
    description:
      generic: Luxtronik 2.1
group: heating
requirements:
  description:
    de: Regelung für Wärmepumpen mit Luxtronik 2.1 Steuerung. Nutzt modbus-tcp. Braucht mindestens Software v3.90.3. Aktivierung über SERVICE, Systemsteuerung, Konnektivität, Smart-Home-Interface. 
    en: Template for heatpumps with Luxtronik 2.1 controller. Uses modbus-tcp. Requires software v3.90.3 or later. Enable via SERVICE, Systemsteuerung, Konnektivität, Smart-Home-Interface. 
#   evcc: ["sponsorship"]
params:
  - name: modbus
    choice: ["tcpip"]
  - name: wwoffset
    type: int
    help:
      de: Anhebung der WW Temperatur. Werte in 0.1K
      en: Temperature boost offset for hot water. Value in 0.1K
    default: 0
  - name: heatoffset
    type: int
    help:
      de: Anhebung der RL Temperatur. Werte in 0.1K
      en: Temperature boost offset for heating. Value in 0.1K
    default: 0
render: |
  type: sgready
  getmode:
    source: go
    script: |
      res := 2 // SGReady Normal (2)
      switch {
      case LPC == 2: res = 1 // LPC 2 (Lux hard limit) == SGReady 1 (reduziert)
      case HEAT > 0 || WW > 0: res = 3 // if any boost mode set (offset(2) or setpoint(1)) --> SGReady 3 (boost)
      }
      res
    in:
    - name: LPC
      type: int
      config: 
        source: modbus
        {{- include "modbus" . | indent 6 }}
        register:
          address: 100040
          type: input
          encoding: uint16
    - name: HEAT
      type: int
      config: 
        source: modbus
        {{- include "modbus" . | indent 6 }}
        register:
          address: 10000
          type: input
          encoding: uint16
    - name: WW
      type: int
      config: 
        source: modbus
        {{- include "modbus" . | indent 6 }}
        register:
          address: 10005
          type: input
          encoding: uint16
  setmode:
    source: switch
    switch:
    - case: 1 # dimm (reduzierte Leistung)
      set:
        source: sequence
        set:
        - source: const
          value: 2 # Lux Hard-Limit (2)
          set:
            source: modbus
            {{- include "modbus" . | indent 10 }}
            register:
              address: 100040 # LPC mode
              type: writesingle
              encoding: uint16
        {{ if ne .heatoffset 0 -}}
        - source: const
          value: 0 # 0 = Heiz.Mode Aus
          set:
            source: modbus
            {{- include "modbus" . | indent 10 }}
            register:
              address: 10000 # Heiz.Mode [0=Aus;1=Setpoint;2=Offset]
              type: writesingle
              encoding: uint16
        {{- end }}
        {{ if ne .wwoffset 0 -}}
        - source: const
          value: 0 # 0 = WW.Mode Aus
          set:
            source: modbus
            {{- include "modbus" . | indent 10 }}
            register:
              address: 10005 # Heiz.Mode [0=Aus;1=Setpoint;2=Offset]
              type: writesingle
              encoding: uint16
        {{- end }}
    - case: 2 # normal
      set:
        source: sequence
        set:
        - source: const
          value: 0 # Lux No-Limit (0)
          set:
            source: modbus
            {{- include "modbus" . | indent 10 }}
            register:
              address: 100040 # LPC mode
              type: writesingle
              encoding: uint16
        {{ if ne .heatoffset 0 -}}
        - source: const
          value: 0 # 0 = Heiz.Mode Aus
          set:
            source: modbus
            {{- include "modbus" . | indent 10 }}
            register:
              address: 10000 # Heiz.Mode [0=Aus;1=Setpoint;2=Offset]
              type: writesingle
              encoding: uint16
        {{- end }}
        {{ if ne .wwoffset 0 -}}
        - source: const
          value: 0 # 0 = WW.Mode Aus
          set:
            source: modbus
            {{- include "modbus" . | indent 10 }}
            register:
              address: 10005 # Heiz.Mode [0=Aus;1=Setpoint;2=Offset]
              type: writesingle
              encoding: uint16
        {{- end }}
    - case: 3 # boost
      set:
        source: sequence
        set:
        - source: const
          value: 0 # Lux No-Limit (0)
          set:
            source: modbus
            {{- include "modbus" . | indent 10 }}
            register:
              address: 100040 # LPC mode
              type: writesingle
              encoding: uint16
        {{ if ne .heatoffset 0 -}}
        - source: const
          value: 2 # 2 = Heiz.Mode Offset
          set:
            source: modbus
            {{- include "modbus" . | indent 10 }}
            register:
              address: 10000 # Heiz.Mode [0=Aus;1=Setpoint;2=Offset]
              type: writesingle
              encoding: uint16
        - source: const
          value: {{ .heatoffset }} 
          set:
            source: modbus
            {{- include "modbus" . | indent 10 }}
            register:
              address: 10002 # Heiz. Offset [0.1 K]
              type: writesingle
              encoding: uint16
        {{- end }}
        {{ if ne .wwoffset 0 -}}
        - source: const
          value: 2 # 2 = WW Mode Offset
          set:
            source: modbus
            {{- include "modbus" . | indent 10 }}
            register:
              address: 10005 # WW Mode [0=Aus;1=Setpoint;2=Offset]
              type: writesingle
              encoding: uint16
        - source: const
          value: {{ .wwoffset }}
          set:
            source: modbus
            {{- include "modbus" . | indent 10 }}
            register:
              address: 10007 # WW Offset [0.1 K]
              type: writesingle
              encoding: uint16
        {{- end }}
  temp:
    source: modbus
    {{- include "modbus" . | indent 2 }}
    register:
      address: 10120 # 10120 = Temp x10 Warmwasser ist
      type: input
      encoding: int16
    scale: 0.1
  power:
    source: modbus
    {{- include "modbus" . | indent 2 }}
    register:
      address: 10301 # 10301 = kW x10 Power-In elektrisch
      type: input
      encoding: int16
    scale: 0.1
  energy:
    source: modbus
    {{- include "modbus" . | indent 2 }}
    register:
      address: 10311 # 10311 = kWh x10 kumulierter Stromverbrauch
      type: input
      decode: int32
    scale: 0.1
