// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: vehicle-events.proto

package protos

import (
	protos "github.com/evcc-io/evcc/vehicle/mercedes/pb/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChargeProgram int32

const (
	ChargeProgram_DEFAULT_CHARGE_PROGRAM ChargeProgram = 0
	ChargeProgram_INSTANT_CHARGE_PROGRAM ChargeProgram = 1
	ChargeProgram_HOME_CHARGE_PROGRAM    ChargeProgram = 2
	ChargeProgram_WORK_CHARGE_PROGRAM    ChargeProgram = 3
)

// Enum value maps for ChargeProgram.
var (
	ChargeProgram_name = map[int32]string{
		0: "DEFAULT_CHARGE_PROGRAM",
		1: "INSTANT_CHARGE_PROGRAM",
		2: "HOME_CHARGE_PROGRAM",
		3: "WORK_CHARGE_PROGRAM",
	}
	ChargeProgram_value = map[string]int32{
		"DEFAULT_CHARGE_PROGRAM": 0,
		"INSTANT_CHARGE_PROGRAM": 1,
		"HOME_CHARGE_PROGRAM":    2,
		"WORK_CHARGE_PROGRAM":    3,
	}
)

func (x ChargeProgram) Enum() *ChargeProgram {
	p := new(ChargeProgram)
	*p = x
	return p
}

func (x ChargeProgram) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeProgram) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_events_proto_enumTypes[0].Descriptor()
}

func (ChargeProgram) Type() protoreflect.EnumType {
	return &file_vehicle_events_proto_enumTypes[0]
}

func (x ChargeProgram) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeProgram.Descriptor instead.
func (ChargeProgram) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{0}
}

// Same as VehicleAPI.AttributeStatus but with slightly different names. The VehicleAPI.AttributeStatus enum values
// can't be changed because they are used to automatically parse the vehicleAPI responses. Adding type aliases would
// confuse the contributions developers, so we added another attribute status enum
type AttributeStatus int32

const (
	// Value is set and valid
	AttributeStatus_VALUE_VALID AttributeStatus = 0
	// Value has not yet been received from the vehicle (but sensor etc. should be available)
	AttributeStatus_VALUE_NOT_RECEIVED AttributeStatus = 1
	// Value has been retrieved from vehicle but is invalid (marked as invalid by DaiVB backend)
	AttributeStatus_VALUE_INVALID AttributeStatus = 3
	// Vehicle does not support this attribute (e.g. does not have the sensor etc.)
	AttributeStatus_VALUE_NOT_AVAILABLE AttributeStatus = 4
)

// Enum value maps for AttributeStatus.
var (
	AttributeStatus_name = map[int32]string{
		0: "VALUE_VALID",
		1: "VALUE_NOT_RECEIVED",
		3: "VALUE_INVALID",
		4: "VALUE_NOT_AVAILABLE",
	}
	AttributeStatus_value = map[string]int32{
		"VALUE_VALID":         0,
		"VALUE_NOT_RECEIVED":  1,
		"VALUE_INVALID":       3,
		"VALUE_NOT_AVAILABLE": 4,
	}
)

func (x AttributeStatus) Enum() *AttributeStatus {
	p := new(AttributeStatus)
	*p = x
	return p
}

func (x AttributeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_events_proto_enumTypes[1].Descriptor()
}

func (AttributeStatus) Type() protoreflect.EnumType {
	return &file_vehicle_events_proto_enumTypes[1]
}

func (x AttributeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeStatus.Descriptor instead.
func (AttributeStatus) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{1}
}

type VehicleAttributeStatus_CombustionConsumptionUnit int32

const (
	VehicleAttributeStatus_UNSPECIFIED_COMBUSTION_CONSUMPTION_UNIT VehicleAttributeStatus_CombustionConsumptionUnit = 0
	// Liter per 100 km
	VehicleAttributeStatus_LITER_PER_100KM VehicleAttributeStatus_CombustionConsumptionUnit = 1
	// Kilometers per liter
	VehicleAttributeStatus_KM_PER_LITER VehicleAttributeStatus_CombustionConsumptionUnit = 2
	// Miles Per imperial gallon
	VehicleAttributeStatus_MPG_UK VehicleAttributeStatus_CombustionConsumptionUnit = 3
	// Miles Per US gallon
	VehicleAttributeStatus_MPG_US VehicleAttributeStatus_CombustionConsumptionUnit = 4
)

// Enum value maps for VehicleAttributeStatus_CombustionConsumptionUnit.
var (
	VehicleAttributeStatus_CombustionConsumptionUnit_name = map[int32]string{
		0: "UNSPECIFIED_COMBUSTION_CONSUMPTION_UNIT",
		1: "LITER_PER_100KM",
		2: "KM_PER_LITER",
		3: "MPG_UK",
		4: "MPG_US",
	}
	VehicleAttributeStatus_CombustionConsumptionUnit_value = map[string]int32{
		"UNSPECIFIED_COMBUSTION_CONSUMPTION_UNIT": 0,
		"LITER_PER_100KM":                         1,
		"KM_PER_LITER":                            2,
		"MPG_UK":                                  3,
		"MPG_US":                                  4,
	}
)

func (x VehicleAttributeStatus_CombustionConsumptionUnit) Enum() *VehicleAttributeStatus_CombustionConsumptionUnit {
	p := new(VehicleAttributeStatus_CombustionConsumptionUnit)
	*p = x
	return p
}

func (x VehicleAttributeStatus_CombustionConsumptionUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleAttributeStatus_CombustionConsumptionUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_events_proto_enumTypes[2].Descriptor()
}

func (VehicleAttributeStatus_CombustionConsumptionUnit) Type() protoreflect.EnumType {
	return &file_vehicle_events_proto_enumTypes[2]
}

func (x VehicleAttributeStatus_CombustionConsumptionUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleAttributeStatus_CombustionConsumptionUnit.Descriptor instead.
func (VehicleAttributeStatus_CombustionConsumptionUnit) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{1, 0}
}

type VehicleAttributeStatus_ElectricityConsumptionUnit int32

const (
	VehicleAttributeStatus_UNSPECIFIED_ELECTRICITY_CONSUMPTION_UNIT VehicleAttributeStatus_ElectricityConsumptionUnit = 0
	// kWh per 100 km
	VehicleAttributeStatus_KWH_PER_100KM VehicleAttributeStatus_ElectricityConsumptionUnit = 1
	// Kilometers per kWh
	VehicleAttributeStatus_KM_PER_KWH VehicleAttributeStatus_ElectricityConsumptionUnit = 2
	// kWh per 100 miles
	VehicleAttributeStatus_KWH_PER_100MI VehicleAttributeStatus_ElectricityConsumptionUnit = 3
	// miles per kWh
	VehicleAttributeStatus_M_PER_KWH VehicleAttributeStatus_ElectricityConsumptionUnit = 4
	// Miles per gallon gasoline equivalent
	VehicleAttributeStatus_MPGE VehicleAttributeStatus_ElectricityConsumptionUnit = 5
)

// Enum value maps for VehicleAttributeStatus_ElectricityConsumptionUnit.
var (
	VehicleAttributeStatus_ElectricityConsumptionUnit_name = map[int32]string{
		0: "UNSPECIFIED_ELECTRICITY_CONSUMPTION_UNIT",
		1: "KWH_PER_100KM",
		2: "KM_PER_KWH",
		3: "KWH_PER_100MI",
		4: "M_PER_KWH",
		5: "MPGE",
	}
	VehicleAttributeStatus_ElectricityConsumptionUnit_value = map[string]int32{
		"UNSPECIFIED_ELECTRICITY_CONSUMPTION_UNIT": 0,
		"KWH_PER_100KM": 1,
		"KM_PER_KWH":    2,
		"KWH_PER_100MI": 3,
		"M_PER_KWH":     4,
		"MPGE":          5,
	}
)

func (x VehicleAttributeStatus_ElectricityConsumptionUnit) Enum() *VehicleAttributeStatus_ElectricityConsumptionUnit {
	p := new(VehicleAttributeStatus_ElectricityConsumptionUnit)
	*p = x
	return p
}

func (x VehicleAttributeStatus_ElectricityConsumptionUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleAttributeStatus_ElectricityConsumptionUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_events_proto_enumTypes[3].Descriptor()
}

func (VehicleAttributeStatus_ElectricityConsumptionUnit) Type() protoreflect.EnumType {
	return &file_vehicle_events_proto_enumTypes[3]
}

func (x VehicleAttributeStatus_ElectricityConsumptionUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleAttributeStatus_ElectricityConsumptionUnit.Descriptor instead.
func (VehicleAttributeStatus_ElectricityConsumptionUnit) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{1, 1}
}

type VehicleAttributeStatus_GasConsumptionUnit int32

const (
	VehicleAttributeStatus_UNSPECIFIED_GAS_CONSUMPTION_UNIT VehicleAttributeStatus_GasConsumptionUnit = 0
	// kG per 100 km
	VehicleAttributeStatus_KG_PER_100KM VehicleAttributeStatus_GasConsumptionUnit = 1
	// km per kg
	VehicleAttributeStatus_KM_PER_KG VehicleAttributeStatus_GasConsumptionUnit = 2
	// miles per kg
	VehicleAttributeStatus_M_PER_KG VehicleAttributeStatus_GasConsumptionUnit = 3
)

// Enum value maps for VehicleAttributeStatus_GasConsumptionUnit.
var (
	VehicleAttributeStatus_GasConsumptionUnit_name = map[int32]string{
		0: "UNSPECIFIED_GAS_CONSUMPTION_UNIT",
		1: "KG_PER_100KM",
		2: "KM_PER_KG",
		3: "M_PER_KG",
	}
	VehicleAttributeStatus_GasConsumptionUnit_value = map[string]int32{
		"UNSPECIFIED_GAS_CONSUMPTION_UNIT": 0,
		"KG_PER_100KM":                     1,
		"KM_PER_KG":                        2,
		"M_PER_KG":                         3,
	}
)

func (x VehicleAttributeStatus_GasConsumptionUnit) Enum() *VehicleAttributeStatus_GasConsumptionUnit {
	p := new(VehicleAttributeStatus_GasConsumptionUnit)
	*p = x
	return p
}

func (x VehicleAttributeStatus_GasConsumptionUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleAttributeStatus_GasConsumptionUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_events_proto_enumTypes[4].Descriptor()
}

func (VehicleAttributeStatus_GasConsumptionUnit) Type() protoreflect.EnumType {
	return &file_vehicle_events_proto_enumTypes[4]
}

func (x VehicleAttributeStatus_GasConsumptionUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleAttributeStatus_GasConsumptionUnit.Descriptor instead.
func (VehicleAttributeStatus_GasConsumptionUnit) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{1, 2}
}

// Deprecated: Marked as deprecated in vehicle-events.proto.
type VehicleAttributeStatus_SpeedDistanceUnit int32

const (
	VehicleAttributeStatus_UNSPECIFIED_SPEED_DISTANCE_UNIT VehicleAttributeStatus_SpeedDistanceUnit = 0
	// km/h, distance unit: km
	VehicleAttributeStatus_KM_PER_H VehicleAttributeStatus_SpeedDistanceUnit = 1
	// mph, distance unit: miles
	VehicleAttributeStatus_M_PER_H VehicleAttributeStatus_SpeedDistanceUnit = 2
)

// Enum value maps for VehicleAttributeStatus_SpeedDistanceUnit.
var (
	VehicleAttributeStatus_SpeedDistanceUnit_name = map[int32]string{
		0: "UNSPECIFIED_SPEED_DISTANCE_UNIT",
		1: "KM_PER_H",
		2: "M_PER_H",
	}
	VehicleAttributeStatus_SpeedDistanceUnit_value = map[string]int32{
		"UNSPECIFIED_SPEED_DISTANCE_UNIT": 0,
		"KM_PER_H":                        1,
		"M_PER_H":                         2,
	}
)

func (x VehicleAttributeStatus_SpeedDistanceUnit) Enum() *VehicleAttributeStatus_SpeedDistanceUnit {
	p := new(VehicleAttributeStatus_SpeedDistanceUnit)
	*p = x
	return p
}

func (x VehicleAttributeStatus_SpeedDistanceUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleAttributeStatus_SpeedDistanceUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_events_proto_enumTypes[5].Descriptor()
}

func (VehicleAttributeStatus_SpeedDistanceUnit) Type() protoreflect.EnumType {
	return &file_vehicle_events_proto_enumTypes[5]
}

func (x VehicleAttributeStatus_SpeedDistanceUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleAttributeStatus_SpeedDistanceUnit.Descriptor instead.
func (VehicleAttributeStatus_SpeedDistanceUnit) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{1, 3}
}

type VehicleAttributeStatus_SpeedUnit int32

const (
	VehicleAttributeStatus_UNSPECIFIED_SPEED_UNIT VehicleAttributeStatus_SpeedUnit = 0
	// kilometers per hour
	VehicleAttributeStatus_KM_PER_HOUR VehicleAttributeStatus_SpeedUnit = 1
	// miles per hour
	VehicleAttributeStatus_M_PER_HOUR VehicleAttributeStatus_SpeedUnit = 2
)

// Enum value maps for VehicleAttributeStatus_SpeedUnit.
var (
	VehicleAttributeStatus_SpeedUnit_name = map[int32]string{
		0: "UNSPECIFIED_SPEED_UNIT",
		1: "KM_PER_HOUR",
		2: "M_PER_HOUR",
	}
	VehicleAttributeStatus_SpeedUnit_value = map[string]int32{
		"UNSPECIFIED_SPEED_UNIT": 0,
		"KM_PER_HOUR":            1,
		"M_PER_HOUR":             2,
	}
)

func (x VehicleAttributeStatus_SpeedUnit) Enum() *VehicleAttributeStatus_SpeedUnit {
	p := new(VehicleAttributeStatus_SpeedUnit)
	*p = x
	return p
}

func (x VehicleAttributeStatus_SpeedUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleAttributeStatus_SpeedUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_events_proto_enumTypes[6].Descriptor()
}

func (VehicleAttributeStatus_SpeedUnit) Type() protoreflect.EnumType {
	return &file_vehicle_events_proto_enumTypes[6]
}

func (x VehicleAttributeStatus_SpeedUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleAttributeStatus_SpeedUnit.Descriptor instead.
func (VehicleAttributeStatus_SpeedUnit) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{1, 4}
}

type VehicleAttributeStatus_DistanceUnit int32

const (
	VehicleAttributeStatus_UNSPECIFIED_DISTANCE_UNIT VehicleAttributeStatus_DistanceUnit = 0
	VehicleAttributeStatus_KILOMETERS                VehicleAttributeStatus_DistanceUnit = 1
	VehicleAttributeStatus_MILES                     VehicleAttributeStatus_DistanceUnit = 2
)

// Enum value maps for VehicleAttributeStatus_DistanceUnit.
var (
	VehicleAttributeStatus_DistanceUnit_name = map[int32]string{
		0: "UNSPECIFIED_DISTANCE_UNIT",
		1: "KILOMETERS",
		2: "MILES",
	}
	VehicleAttributeStatus_DistanceUnit_value = map[string]int32{
		"UNSPECIFIED_DISTANCE_UNIT": 0,
		"KILOMETERS":                1,
		"MILES":                     2,
	}
)

func (x VehicleAttributeStatus_DistanceUnit) Enum() *VehicleAttributeStatus_DistanceUnit {
	p := new(VehicleAttributeStatus_DistanceUnit)
	*p = x
	return p
}

func (x VehicleAttributeStatus_DistanceUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleAttributeStatus_DistanceUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_events_proto_enumTypes[7].Descriptor()
}

func (VehicleAttributeStatus_DistanceUnit) Type() protoreflect.EnumType {
	return &file_vehicle_events_proto_enumTypes[7]
}

func (x VehicleAttributeStatus_DistanceUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleAttributeStatus_DistanceUnit.Descriptor instead.
func (VehicleAttributeStatus_DistanceUnit) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{1, 5}
}

type VehicleAttributeStatus_TemperatureUnit int32

const (
	VehicleAttributeStatus_UNSPECIFIED_TEMPERATURE_UNIT VehicleAttributeStatus_TemperatureUnit = 0
	VehicleAttributeStatus_CELSIUS                      VehicleAttributeStatus_TemperatureUnit = 1
	VehicleAttributeStatus_FAHRENHEIT                   VehicleAttributeStatus_TemperatureUnit = 2
)

// Enum value maps for VehicleAttributeStatus_TemperatureUnit.
var (
	VehicleAttributeStatus_TemperatureUnit_name = map[int32]string{
		0: "UNSPECIFIED_TEMPERATURE_UNIT",
		1: "CELSIUS",
		2: "FAHRENHEIT",
	}
	VehicleAttributeStatus_TemperatureUnit_value = map[string]int32{
		"UNSPECIFIED_TEMPERATURE_UNIT": 0,
		"CELSIUS":                      1,
		"FAHRENHEIT":                   2,
	}
)

func (x VehicleAttributeStatus_TemperatureUnit) Enum() *VehicleAttributeStatus_TemperatureUnit {
	p := new(VehicleAttributeStatus_TemperatureUnit)
	*p = x
	return p
}

func (x VehicleAttributeStatus_TemperatureUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleAttributeStatus_TemperatureUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_events_proto_enumTypes[8].Descriptor()
}

func (VehicleAttributeStatus_TemperatureUnit) Type() protoreflect.EnumType {
	return &file_vehicle_events_proto_enumTypes[8]
}

func (x VehicleAttributeStatus_TemperatureUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleAttributeStatus_TemperatureUnit.Descriptor instead.
func (VehicleAttributeStatus_TemperatureUnit) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{1, 6}
}

type VehicleAttributeStatus_PressureUnit int32

const (
	VehicleAttributeStatus_UNSPECIFIED_PRESSURE_UNIT VehicleAttributeStatus_PressureUnit = 0
	VehicleAttributeStatus_KPA                       VehicleAttributeStatus_PressureUnit = 1
	VehicleAttributeStatus_BAR                       VehicleAttributeStatus_PressureUnit = 2
	// Pounds per square inch
	VehicleAttributeStatus_PSI VehicleAttributeStatus_PressureUnit = 3
)

// Enum value maps for VehicleAttributeStatus_PressureUnit.
var (
	VehicleAttributeStatus_PressureUnit_name = map[int32]string{
		0: "UNSPECIFIED_PRESSURE_UNIT",
		1: "KPA",
		2: "BAR",
		3: "PSI",
	}
	VehicleAttributeStatus_PressureUnit_value = map[string]int32{
		"UNSPECIFIED_PRESSURE_UNIT": 0,
		"KPA":                       1,
		"BAR":                       2,
		"PSI":                       3,
	}
)

func (x VehicleAttributeStatus_PressureUnit) Enum() *VehicleAttributeStatus_PressureUnit {
	p := new(VehicleAttributeStatus_PressureUnit)
	*p = x
	return p
}

func (x VehicleAttributeStatus_PressureUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleAttributeStatus_PressureUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_events_proto_enumTypes[9].Descriptor()
}

func (VehicleAttributeStatus_PressureUnit) Type() protoreflect.EnumType {
	return &file_vehicle_events_proto_enumTypes[9]
}

func (x VehicleAttributeStatus_PressureUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleAttributeStatus_PressureUnit.Descriptor instead.
func (VehicleAttributeStatus_PressureUnit) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{1, 7}
}

type VehicleAttributeStatus_RatioUnit int32

const (
	VehicleAttributeStatus_UNSPECIFIED_RATIO_UNIT VehicleAttributeStatus_RatioUnit = 0
	VehicleAttributeStatus_PERCENT                VehicleAttributeStatus_RatioUnit = 1
)

// Enum value maps for VehicleAttributeStatus_RatioUnit.
var (
	VehicleAttributeStatus_RatioUnit_name = map[int32]string{
		0: "UNSPECIFIED_RATIO_UNIT",
		1: "PERCENT",
	}
	VehicleAttributeStatus_RatioUnit_value = map[string]int32{
		"UNSPECIFIED_RATIO_UNIT": 0,
		"PERCENT":                1,
	}
)

func (x VehicleAttributeStatus_RatioUnit) Enum() *VehicleAttributeStatus_RatioUnit {
	p := new(VehicleAttributeStatus_RatioUnit)
	*p = x
	return p
}

func (x VehicleAttributeStatus_RatioUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleAttributeStatus_RatioUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_events_proto_enumTypes[10].Descriptor()
}

func (VehicleAttributeStatus_RatioUnit) Type() protoreflect.EnumType {
	return &file_vehicle_events_proto_enumTypes[10]
}

func (x VehicleAttributeStatus_RatioUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleAttributeStatus_RatioUnit.Descriptor instead.
func (VehicleAttributeStatus_RatioUnit) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{1, 8}
}

type VehicleAttributeStatus_ClockHourUnit int32

const (
	VehicleAttributeStatus_UNSPECIFIED_CLOCK_HOUR_UNIT VehicleAttributeStatus_ClockHourUnit = 0
	// 12h (AM/PM)
	VehicleAttributeStatus_T12H VehicleAttributeStatus_ClockHourUnit = 1
	// 24h
	VehicleAttributeStatus_T24H VehicleAttributeStatus_ClockHourUnit = 2
)

// Enum value maps for VehicleAttributeStatus_ClockHourUnit.
var (
	VehicleAttributeStatus_ClockHourUnit_name = map[int32]string{
		0: "UNSPECIFIED_CLOCK_HOUR_UNIT",
		1: "T12H",
		2: "T24H",
	}
	VehicleAttributeStatus_ClockHourUnit_value = map[string]int32{
		"UNSPECIFIED_CLOCK_HOUR_UNIT": 0,
		"T12H":                        1,
		"T24H":                        2,
	}
)

func (x VehicleAttributeStatus_ClockHourUnit) Enum() *VehicleAttributeStatus_ClockHourUnit {
	p := new(VehicleAttributeStatus_ClockHourUnit)
	*p = x
	return p
}

func (x VehicleAttributeStatus_ClockHourUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleAttributeStatus_ClockHourUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_events_proto_enumTypes[11].Descriptor()
}

func (VehicleAttributeStatus_ClockHourUnit) Type() protoreflect.EnumType {
	return &file_vehicle_events_proto_enumTypes[11]
}

func (x VehicleAttributeStatus_ClockHourUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleAttributeStatus_ClockHourUnit.Descriptor instead.
func (VehicleAttributeStatus_ClockHourUnit) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{1, 9}
}

// Sending direction: App <- BFF <- AppTwin
type VEPUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber int32  `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Vin            string `protobuf:"bytes,2,opt,name=vin,proto3" json:"vin,omitempty"`
	// indicates whether this is a full update of VEP-attributes.
	// All attributes cached in the FE should be erased and completely
	// replaced by this push.
	FullUpdate bool `protobuf:"varint,15,opt,name=full_update,json=fullUpdate,proto3" json:"full_update,omitempty"`
	// when was the event emitted? This is the time of the update (unix timestamp in seconds), (deprecated)
	// not when the attributes where changed. To compare attribute changes, you need to look into each attribute timestamp
	EmitTimestamp int64 `protobuf:"varint,10,opt,name=emit_timestamp,json=emitTimestamp,proto3" json:"emit_timestamp,omitempty"`
	// when was the event emitted? This is the time of the update (unix timestamp in milliseconds),
	EmitTimestampInMs int64 `protobuf:"varint,14,opt,name=emit_timestamp_in_ms,json=emitTimestampInMs,proto3" json:"emit_timestamp_in_ms,omitempty"`
	// the attribute changes are a list of changed attributes
	Attributes map[string]*VehicleAttributeStatus `protobuf:"bytes,11,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VEPUpdate) Reset() {
	*x = VEPUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VEPUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VEPUpdate) ProtoMessage() {}

func (x *VEPUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VEPUpdate.ProtoReflect.Descriptor instead.
func (*VEPUpdate) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{0}
}

func (x *VEPUpdate) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *VEPUpdate) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *VEPUpdate) GetFullUpdate() bool {
	if x != nil {
		return x.FullUpdate
	}
	return false
}

func (x *VEPUpdate) GetEmitTimestamp() int64 {
	if x != nil {
		return x.EmitTimestamp
	}
	return 0
}

func (x *VEPUpdate) GetEmitTimestampInMs() int64 {
	if x != nil {
		return x.EmitTimestampInMs
	}
	return 0
}

func (x *VEPUpdate) GetAttributes() map[string]*VehicleAttributeStatus {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Part of a VEPUpdate
// Sending direction: App <- BFF <- AppTwin
type VehicleAttributeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// time of the attribute change in the car as unix timestamp in seconds with UTC timezone (deprecated)
	//
	// Deprecated: Marked as deprecated in vehicle-events.proto.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// time of the attribute change in the car as unix timestamp in milliseconds with UTC timezone
	TimestampInMs int64 `protobuf:"varint,10,opt,name=timestamp_in_ms,json=timestampInMs,proto3" json:"timestamp_in_ms,omitempty"`
	Changed       bool  `protobuf:"varint,2,opt,name=changed,proto3" json:"changed,omitempty"`
	Status        int32 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	// A list of service ids for which this attribute was sent
	// this field ist just used backend internally and will always
	// be empty when sent out to the client.
	ServiceIds   []int32 `protobuf:"varint,30,rep,packed,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`
	DisplayValue string  `protobuf:"bytes,11,opt,name=display_value,json=displayValue,proto3" json:"display_value,omitempty"`
	// Types that are assignable to DisplayUnit:
	//
	//	*VehicleAttributeStatus_CombustionConsumptionUnit_
	//	*VehicleAttributeStatus_GasConsumptionUnit_
	//	*VehicleAttributeStatus_ElectricityConsumptionUnit_
	//	*VehicleAttributeStatus_SpeedDistanceUnit_
	//	*VehicleAttributeStatus_SpeedUnit_
	//	*VehicleAttributeStatus_DistanceUnit_
	//	*VehicleAttributeStatus_TemperatureUnit_
	//	*VehicleAttributeStatus_PressureUnit_
	//	*VehicleAttributeStatus_RatioUnit_
	//	*VehicleAttributeStatus_ClockHourUnit_
	DisplayUnit isVehicleAttributeStatus_DisplayUnit `protobuf_oneof:"display_unit"`
	// Types that are assignable to AttributeType:
	//
	//	*VehicleAttributeStatus_IntValue
	//	*VehicleAttributeStatus_BoolValue
	//	*VehicleAttributeStatus_StringValue
	//	*VehicleAttributeStatus_DoubleValue
	//	*VehicleAttributeStatus_NilValue
	//	*VehicleAttributeStatus_UnsupportedValue
	//	*VehicleAttributeStatus_TemperaturePointsValue
	//	*VehicleAttributeStatus_WeekdayTariffValue
	//	*VehicleAttributeStatus_WeekendTariffValue
	//	*VehicleAttributeStatus_StateOfChargeProfileValue
	//	*VehicleAttributeStatus_WeeklySettingsHeadUnitValue
	//	*VehicleAttributeStatus_SpeedAlertConfigurationValue
	//	*VehicleAttributeStatus_EcoHistogramValue
	//	*VehicleAttributeStatus_WeeklyProfileValue
	//	*VehicleAttributeStatus_ChargeProgramsValue
	AttributeType isVehicleAttributeStatus_AttributeType `protobuf_oneof:"attribute_type"`
}

func (x *VehicleAttributeStatus) Reset() {
	*x = VehicleAttributeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleAttributeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleAttributeStatus) ProtoMessage() {}

func (x *VehicleAttributeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleAttributeStatus.ProtoReflect.Descriptor instead.
func (*VehicleAttributeStatus) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in vehicle-events.proto.
func (x *VehicleAttributeStatus) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *VehicleAttributeStatus) GetTimestampInMs() int64 {
	if x != nil {
		return x.TimestampInMs
	}
	return 0
}

func (x *VehicleAttributeStatus) GetChanged() bool {
	if x != nil {
		return x.Changed
	}
	return false
}

func (x *VehicleAttributeStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VehicleAttributeStatus) GetServiceIds() []int32 {
	if x != nil {
		return x.ServiceIds
	}
	return nil
}

func (x *VehicleAttributeStatus) GetDisplayValue() string {
	if x != nil {
		return x.DisplayValue
	}
	return ""
}

func (m *VehicleAttributeStatus) GetDisplayUnit() isVehicleAttributeStatus_DisplayUnit {
	if m != nil {
		return m.DisplayUnit
	}
	return nil
}

func (x *VehicleAttributeStatus) GetCombustionConsumptionUnit() VehicleAttributeStatus_CombustionConsumptionUnit {
	if x, ok := x.GetDisplayUnit().(*VehicleAttributeStatus_CombustionConsumptionUnit_); ok {
		return x.CombustionConsumptionUnit
	}
	return VehicleAttributeStatus_UNSPECIFIED_COMBUSTION_CONSUMPTION_UNIT
}

func (x *VehicleAttributeStatus) GetGasConsumptionUnit() VehicleAttributeStatus_GasConsumptionUnit {
	if x, ok := x.GetDisplayUnit().(*VehicleAttributeStatus_GasConsumptionUnit_); ok {
		return x.GasConsumptionUnit
	}
	return VehicleAttributeStatus_UNSPECIFIED_GAS_CONSUMPTION_UNIT
}

func (x *VehicleAttributeStatus) GetElectricityConsumptionUnit() VehicleAttributeStatus_ElectricityConsumptionUnit {
	if x, ok := x.GetDisplayUnit().(*VehicleAttributeStatus_ElectricityConsumptionUnit_); ok {
		return x.ElectricityConsumptionUnit
	}
	return VehicleAttributeStatus_UNSPECIFIED_ELECTRICITY_CONSUMPTION_UNIT
}

// Deprecated: Marked as deprecated in vehicle-events.proto.
func (x *VehicleAttributeStatus) GetSpeedDistanceUnit() VehicleAttributeStatus_SpeedDistanceUnit {
	if x, ok := x.GetDisplayUnit().(*VehicleAttributeStatus_SpeedDistanceUnit_); ok {
		return x.SpeedDistanceUnit
	}
	return VehicleAttributeStatus_UNSPECIFIED_SPEED_DISTANCE_UNIT
}

func (x *VehicleAttributeStatus) GetSpeedUnit() VehicleAttributeStatus_SpeedUnit {
	if x, ok := x.GetDisplayUnit().(*VehicleAttributeStatus_SpeedUnit_); ok {
		return x.SpeedUnit
	}
	return VehicleAttributeStatus_UNSPECIFIED_SPEED_UNIT
}

func (x *VehicleAttributeStatus) GetDistanceUnit() VehicleAttributeStatus_DistanceUnit {
	if x, ok := x.GetDisplayUnit().(*VehicleAttributeStatus_DistanceUnit_); ok {
		return x.DistanceUnit
	}
	return VehicleAttributeStatus_UNSPECIFIED_DISTANCE_UNIT
}

func (x *VehicleAttributeStatus) GetTemperatureUnit() VehicleAttributeStatus_TemperatureUnit {
	if x, ok := x.GetDisplayUnit().(*VehicleAttributeStatus_TemperatureUnit_); ok {
		return x.TemperatureUnit
	}
	return VehicleAttributeStatus_UNSPECIFIED_TEMPERATURE_UNIT
}

func (x *VehicleAttributeStatus) GetPressureUnit() VehicleAttributeStatus_PressureUnit {
	if x, ok := x.GetDisplayUnit().(*VehicleAttributeStatus_PressureUnit_); ok {
		return x.PressureUnit
	}
	return VehicleAttributeStatus_UNSPECIFIED_PRESSURE_UNIT
}

func (x *VehicleAttributeStatus) GetRatioUnit() VehicleAttributeStatus_RatioUnit {
	if x, ok := x.GetDisplayUnit().(*VehicleAttributeStatus_RatioUnit_); ok {
		return x.RatioUnit
	}
	return VehicleAttributeStatus_UNSPECIFIED_RATIO_UNIT
}

func (x *VehicleAttributeStatus) GetClockHourUnit() VehicleAttributeStatus_ClockHourUnit {
	if x, ok := x.GetDisplayUnit().(*VehicleAttributeStatus_ClockHourUnit_); ok {
		return x.ClockHourUnit
	}
	return VehicleAttributeStatus_UNSPECIFIED_CLOCK_HOUR_UNIT
}

func (m *VehicleAttributeStatus) GetAttributeType() isVehicleAttributeStatus_AttributeType {
	if m != nil {
		return m.AttributeType
	}
	return nil
}

func (x *VehicleAttributeStatus) GetIntValue() int64 {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *VehicleAttributeStatus) GetBoolValue() bool {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *VehicleAttributeStatus) GetStringValue() string {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *VehicleAttributeStatus) GetDoubleValue() float64 {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *VehicleAttributeStatus) GetNilValue() bool {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_NilValue); ok {
		return x.NilValue
	}
	return false
}

func (x *VehicleAttributeStatus) GetUnsupportedValue() string {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_UnsupportedValue); ok {
		return x.UnsupportedValue
	}
	return ""
}

func (x *VehicleAttributeStatus) GetTemperaturePointsValue() *TemperaturePointsValue {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_TemperaturePointsValue); ok {
		return x.TemperaturePointsValue
	}
	return nil
}

func (x *VehicleAttributeStatus) GetWeekdayTariffValue() *WeekdayTariffValue {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_WeekdayTariffValue); ok {
		return x.WeekdayTariffValue
	}
	return nil
}

func (x *VehicleAttributeStatus) GetWeekendTariffValue() *WeekendTariffValue {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_WeekendTariffValue); ok {
		return x.WeekendTariffValue
	}
	return nil
}

func (x *VehicleAttributeStatus) GetStateOfChargeProfileValue() *StateOfChargeProfileValue {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_StateOfChargeProfileValue); ok {
		return x.StateOfChargeProfileValue
	}
	return nil
}

func (x *VehicleAttributeStatus) GetWeeklySettingsHeadUnitValue() *WeeklySettingsHeadUnitValue {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_WeeklySettingsHeadUnitValue); ok {
		return x.WeeklySettingsHeadUnitValue
	}
	return nil
}

func (x *VehicleAttributeStatus) GetSpeedAlertConfigurationValue() *SpeedAlertConfigurationValue {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_SpeedAlertConfigurationValue); ok {
		return x.SpeedAlertConfigurationValue
	}
	return nil
}

func (x *VehicleAttributeStatus) GetEcoHistogramValue() *EcoHistogramValue {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_EcoHistogramValue); ok {
		return x.EcoHistogramValue
	}
	return nil
}

func (x *VehicleAttributeStatus) GetWeeklyProfileValue() *WeeklyProfileValue {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_WeeklyProfileValue); ok {
		return x.WeeklyProfileValue
	}
	return nil
}

func (x *VehicleAttributeStatus) GetChargeProgramsValue() *ChargeProgramsValue {
	if x, ok := x.GetAttributeType().(*VehicleAttributeStatus_ChargeProgramsValue); ok {
		return x.ChargeProgramsValue
	}
	return nil
}

type isVehicleAttributeStatus_DisplayUnit interface {
	isVehicleAttributeStatus_DisplayUnit()
}

type VehicleAttributeStatus_CombustionConsumptionUnit_ struct {
	CombustionConsumptionUnit VehicleAttributeStatus_CombustionConsumptionUnit `protobuf:"varint,12,opt,name=combustion_consumption_unit,json=combustionConsumptionUnit,proto3,enum=proto.VehicleAttributeStatus_CombustionConsumptionUnit,oneof"`
}

type VehicleAttributeStatus_GasConsumptionUnit_ struct {
	GasConsumptionUnit VehicleAttributeStatus_GasConsumptionUnit `protobuf:"varint,13,opt,name=gas_consumption_unit,json=gasConsumptionUnit,proto3,enum=proto.VehicleAttributeStatus_GasConsumptionUnit,oneof"`
}

type VehicleAttributeStatus_ElectricityConsumptionUnit_ struct {
	ElectricityConsumptionUnit VehicleAttributeStatus_ElectricityConsumptionUnit `protobuf:"varint,14,opt,name=electricity_consumption_unit,json=electricityConsumptionUnit,proto3,enum=proto.VehicleAttributeStatus_ElectricityConsumptionUnit,oneof"`
}

type VehicleAttributeStatus_SpeedDistanceUnit_ struct {
	// Deprecated: Marked as deprecated in vehicle-events.proto.
	SpeedDistanceUnit VehicleAttributeStatus_SpeedDistanceUnit `protobuf:"varint,15,opt,name=speed_distance_unit,json=speedDistanceUnit,proto3,enum=proto.VehicleAttributeStatus_SpeedDistanceUnit,oneof"` // use speed unit / length unit instead
}

type VehicleAttributeStatus_SpeedUnit_ struct {
	SpeedUnit VehicleAttributeStatus_SpeedUnit `protobuf:"varint,25,opt,name=speed_unit,json=speedUnit,proto3,enum=proto.VehicleAttributeStatus_SpeedUnit,oneof"`
}

type VehicleAttributeStatus_DistanceUnit_ struct {
	DistanceUnit VehicleAttributeStatus_DistanceUnit `protobuf:"varint,26,opt,name=distance_unit,json=distanceUnit,proto3,enum=proto.VehicleAttributeStatus_DistanceUnit,oneof"`
}

type VehicleAttributeStatus_TemperatureUnit_ struct {
	TemperatureUnit VehicleAttributeStatus_TemperatureUnit `protobuf:"varint,16,opt,name=temperature_unit,json=temperatureUnit,proto3,enum=proto.VehicleAttributeStatus_TemperatureUnit,oneof"`
}

type VehicleAttributeStatus_PressureUnit_ struct {
	PressureUnit VehicleAttributeStatus_PressureUnit `protobuf:"varint,17,opt,name=pressure_unit,json=pressureUnit,proto3,enum=proto.VehicleAttributeStatus_PressureUnit,oneof"`
}

type VehicleAttributeStatus_RatioUnit_ struct {
	RatioUnit VehicleAttributeStatus_RatioUnit `protobuf:"varint,18,opt,name=ratio_unit,json=ratioUnit,proto3,enum=proto.VehicleAttributeStatus_RatioUnit,oneof"`
}

type VehicleAttributeStatus_ClockHourUnit_ struct {
	ClockHourUnit VehicleAttributeStatus_ClockHourUnit `protobuf:"varint,19,opt,name=clock_hour_unit,json=clockHourUnit,proto3,enum=proto.VehicleAttributeStatus_ClockHourUnit,oneof"`
}

func (*VehicleAttributeStatus_CombustionConsumptionUnit_) isVehicleAttributeStatus_DisplayUnit() {}

func (*VehicleAttributeStatus_GasConsumptionUnit_) isVehicleAttributeStatus_DisplayUnit() {}

func (*VehicleAttributeStatus_ElectricityConsumptionUnit_) isVehicleAttributeStatus_DisplayUnit() {}

func (*VehicleAttributeStatus_SpeedDistanceUnit_) isVehicleAttributeStatus_DisplayUnit() {}

func (*VehicleAttributeStatus_SpeedUnit_) isVehicleAttributeStatus_DisplayUnit() {}

func (*VehicleAttributeStatus_DistanceUnit_) isVehicleAttributeStatus_DisplayUnit() {}

func (*VehicleAttributeStatus_TemperatureUnit_) isVehicleAttributeStatus_DisplayUnit() {}

func (*VehicleAttributeStatus_PressureUnit_) isVehicleAttributeStatus_DisplayUnit() {}

func (*VehicleAttributeStatus_RatioUnit_) isVehicleAttributeStatus_DisplayUnit() {}

func (*VehicleAttributeStatus_ClockHourUnit_) isVehicleAttributeStatus_DisplayUnit() {}

type isVehicleAttributeStatus_AttributeType interface {
	isVehicleAttributeStatus_AttributeType()
}

type VehicleAttributeStatus_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,proto3,oneof"`
}

type VehicleAttributeStatus_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type VehicleAttributeStatus_StringValue struct {
	StringValue string `protobuf:"bytes,6,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type VehicleAttributeStatus_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,7,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type VehicleAttributeStatus_NilValue struct {
	NilValue bool `protobuf:"varint,8,opt,name=nil_value,json=nilValue,proto3,oneof"`
}

type VehicleAttributeStatus_UnsupportedValue struct {
	UnsupportedValue string `protobuf:"bytes,9,opt,name=unsupported_value,json=unsupportedValue,proto3,oneof"`
}

type VehicleAttributeStatus_TemperaturePointsValue struct {
	TemperaturePointsValue *TemperaturePointsValue `protobuf:"bytes,20,opt,name=temperature_points_value,json=temperaturePointsValue,proto3,oneof"`
}

type VehicleAttributeStatus_WeekdayTariffValue struct {
	WeekdayTariffValue *WeekdayTariffValue `protobuf:"bytes,21,opt,name=weekday_tariff_value,json=weekdayTariffValue,proto3,oneof"`
}

type VehicleAttributeStatus_WeekendTariffValue struct {
	WeekendTariffValue *WeekendTariffValue `protobuf:"bytes,22,opt,name=weekend_tariff_value,json=weekendTariffValue,proto3,oneof"`
}

type VehicleAttributeStatus_StateOfChargeProfileValue struct {
	StateOfChargeProfileValue *StateOfChargeProfileValue `protobuf:"bytes,23,opt,name=state_of_charge_profile_value,json=stateOfChargeProfileValue,proto3,oneof"`
}

type VehicleAttributeStatus_WeeklySettingsHeadUnitValue struct {
	WeeklySettingsHeadUnitValue *WeeklySettingsHeadUnitValue `protobuf:"bytes,24,opt,name=weekly_settings_head_unit_value,json=weeklySettingsHeadUnitValue,proto3,oneof"`
}

type VehicleAttributeStatus_SpeedAlertConfigurationValue struct {
	SpeedAlertConfigurationValue *SpeedAlertConfigurationValue `protobuf:"bytes,27,opt,name=speed_alert_configuration_value,json=speedAlertConfigurationValue,proto3,oneof"`
}

type VehicleAttributeStatus_EcoHistogramValue struct {
	EcoHistogramValue *EcoHistogramValue `protobuf:"bytes,28,opt,name=eco_histogram_value,json=ecoHistogramValue,proto3,oneof"`
}

type VehicleAttributeStatus_WeeklyProfileValue struct {
	WeeklyProfileValue *WeeklyProfileValue `protobuf:"bytes,29,opt,name=weekly_profile_value,json=weeklyProfileValue,proto3,oneof"`
}

type VehicleAttributeStatus_ChargeProgramsValue struct {
	ChargeProgramsValue *ChargeProgramsValue `protobuf:"bytes,31,opt,name=charge_programs_value,json=chargeProgramsValue,proto3,oneof"`
}

func (*VehicleAttributeStatus_IntValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_BoolValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_StringValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_DoubleValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_NilValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_UnsupportedValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_TemperaturePointsValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_WeekdayTariffValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_WeekendTariffValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_StateOfChargeProfileValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_WeeklySettingsHeadUnitValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_SpeedAlertConfigurationValue) isVehicleAttributeStatus_AttributeType() {
}

func (*VehicleAttributeStatus_EcoHistogramValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_WeeklyProfileValue) isVehicleAttributeStatus_AttributeType() {}

func (*VehicleAttributeStatus_ChargeProgramsValue) isVehicleAttributeStatus_AttributeType() {}

type ChargeProgramsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeProgramParameters []*ChargeProgramParameters `protobuf:"bytes,1,rep,name=charge_program_parameters,json=chargeProgramParameters,proto3" json:"charge_program_parameters,omitempty"`
}

func (x *ChargeProgramsValue) Reset() {
	*x = ChargeProgramsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeProgramsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeProgramsValue) ProtoMessage() {}

func (x *ChargeProgramsValue) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeProgramsValue.ProtoReflect.Descriptor instead.
func (*ChargeProgramsValue) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{2}
}

func (x *ChargeProgramsValue) GetChargeProgramParameters() []*ChargeProgramParameters {
	if x != nil {
		return x.ChargeProgramParameters
	}
	return nil
}

type ChargeProgramParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeProgram ChargeProgram `protobuf:"varint,1,opt,name=charge_program,json=chargeprogram,proto3,enum=proto.ChargeProgram" json:"charge_program,omitempty"`
	// Values need to be between 50 and 100 and divisible by ten
	// Maximum value for the state of charge of the HV battery [in %].
	// Valid value range = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
	MaxSoc int32 `protobuf:"varint,2,opt,name=max_soc,json=maxSoc,proto3" json:"max_soc,omitempty"`
	// unlock the plug after charging is finished
	// Denotes whether the charge cable should be unlocked automatically if the HV battery is fully charged resp. charged til Max. SoC value.
	// true - unlock automatically, false - do not unlock automatically
	// can only be used if chargeprogram is set to home or work. Otherwise it will be ignored.
	AutoUnlock bool `protobuf:"varint,3,opt,name=auto_unlock,json=autounlock,proto3" json:"auto_unlock,omitempty"`
	// automatically switch between home and work program, based on the location of the car
	// Denotes whether location based charging should be used.
	// true - use location based charging, false - do not use location based charging
	// can only be used if chargeprogram is set to home or work. Otherwise it will be ignored.
	LocationBasedCharging bool  `protobuf:"varint,4,opt,name=location_based_charging,json=locationbasedcharging,proto3" json:"location_based_charging,omitempty"`
	WeeklyProfile         bool  `protobuf:"varint,5,opt,name=weekly_profile,json=weeklyprofile,proto3" json:"weekly_profile,omitempty"`
	ClockTimer            bool  `protobuf:"varint,6,opt,name=clockTimer,proto3" json:"clockTimer,omitempty"`
	MaxChargingCurrent    int32 `protobuf:"varint,7,opt,name=max_charging_current,json=MaxChargingCurrent,proto3" json:"max_charging_current,omitempty"`
	EcoCharging           bool  `protobuf:"varint,8,opt,name=eco_charging,json=EcoCharging,proto3" json:"eco_charging,omitempty"`
}

func (x *ChargeProgramParameters) Reset() {
	*x = ChargeProgramParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeProgramParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeProgramParameters) ProtoMessage() {}

func (x *ChargeProgramParameters) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeProgramParameters.ProtoReflect.Descriptor instead.
func (*ChargeProgramParameters) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{3}
}

func (x *ChargeProgramParameters) GetChargeProgram() ChargeProgram {
	if x != nil {
		return x.ChargeProgram
	}
	return ChargeProgram_DEFAULT_CHARGE_PROGRAM
}

func (x *ChargeProgramParameters) GetMaxSoc() int32 {
	if x != nil {
		return x.MaxSoc
	}
	return 0
}

func (x *ChargeProgramParameters) GetAutoUnlock() bool {
	if x != nil {
		return x.AutoUnlock
	}
	return false
}

func (x *ChargeProgramParameters) GetLocationBasedCharging() bool {
	if x != nil {
		return x.LocationBasedCharging
	}
	return false
}

func (x *ChargeProgramParameters) GetWeeklyProfile() bool {
	if x != nil {
		return x.WeeklyProfile
	}
	return false
}

func (x *ChargeProgramParameters) GetClockTimer() bool {
	if x != nil {
		return x.ClockTimer
	}
	return false
}

func (x *ChargeProgramParameters) GetMaxChargingCurrent() int32 {
	if x != nil {
		return x.MaxChargingCurrent
	}
	return 0
}

func (x *ChargeProgramParameters) GetEcoCharging() bool {
	if x != nil {
		return x.EcoCharging
	}
	return false
}

type WeeklyProfileValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SingleTimeProfileEntriesActivatable bool              `protobuf:"varint,1,opt,name=single_time_profile_entries_activatable,json=singleTimeProfileEntriesActivatable,proto3" json:"single_time_profile_entries_activatable,omitempty"`
	MaxNumberOfWeeklyTimeProfileSlots   int32             `protobuf:"varint,2,opt,name=max_number_of_weekly_time_profile_slots,json=maxNumberOfWeeklyTimeProfileSlots,proto3" json:"max_number_of_weekly_time_profile_slots,omitempty"`
	MaxNumberOfTimeProfiles             int32             `protobuf:"varint,3,opt,name=max_number_of_time_profiles,json=maxNumberOfTimeProfiles,proto3" json:"max_number_of_time_profiles,omitempty"`
	CurrentNumberOfTimeProfileSlots     int32             `protobuf:"varint,4,opt,name=current_number_of_time_profile_slots,json=currentNumberOfTimeProfileSlots,proto3" json:"current_number_of_time_profile_slots,omitempty"`
	CurrentNumberOfTimeProfiles         int32             `protobuf:"varint,5,opt,name=current_number_of_time_profiles,json=currentNumberOfTimeProfiles,proto3" json:"current_number_of_time_profiles,omitempty"`
	TimeProfiles                        []*VVRTimeProfile `protobuf:"bytes,6,rep,name=time_profiles,json=timeProfiles,proto3" json:"time_profiles,omitempty"`
}

func (x *WeeklyProfileValue) Reset() {
	*x = WeeklyProfileValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeeklyProfileValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyProfileValue) ProtoMessage() {}

func (x *WeeklyProfileValue) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyProfileValue.ProtoReflect.Descriptor instead.
func (*WeeklyProfileValue) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{4}
}

func (x *WeeklyProfileValue) GetSingleTimeProfileEntriesActivatable() bool {
	if x != nil {
		return x.SingleTimeProfileEntriesActivatable
	}
	return false
}

func (x *WeeklyProfileValue) GetMaxNumberOfWeeklyTimeProfileSlots() int32 {
	if x != nil {
		return x.MaxNumberOfWeeklyTimeProfileSlots
	}
	return 0
}

func (x *WeeklyProfileValue) GetMaxNumberOfTimeProfiles() int32 {
	if x != nil {
		return x.MaxNumberOfTimeProfiles
	}
	return 0
}

func (x *WeeklyProfileValue) GetCurrentNumberOfTimeProfileSlots() int32 {
	if x != nil {
		return x.CurrentNumberOfTimeProfileSlots
	}
	return 0
}

func (x *WeeklyProfileValue) GetCurrentNumberOfTimeProfiles() int32 {
	if x != nil {
		return x.CurrentNumberOfTimeProfiles
	}
	return 0
}

func (x *WeeklyProfileValue) GetTimeProfiles() []*VVRTimeProfile {
	if x != nil {
		return x.TimeProfiles
	}
	return nil
}

// VVRTimeProfile is almost identical to the "TimeProfile" message with the exception that the identifier is not optional.
type VVRTimeProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id of this time profile entry
	Identifier int32 `protobuf:"varint,1,opt,name=identifier,json=id,proto3" json:"identifier,omitempty"`
	// Hour after midnight range [0, 23]
	Hour int32 `protobuf:"varint,2,opt,name=hour,proto3" json:"hour,omitempty"`
	// Minute after full hour range [0, 59]
	Minute int32 `protobuf:"varint,3,opt,name=minute,json=min,proto3" json:"minute,omitempty"`
	// Days for which the above time should be applied
	Days []TimeProfileDay `protobuf:"varint,4,rep,packed,name=days,json=day,proto3,enum=proto.TimeProfileDay" json:"days,omitempty"`
	// Whether this profile entry is active or not
	Active bool `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	// If a timeProfile is changed or added the respective applicationId must be provided by SDK
	//
	//	11 = Internal Apps
	//	12 = External Apps
	ApplicationIdentifier int32 `protobuf:"varint,6,opt,name=application_identifier,json=applicationId,proto3" json:"application_identifier,omitempty"`
}

func (x *VVRTimeProfile) Reset() {
	*x = VVRTimeProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VVRTimeProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VVRTimeProfile) ProtoMessage() {}

func (x *VVRTimeProfile) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VVRTimeProfile.ProtoReflect.Descriptor instead.
func (*VVRTimeProfile) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{5}
}

func (x *VVRTimeProfile) GetIdentifier() int32 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

func (x *VVRTimeProfile) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *VVRTimeProfile) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *VVRTimeProfile) GetDays() []TimeProfileDay {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *VVRTimeProfile) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *VVRTimeProfile) GetApplicationIdentifier() int32 {
	if x != nil {
		return x.ApplicationIdentifier
	}
	return 0
}

type EcoHistogramValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EcoHistogramBins []*EcoHistogramBin `protobuf:"bytes,1,rep,name=eco_histogram_bins,json=ecoHistogramBins,proto3" json:"eco_histogram_bins,omitempty"`
}

func (x *EcoHistogramValue) Reset() {
	*x = EcoHistogramValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcoHistogramValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcoHistogramValue) ProtoMessage() {}

func (x *EcoHistogramValue) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcoHistogramValue.ProtoReflect.Descriptor instead.
func (*EcoHistogramValue) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{6}
}

func (x *EcoHistogramValue) GetEcoHistogramBins() []*EcoHistogramBin {
	if x != nil {
		return x.EcoHistogramBins
	}
	return nil
}

type EcoHistogramBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval float64 `protobuf:"fixed64,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Value    float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EcoHistogramBin) Reset() {
	*x = EcoHistogramBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcoHistogramBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcoHistogramBin) ProtoMessage() {}

func (x *EcoHistogramBin) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcoHistogramBin.ProtoReflect.Descriptor instead.
func (*EcoHistogramBin) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{7}
}

func (x *EcoHistogramBin) GetInterval() float64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *EcoHistogramBin) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SpeedAlertConfigurationValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeedAlertConfigurations []*SpeedAlertConfiguration `protobuf:"bytes,1,rep,name=speed_alert_configurations,json=speedAlertConfigurations,proto3" json:"speed_alert_configurations,omitempty"`
}

func (x *SpeedAlertConfigurationValue) Reset() {
	*x = SpeedAlertConfigurationValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedAlertConfigurationValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedAlertConfigurationValue) ProtoMessage() {}

func (x *SpeedAlertConfigurationValue) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedAlertConfigurationValue.ProtoReflect.Descriptor instead.
func (*SpeedAlertConfigurationValue) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{8}
}

func (x *SpeedAlertConfigurationValue) GetSpeedAlertConfigurations() []*SpeedAlertConfiguration {
	if x != nil {
		return x.SpeedAlertConfigurations
	}
	return nil
}

type SpeedAlertConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unix timestamp in seconds
	EndTimestampInS int64 `protobuf:"varint,1,opt,name=end_timestamp_in_s,json=endTimestampInS,proto3" json:"end_timestamp_in_s,omitempty"`
	// Speed in kilometers per hour
	ThresholdInKph int32 `protobuf:"varint,2,opt,name=threshold_in_kph,json=thresholdInKph,proto3" json:"threshold_in_kph,omitempty"`
	// threshold value in the users preferred unit
	ThresholdDisplayValue string `protobuf:"bytes,3,opt,name=threshold_display_value,json=thresholdDisplayValue,proto3" json:"threshold_display_value,omitempty"`
}

func (x *SpeedAlertConfiguration) Reset() {
	*x = SpeedAlertConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedAlertConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedAlertConfiguration) ProtoMessage() {}

func (x *SpeedAlertConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedAlertConfiguration.ProtoReflect.Descriptor instead.
func (*SpeedAlertConfiguration) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{9}
}

func (x *SpeedAlertConfiguration) GetEndTimestampInS() int64 {
	if x != nil {
		return x.EndTimestampInS
	}
	return 0
}

func (x *SpeedAlertConfiguration) GetThresholdInKph() int32 {
	if x != nil {
		return x.ThresholdInKph
	}
	return 0
}

func (x *SpeedAlertConfiguration) GetThresholdDisplayValue() string {
	if x != nil {
		return x.ThresholdDisplayValue
	}
	return ""
}

type WeeklySettingsHeadUnitValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array with 0 to 21 tupels of day (0..6, 0 = Monday, 1= Tuesday, ..) and departure time in min since midnight (0..1439)
	WeeklySettings []*WeeklySetting `protobuf:"bytes,1,rep,name=weekly_settings,json=weeklySettings,proto3" json:"weekly_settings,omitempty"`
}

func (x *WeeklySettingsHeadUnitValue) Reset() {
	*x = WeeklySettingsHeadUnitValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeeklySettingsHeadUnitValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklySettingsHeadUnitValue) ProtoMessage() {}

func (x *WeeklySettingsHeadUnitValue) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklySettingsHeadUnitValue.ProtoReflect.Descriptor instead.
func (*WeeklySettingsHeadUnitValue) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{10}
}

func (x *WeeklySettingsHeadUnitValue) GetWeeklySettings() []*WeeklySetting {
	if x != nil {
		return x.WeeklySettings
	}
	return nil
}

type WeeklySetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day                  int32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	MinutesSinceMidnight int32 `protobuf:"varint,2,opt,name=minutes_since_midnight,json=minutesSinceMidnight,proto3" json:"minutes_since_midnight,omitempty"`
}

func (x *WeeklySetting) Reset() {
	*x = WeeklySetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeeklySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklySetting) ProtoMessage() {}

func (x *WeeklySetting) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklySetting.ProtoReflect.Descriptor instead.
func (*WeeklySetting) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{11}
}

func (x *WeeklySetting) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *WeeklySetting) GetMinutesSinceMidnight() int32 {
	if x != nil {
		return x.MinutesSinceMidnight
	}
	return 0
}

type TemperaturePointsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array with 1 to 5 tupels of zone (frontLeft, frontRight, frontCenter, rearRight, rearLeft, rearCenter, rear2center)
	// and temperature in °C where 0 means maximum cooling (LOW) and 30 means maximum heating (HIGH)
	TemperaturePoints []*TemperaturePoint `protobuf:"bytes,1,rep,name=temperature_points,json=temperaturePoints,proto3" json:"temperature_points,omitempty"`
}

func (x *TemperaturePointsValue) Reset() {
	*x = TemperaturePointsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperaturePointsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperaturePointsValue) ProtoMessage() {}

func (x *TemperaturePointsValue) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperaturePointsValue.ProtoReflect.Descriptor instead.
func (*TemperaturePointsValue) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{12}
}

func (x *TemperaturePointsValue) GetTemperaturePoints() []*TemperaturePoint {
	if x != nil {
		return x.TemperaturePoints
	}
	return nil
}

type TemperaturePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zone                    string  `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
	Temperature             float64 `protobuf:"fixed64,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	TemperatureDisplayValue string  `protobuf:"bytes,3,opt,name=temperature_display_value,json=temperatureDisplayValue,proto3" json:"temperature_display_value,omitempty"`
}

func (x *TemperaturePoint) Reset() {
	*x = TemperaturePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperaturePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperaturePoint) ProtoMessage() {}

func (x *TemperaturePoint) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperaturePoint.ProtoReflect.Descriptor instead.
func (*TemperaturePoint) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{13}
}

func (x *TemperaturePoint) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *TemperaturePoint) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *TemperaturePoint) GetTemperatureDisplayValue() string {
	if x != nil {
		return x.TemperatureDisplayValue
	}
	return ""
}

type WeekdayTariffValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of sampling points. Hint: Array will be empty in initial state. I. e.: rate and time will not be existent in initial state.
	Tariffs []*Tariff `protobuf:"bytes,1,rep,name=tariffs,proto3" json:"tariffs,omitempty"`
}

func (x *WeekdayTariffValue) Reset() {
	*x = WeekdayTariffValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeekdayTariffValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeekdayTariffValue) ProtoMessage() {}

func (x *WeekdayTariffValue) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeekdayTariffValue.ProtoReflect.Descriptor instead.
func (*WeekdayTariffValue) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{14}
}

func (x *WeekdayTariffValue) GetTariffs() []*Tariff {
	if x != nil {
		return x.Tariffs
	}
	return nil
}

type WeekendTariffValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of sampling points. Hint: Array will be empty in initial state. I. e.: rate and time will not be existent in initial state.
	Tariffs []*Tariff `protobuf:"bytes,1,rep,name=tariffs,proto3" json:"tariffs,omitempty"`
}

func (x *WeekendTariffValue) Reset() {
	*x = WeekendTariffValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeekendTariffValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeekendTariffValue) ProtoMessage() {}

func (x *WeekendTariffValue) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeekendTariffValue.ProtoReflect.Descriptor instead.
func (*WeekendTariffValue) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{15}
}

func (x *WeekendTariffValue) GetTariffs() []*Tariff {
	if x != nil {
		return x.Tariffs
	}
	return nil
}

type Tariff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 33 - off-peak, 44 - mid-peak, 66 - on-peak
	Rate int32 `protobuf:"varint,1,opt,name=rate,proto3" json:"rate,omitempty"`
	// Seconds from midnight
	Time int32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Tariff) Reset() {
	*x = Tariff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tariff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tariff) ProtoMessage() {}

func (x *Tariff) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tariff.ProtoReflect.Descriptor instead.
func (*Tariff) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{16}
}

func (x *Tariff) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Tariff) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type StateOfChargeProfileValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array with tupels of state of charge and time offset related to the timestamp of the attribute,
	// e.g. [{t, soc}, {t, soc}, .., {t, soc}] (every soc with value range 0..100, every timestamp in seconds, UTC)
	StatesOfCharge []*StateOfCharge `protobuf:"bytes,1,rep,name=states_of_charge,json=statesOfCharge,proto3" json:"states_of_charge,omitempty"`
}

func (x *StateOfChargeProfileValue) Reset() {
	*x = StateOfChargeProfileValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateOfChargeProfileValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateOfChargeProfileValue) ProtoMessage() {}

func (x *StateOfChargeProfileValue) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateOfChargeProfileValue.ProtoReflect.Descriptor instead.
func (*StateOfChargeProfileValue) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{17}
}

func (x *StateOfChargeProfileValue) GetStatesOfCharge() []*StateOfCharge {
	if x != nil {
		return x.StatesOfCharge
	}
	return nil
}

type StateOfCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp in seconds, UTC
	TimestampInS int64 `protobuf:"varint,1,opt,name=timestamp_in_s,json=timestampInS,proto3" json:"timestamp_in_s,omitempty"`
	// soc with value range 0..100
	StateOfCharge int32 `protobuf:"varint,2,opt,name=state_of_charge,json=stateOfCharge,proto3" json:"state_of_charge,omitempty"`
}

func (x *StateOfCharge) Reset() {
	*x = StateOfCharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateOfCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateOfCharge) ProtoMessage() {}

func (x *StateOfCharge) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateOfCharge.ProtoReflect.Descriptor instead.
func (*StateOfCharge) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{18}
}

func (x *StateOfCharge) GetTimestampInS() int64 {
	if x != nil {
		return x.TimestampInS
	}
	return 0
}

func (x *StateOfCharge) GetStateOfCharge() int32 {
	if x != nil {
		return x.StateOfCharge
	}
	return 0
}

// Sending direction: App <- BFF <- AppTwin
type VEPUpdatesByVIN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber int32 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// VIN -> Update
	Updates map[string]*VEPUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VEPUpdatesByVIN) Reset() {
	*x = VEPUpdatesByVIN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VEPUpdatesByVIN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VEPUpdatesByVIN) ProtoMessage() {}

func (x *VEPUpdatesByVIN) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VEPUpdatesByVIN.ProtoReflect.Descriptor instead.
func (*VEPUpdatesByVIN) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{19}
}

func (x *VEPUpdatesByVIN) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *VEPUpdatesByVIN) GetUpdates() map[string]*VEPUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

// Sending direction: App <- BFF
type DebugMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DebugMessage) Reset() {
	*x = DebugMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugMessage) ProtoMessage() {}

func (x *DebugMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugMessage.ProtoReflect.Descriptor instead.
func (*DebugMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{20}
}

func (x *DebugMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Represents a status response from the
// VVA backend for a given VIN and CIAM ID.
type VehicleStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vin        string                             `protobuf:"bytes,1,opt,name=vin,proto3" json:"vin,omitempty"`
	Attributes map[string]*VehicleAttributeStatus `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VehicleStatus) Reset() {
	*x = VehicleStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleStatus) ProtoMessage() {}

func (x *VehicleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleStatus.ProtoReflect.Descriptor instead.
func (*VehicleStatus) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{21}
}

func (x *VehicleStatus) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *VehicleStatus) GetAttributes() map[string]*VehicleAttributeStatus {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// message that is pushed from the vep status service
// Sending direction: App <- BFF
type PushMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackingId string `protobuf:"bytes,5,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	// Types that are assignable to Msg:
	//
	//	*PushMessage_VepUpdate
	//	*PushMessage_VepUpdates
	//	*PushMessage_DebugMessage
	//	*PushMessage_ServiceStatusUpdates
	//	*PushMessage_ServiceStatusUpdate
	//	*PushMessage_UserDataUpdate
	//	*PushMessage_UserVehicleAuthChangedUpdate
	//	*PushMessage_UserPictureUpdate
	//	*PushMessage_UserPinUpdate
	//	*PushMessage_VehicleUpdated
	//	*PushMessage_PreferredDealerChange
	//	*PushMessage_ApptwinCommandStatusUpdatesByVin
	//	*PushMessage_ApptwinPendingCommandRequest
	//	*PushMessage_AssignedVehicles
	Msg isPushMessage_Msg `protobuf_oneof:"msg"`
}

func (x *PushMessage) Reset() {
	*x = PushMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMessage) ProtoMessage() {}

func (x *PushMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMessage.ProtoReflect.Descriptor instead.
func (*PushMessage) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{22}
}

func (x *PushMessage) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (m *PushMessage) GetMsg() isPushMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *PushMessage) GetVepUpdate() *VEPUpdate {
	if x, ok := x.GetMsg().(*PushMessage_VepUpdate); ok {
		return x.VepUpdate
	}
	return nil
}

func (x *PushMessage) GetVepUpdates() *VEPUpdatesByVIN {
	if x, ok := x.GetMsg().(*PushMessage_VepUpdates); ok {
		return x.VepUpdates
	}
	return nil
}

func (x *PushMessage) GetDebugMessage() *DebugMessage {
	if x, ok := x.GetMsg().(*PushMessage_DebugMessage); ok {
		return x.DebugMessage
	}
	return nil
}

func (x *PushMessage) GetServiceStatusUpdates() *ServiceStatusUpdatesByVIN {
	if x, ok := x.GetMsg().(*PushMessage_ServiceStatusUpdates); ok {
		return x.ServiceStatusUpdates
	}
	return nil
}

func (x *PushMessage) GetServiceStatusUpdate() *ServiceStatusUpdate {
	if x, ok := x.GetMsg().(*PushMessage_ServiceStatusUpdate); ok {
		return x.ServiceStatusUpdate
	}
	return nil
}

func (x *PushMessage) GetUserDataUpdate() *UserDataUpdate {
	if x, ok := x.GetMsg().(*PushMessage_UserDataUpdate); ok {
		return x.UserDataUpdate
	}
	return nil
}

func (x *PushMessage) GetUserVehicleAuthChangedUpdate() *UserVehicleAuthChangedUpdate {
	if x, ok := x.GetMsg().(*PushMessage_UserVehicleAuthChangedUpdate); ok {
		return x.UserVehicleAuthChangedUpdate
	}
	return nil
}

func (x *PushMessage) GetUserPictureUpdate() *UserPictureUpdate {
	if x, ok := x.GetMsg().(*PushMessage_UserPictureUpdate); ok {
		return x.UserPictureUpdate
	}
	return nil
}

func (x *PushMessage) GetUserPinUpdate() *UserPINUpdate {
	if x, ok := x.GetMsg().(*PushMessage_UserPinUpdate); ok {
		return x.UserPinUpdate
	}
	return nil
}

func (x *PushMessage) GetVehicleUpdated() *VehicleUpdated {
	if x, ok := x.GetMsg().(*PushMessage_VehicleUpdated); ok {
		return x.VehicleUpdated
	}
	return nil
}

func (x *PushMessage) GetPreferredDealerChange() *PreferredDealerChange {
	if x, ok := x.GetMsg().(*PushMessage_PreferredDealerChange); ok {
		return x.PreferredDealerChange
	}
	return nil
}

func (x *PushMessage) GetApptwinCommandStatusUpdatesByVin() *AppTwinCommandStatusUpdatesByVIN {
	if x, ok := x.GetMsg().(*PushMessage_ApptwinCommandStatusUpdatesByVin); ok {
		return x.ApptwinCommandStatusUpdatesByVin
	}
	return nil
}

func (x *PushMessage) GetApptwinPendingCommandRequest() *AppTwinPendingCommandsRequest {
	if x, ok := x.GetMsg().(*PushMessage_ApptwinPendingCommandRequest); ok {
		return x.ApptwinPendingCommandRequest
	}
	return nil
}

func (x *PushMessage) GetAssignedVehicles() *protos.AssignedVehicles {
	if x, ok := x.GetMsg().(*PushMessage_AssignedVehicles); ok {
		return x.AssignedVehicles
	}
	return nil
}

type isPushMessage_Msg interface {
	isPushMessage_Msg()
}

type PushMessage_VepUpdate struct {
	VepUpdate *VEPUpdate `protobuf:"bytes,1,opt,name=vepUpdate,proto3,oneof"`
}

type PushMessage_VepUpdates struct {
	VepUpdates *VEPUpdatesByVIN `protobuf:"bytes,2,opt,name=vepUpdates,proto3,oneof"`
}

type PushMessage_DebugMessage struct {
	DebugMessage *DebugMessage `protobuf:"bytes,3,opt,name=debugMessage,proto3,oneof"`
}

type PushMessage_ServiceStatusUpdates struct {
	ServiceStatusUpdates *ServiceStatusUpdatesByVIN `protobuf:"bytes,9,opt,name=service_status_updates,json=serviceStatusUpdates,proto3,oneof"`
}

type PushMessage_ServiceStatusUpdate struct {
	ServiceStatusUpdate *ServiceStatusUpdate `protobuf:"bytes,13,opt,name=service_status_update,json=serviceStatusUpdate,proto3,oneof"`
}

type PushMessage_UserDataUpdate struct {
	UserDataUpdate *UserDataUpdate `protobuf:"bytes,10,opt,name=user_data_update,json=userDataUpdate,proto3,oneof"`
}

type PushMessage_UserVehicleAuthChangedUpdate struct {
	UserVehicleAuthChangedUpdate *UserVehicleAuthChangedUpdate `protobuf:"bytes,14,opt,name=user_vehicle_auth_changed_update,json=userVehicleAuthChangedUpdate,proto3,oneof"`
}

type PushMessage_UserPictureUpdate struct {
	UserPictureUpdate *UserPictureUpdate `protobuf:"bytes,11,opt,name=user_picture_update,json=userPictureUpdate,proto3,oneof"`
}

type PushMessage_UserPinUpdate struct {
	UserPinUpdate *UserPINUpdate `protobuf:"bytes,12,opt,name=user_pin_update,json=userPinUpdate,proto3,oneof"`
}

type PushMessage_VehicleUpdated struct {
	VehicleUpdated *VehicleUpdated `protobuf:"bytes,15,opt,name=vehicle_updated,json=vehicleUpdated,proto3,oneof"`
}

type PushMessage_PreferredDealerChange struct {
	PreferredDealerChange *PreferredDealerChange `protobuf:"bytes,16,opt,name=preferred_dealer_change,json=preferredDealerChange,proto3,oneof"`
}

type PushMessage_ApptwinCommandStatusUpdatesByVin struct {
	ApptwinCommandStatusUpdatesByVin *AppTwinCommandStatusUpdatesByVIN `protobuf:"bytes,17,opt,name=apptwin_command_status_updates_by_vin,json=apptwinCommandStatusUpdatesByVin,proto3,oneof"`
}

type PushMessage_ApptwinPendingCommandRequest struct {
	ApptwinPendingCommandRequest *AppTwinPendingCommandsRequest `protobuf:"bytes,18,opt,name=apptwin_pending_command_request,json=apptwinPendingCommandRequest,proto3,oneof"`
}

type PushMessage_AssignedVehicles struct {
	AssignedVehicles *protos.AssignedVehicles `protobuf:"bytes,19,opt,name=assigned_vehicles,json=assignedVehicles,proto3,oneof"`
}

func (*PushMessage_VepUpdate) isPushMessage_Msg() {}

func (*PushMessage_VepUpdates) isPushMessage_Msg() {}

func (*PushMessage_DebugMessage) isPushMessage_Msg() {}

func (*PushMessage_ServiceStatusUpdates) isPushMessage_Msg() {}

func (*PushMessage_ServiceStatusUpdate) isPushMessage_Msg() {}

func (*PushMessage_UserDataUpdate) isPushMessage_Msg() {}

func (*PushMessage_UserVehicleAuthChangedUpdate) isPushMessage_Msg() {}

func (*PushMessage_UserPictureUpdate) isPushMessage_Msg() {}

func (*PushMessage_UserPinUpdate) isPushMessage_Msg() {}

func (*PushMessage_VehicleUpdated) isPushMessage_Msg() {}

func (*PushMessage_PreferredDealerChange) isPushMessage_Msg() {}

func (*PushMessage_ApptwinCommandStatusUpdatesByVin) isPushMessage_Msg() {}

func (*PushMessage_ApptwinPendingCommandRequest) isPushMessage_Msg() {}

func (*PushMessage_AssignedVehicles) isPushMessage_Msg() {}

// message type to track an event, e.g. a user interaction with content
// Sending direction: App -> BFF
type TrackingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a unique id associated with this event
	TrackingId string `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	// the unix epoch time in nanoseconds when the event occurred
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// a unique identifier describing a single interaction or event
	EventType string `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// additional meta data describing the event
	Payload map[string]*PayloadValue `protobuf:"bytes,4,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TrackingEvent) Reset() {
	*x = TrackingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackingEvent) ProtoMessage() {}

func (x *TrackingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackingEvent.ProtoReflect.Descriptor instead.
func (*TrackingEvent) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{23}
}

func (x *TrackingEvent) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *TrackingEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TrackingEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *TrackingEvent) GetPayload() map[string]*PayloadValue {
	if x != nil {
		return x.Payload
	}
	return nil
}

type PayloadValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*PayloadValue_StringValue
	//	*PayloadValue_IntValue
	//	*PayloadValue_BoolValue
	//	*PayloadValue_DoubleValue
	Msg isPayloadValue_Msg `protobuf_oneof:"msg"`
}

func (x *PayloadValue) Reset() {
	*x = PayloadValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadValue) ProtoMessage() {}

func (x *PayloadValue) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadValue.ProtoReflect.Descriptor instead.
func (*PayloadValue) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{24}
}

func (m *PayloadValue) GetMsg() isPayloadValue_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *PayloadValue) GetStringValue() string {
	if x, ok := x.GetMsg().(*PayloadValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *PayloadValue) GetIntValue() int32 {
	if x, ok := x.GetMsg().(*PayloadValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *PayloadValue) GetBoolValue() bool {
	if x, ok := x.GetMsg().(*PayloadValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *PayloadValue) GetDoubleValue() float64 {
	if x, ok := x.GetMsg().(*PayloadValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

type isPayloadValue_Msg interface {
	isPayloadValue_Msg()
}

type PayloadValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type PayloadValue_IntValue struct {
	IntValue int32 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type PayloadValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type PayloadValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

func (*PayloadValue_StringValue) isPayloadValue_Msg() {}

func (*PayloadValue_IntValue) isPayloadValue_Msg() {}

func (*PayloadValue_BoolValue) isPayloadValue_Msg() {}

func (*PayloadValue_DoubleValue) isPayloadValue_Msg() {}

// acknowledge that the VEP updates of up to `sequenceNumber` have been received
// Sending direction: App -> BFF -> AppTwin
//
// Deprecated: Marked as deprecated in vehicle-events.proto.
type AcknowledgeVEPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber int32 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *AcknowledgeVEPRequest) Reset() {
	*x = AcknowledgeVEPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeVEPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeVEPRequest) ProtoMessage() {}

func (x *AcknowledgeVEPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeVEPRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeVEPRequest) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{25}
}

func (x *AcknowledgeVEPRequest) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// acknowledge that the VEP updates by vin of up to `sequenceNumber` have been received
// Sending direction: App -> BFF -> AppTwin
// This message should replace the AcknowledgeVEPRequest
type AcknowledgeVEPUpdatesByVIN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber int32 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *AcknowledgeVEPUpdatesByVIN) Reset() {
	*x = AcknowledgeVEPUpdatesByVIN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeVEPUpdatesByVIN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeVEPUpdatesByVIN) ProtoMessage() {}

func (x *AcknowledgeVEPUpdatesByVIN) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeVEPUpdatesByVIN.ProtoReflect.Descriptor instead.
func (*AcknowledgeVEPUpdatesByVIN) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{26}
}

func (x *AcknowledgeVEPUpdatesByVIN) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// the client can optionally send this message to reconfigure the ping interval
// Sending direction: App -> BFF
type ConfigurePingInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingTimeMillis int32 `protobuf:"varint,1,opt,name=ping_time_millis,json=pingTimeMillis,proto3" json:"ping_time_millis,omitempty"`
}

func (x *ConfigurePingInterval) Reset() {
	*x = ConfigurePingInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurePingInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurePingInterval) ProtoMessage() {}

func (x *ConfigurePingInterval) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurePingInterval.ProtoReflect.Descriptor instead.
func (*ConfigurePingInterval) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{27}
}

func (x *ConfigurePingInterval) GetPingTimeMillis() int32 {
	if x != nil {
		return x.PingTimeMillis
	}
	return 0
}

type AcknowledgeVehicleUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber int32 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *AcknowledgeVehicleUpdated) Reset() {
	*x = AcknowledgeVehicleUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeVehicleUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeVehicleUpdated) ProtoMessage() {}

func (x *AcknowledgeVehicleUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeVehicleUpdated.ProtoReflect.Descriptor instead.
func (*AcknowledgeVehicleUpdated) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{28}
}

func (x *AcknowledgeVehicleUpdated) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type AcknowledgePreferredDealerChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber int32 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *AcknowledgePreferredDealerChange) Reset() {
	*x = AcknowledgePreferredDealerChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgePreferredDealerChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgePreferredDealerChange) ProtoMessage() {}

func (x *AcknowledgePreferredDealerChange) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgePreferredDealerChange.ProtoReflect.Descriptor instead.
func (*AcknowledgePreferredDealerChange) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{29}
}

func (x *AcknowledgePreferredDealerChange) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type VehicleUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber int32  `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	CiamId         string `protobuf:"bytes,2,opt,name=ciam_id,json=ciamId,proto3" json:"ciam_id,omitempty"`
	Vin            string `protobuf:"bytes,3,opt,name=vin,proto3" json:"vin,omitempty"`
	// When was the event emitted (milliseconds in Unix time)
	EmitTimestampInMs int64 `protobuf:"varint,10,opt,name=emit_timestamp_in_ms,json=emitTimestampInMs,proto3" json:"emit_timestamp_in_ms,omitempty"`
}

func (x *VehicleUpdated) Reset() {
	*x = VehicleUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleUpdated) ProtoMessage() {}

func (x *VehicleUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleUpdated.ProtoReflect.Descriptor instead.
func (*VehicleUpdated) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{30}
}

func (x *VehicleUpdated) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *VehicleUpdated) GetCiamId() string {
	if x != nil {
		return x.CiamId
	}
	return ""
}

func (x *VehicleUpdated) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *VehicleUpdated) GetEmitTimestampInMs() int64 {
	if x != nil {
		return x.EmitTimestampInMs
	}
	return 0
}

type PreferredDealerChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber int32  `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	CiamId         string `protobuf:"bytes,2,opt,name=ciam_id,json=ciamId,proto3" json:"ciam_id,omitempty"`
	Vin            string `protobuf:"bytes,3,opt,name=vin,proto3" json:"vin,omitempty"`
	// When was the event emitted (milliseconds in Unix time)
	EmitTimestampInMs int64 `protobuf:"varint,10,opt,name=emit_timestamp_in_ms,json=emitTimestampInMs,proto3" json:"emit_timestamp_in_ms,omitempty"`
}

func (x *PreferredDealerChange) Reset() {
	*x = PreferredDealerChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_events_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreferredDealerChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreferredDealerChange) ProtoMessage() {}

func (x *PreferredDealerChange) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_events_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreferredDealerChange.ProtoReflect.Descriptor instead.
func (*PreferredDealerChange) Descriptor() ([]byte, []int) {
	return file_vehicle_events_proto_rawDescGZIP(), []int{31}
}

func (x *PreferredDealerChange) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *PreferredDealerChange) GetCiamId() string {
	if x != nil {
		return x.CiamId
	}
	return ""
}

func (x *PreferredDealerChange) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *PreferredDealerChange) GetEmitTimestampInMs() int64 {
	if x != nil {
		return x.EmitTimestampInMs
	}
	return 0
}

var File_vehicle_events_proto protoreflect.FileDescriptor

var file_vehicle_events_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xdf, 0x02, 0x0a, 0x09, 0x56, 0x45, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x49, 0x6e, 0x4d, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x45, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x5c, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x18, 0x0a, 0x16, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x69,
	0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x4d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x79, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x62, 0x75, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x75, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x62, 0x75, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x64, 0x0a, 0x14,
	0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x67, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x7c, 0x0a, 0x1c, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x65, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x51, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x5a, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x51, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x55, 0x6e, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x55, 0x0a,
	0x0f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x55,
	0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x72,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x6e, 0x69, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x08, 0x6e, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a,
	0x11, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x75, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x59, 0x0a, 0x18,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52,
	0x16, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x77, 0x65, 0x65, 0x6b, 0x64,
	0x61, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65,
	0x65, 0x6b, 0x64, 0x61, 0x79, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x01, 0x52, 0x12, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x65,
	0x6b, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x01, 0x52, 0x12, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x64, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01,
	0x52, 0x19, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6a, 0x0a, 0x1f, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x65, 0x61, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x1b, 0x77, 0x65, 0x65, 0x6b,
	0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x65, 0x61, 0x64, 0x55, 0x6e,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6c, 0x0a, 0x1f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x1c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x65, 0x63, 0x6f, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x11,
	0x65, 0x63, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x4d, 0x0a, 0x14, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x12, 0x77, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x50, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x13, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x62, 0x75, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x2b, 0x0a, 0x27, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f,
	0x43, 0x4f, 0x4d, 0x42, 0x55, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55,
	0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x31, 0x30, 0x30, 0x4b, 0x4d,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x54,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x50, 0x47, 0x5f, 0x55, 0x4b, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x50, 0x47, 0x5f, 0x55, 0x53, 0x10, 0x04, 0x22, 0x99, 0x01, 0x0a,
	0x1a, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x28, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x52, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x57, 0x48,
	0x5f, 0x50, 0x45, 0x52, 0x5f, 0x31, 0x30, 0x30, 0x4b, 0x4d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x4b, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4b, 0x57, 0x48, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x4b, 0x57, 0x48, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x31, 0x30, 0x30, 0x4d, 0x49, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4b, 0x57, 0x48, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x50, 0x47, 0x45, 0x10, 0x05, 0x22, 0x69, 0x0a, 0x12, 0x47, 0x61, 0x73, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24,
	0x0a, 0x20, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x47, 0x41,
	0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x31,
	0x30, 0x30, 0x4b, 0x4d, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x4d, 0x5f, 0x50, 0x45, 0x52,
	0x5f, 0x4b, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4b,
	0x47, 0x10, 0x03, 0x22, 0x57, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x65, 0x64, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4b, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x48, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x5f, 0x50, 0x45, 0x52, 0x5f, 0x48, 0x10, 0x02, 0x1a, 0x02, 0x18, 0x01, 0x22, 0x48, 0x0a, 0x09,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f,
	0x48, 0x4f, 0x55, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f,
	0x48, 0x4f, 0x55, 0x52, 0x10, 0x02, 0x22, 0x48, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4c, 0x4f, 0x4d, 0x45, 0x54,
	0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x02,
	0x22, 0x50, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45, 0x4c, 0x53, 0x49, 0x55, 0x53,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x48, 0x52, 0x45, 0x4e, 0x48, 0x45, 0x49, 0x54,
	0x10, 0x02, 0x22, 0x48, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x50, 0x41, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41,
	0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53, 0x49, 0x10, 0x03, 0x22, 0x34, 0x0a, 0x09,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x22, 0x44, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x31, 0x32, 0x48, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x32, 0x34, 0x48, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x5a, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x17, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xe4, 0x02,
	0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6f,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x53, 0x6f, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x36, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x65, 0x65, 0x6b,
	0x6c, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d,
	0x61, 0x78, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x63, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x63, 0x6f, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x22, 0xcd, 0x03, 0x0a, 0x12, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x27, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x52, 0x0a, 0x27, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x21, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x57,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x24, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x56, 0x52, 0x54, 0x69, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x56, 0x56, 0x52, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x12, 0x13, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x52, 0x03, 0x64,
	0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x16, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x11, 0x45, 0x63, 0x6f,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44,
	0x0a, 0x12, 0x65, 0x63, 0x6f, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x62, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42,
	0x69, 0x6e, 0x52, 0x10, 0x65, 0x63, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x42, 0x69, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x0f, 0x45, 0x63, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7c, 0x0a, 0x1c, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5c, 0x0a, 0x1a, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x17, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x53,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e,
	0x5f, 0x6b, 0x70, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x4b, 0x70, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x5c, 0x0a, 0x1b, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x48, 0x65, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x57, 0x0a, 0x0d, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x64, 0x61, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x53, 0x69, 0x6e, 0x63,
	0x65, 0x4d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x22, 0x60, 0x0a, 0x16, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x10,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x3d, 0x0a, 0x12, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x07, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x73, 0x22, 0x3d, 0x0a, 0x12, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x07, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73,
	0x22, 0x30, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3e, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22,
	0x5d, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x49, 0x6e, 0x53, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0xc7,
	0x01, 0x0a, 0x0f, 0x56, 0x45, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x56,
	0x49, 0x4e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x45, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42,
	0x79, 0x56, 0x49, 0x4e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x45, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x28, 0x0a, 0x0c, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x76, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x5c, 0x0a, 0x0f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x09, 0x0a, 0x0b, 0x50,
	0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x76,
	0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x45, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x76, 0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x76, 0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x45, 0x50, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x56, 0x49, 0x4e, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x65, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42,
	0x79, 0x56, 0x49, 0x4e, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x15,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x6d, 0x0a, 0x20, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x4a, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x49, 0x4e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0f,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x56,
	0x0a, 0x17, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x7a, 0x0a, 0x25, 0x61, 0x70, 0x70, 0x74, 0x77, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x69, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70,
	0x70, 0x54, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x56, 0x49, 0x4e, 0x48, 0x00,
	0x52, 0x20, 0x61, 0x70, 0x70, 0x74, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x56,
	0x69, 0x6e, 0x12, 0x6d, 0x0a, 0x1f, 0x61, 0x70, 0x70, 0x74, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x77, 0x69, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x70, 0x70, 0x74, 0x77, 0x69, 0x6e, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0xfb, 0x01, 0x0a,
	0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x4f, 0x0a, 0x0c, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x01, 0x0a, 0x0c, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x44, 0x0a, 0x15,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x56, 0x45, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x02,
	0x18, 0x01, 0x22, 0x45, 0x0a, 0x1a, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x56, 0x45, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x56, 0x49, 0x4e,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x22, 0x44, 0x0a, 0x19,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x4b, 0x0a, 0x20, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x95, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x69, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x76, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x49, 0x6e, 0x4d, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x76, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x49, 0x6e, 0x4d, 0x73, 0x2a, 0x79, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10,
	0x03, 0x2a, 0x66, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x42, 0x1c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x69, 0x6d, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x62, 0x63, 0x61, 0x72, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vehicle_events_proto_rawDescOnce sync.Once
	file_vehicle_events_proto_rawDescData = file_vehicle_events_proto_rawDesc
)

func file_vehicle_events_proto_rawDescGZIP() []byte {
	file_vehicle_events_proto_rawDescOnce.Do(func() {
		file_vehicle_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_vehicle_events_proto_rawDescData)
	})
	return file_vehicle_events_proto_rawDescData
}

var file_vehicle_events_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_vehicle_events_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_vehicle_events_proto_goTypes = []interface{}{
	(ChargeProgram)(0),   // 0: proto.ChargeProgram
	(AttributeStatus)(0), // 1: proto.AttributeStatus
	(VehicleAttributeStatus_CombustionConsumptionUnit)(0),  // 2: proto.VehicleAttributeStatus.CombustionConsumptionUnit
	(VehicleAttributeStatus_ElectricityConsumptionUnit)(0), // 3: proto.VehicleAttributeStatus.ElectricityConsumptionUnit
	(VehicleAttributeStatus_GasConsumptionUnit)(0),         // 4: proto.VehicleAttributeStatus.GasConsumptionUnit
	(VehicleAttributeStatus_SpeedDistanceUnit)(0),          // 5: proto.VehicleAttributeStatus.SpeedDistanceUnit
	(VehicleAttributeStatus_SpeedUnit)(0),                  // 6: proto.VehicleAttributeStatus.SpeedUnit
	(VehicleAttributeStatus_DistanceUnit)(0),               // 7: proto.VehicleAttributeStatus.DistanceUnit
	(VehicleAttributeStatus_TemperatureUnit)(0),            // 8: proto.VehicleAttributeStatus.TemperatureUnit
	(VehicleAttributeStatus_PressureUnit)(0),               // 9: proto.VehicleAttributeStatus.PressureUnit
	(VehicleAttributeStatus_RatioUnit)(0),                  // 10: proto.VehicleAttributeStatus.RatioUnit
	(VehicleAttributeStatus_ClockHourUnit)(0),              // 11: proto.VehicleAttributeStatus.ClockHourUnit
	(*VEPUpdate)(nil),                        // 12: proto.VEPUpdate
	(*VehicleAttributeStatus)(nil),           // 13: proto.VehicleAttributeStatus
	(*ChargeProgramsValue)(nil),              // 14: proto.ChargeProgramsValue
	(*ChargeProgramParameters)(nil),          // 15: proto.ChargeProgramParameters
	(*WeeklyProfileValue)(nil),               // 16: proto.WeeklyProfileValue
	(*VVRTimeProfile)(nil),                   // 17: proto.VVRTimeProfile
	(*EcoHistogramValue)(nil),                // 18: proto.EcoHistogramValue
	(*EcoHistogramBin)(nil),                  // 19: proto.EcoHistogramBin
	(*SpeedAlertConfigurationValue)(nil),     // 20: proto.SpeedAlertConfigurationValue
	(*SpeedAlertConfiguration)(nil),          // 21: proto.SpeedAlertConfiguration
	(*WeeklySettingsHeadUnitValue)(nil),      // 22: proto.WeeklySettingsHeadUnitValue
	(*WeeklySetting)(nil),                    // 23: proto.WeeklySetting
	(*TemperaturePointsValue)(nil),           // 24: proto.TemperaturePointsValue
	(*TemperaturePoint)(nil),                 // 25: proto.TemperaturePoint
	(*WeekdayTariffValue)(nil),               // 26: proto.WeekdayTariffValue
	(*WeekendTariffValue)(nil),               // 27: proto.WeekendTariffValue
	(*Tariff)(nil),                           // 28: proto.Tariff
	(*StateOfChargeProfileValue)(nil),        // 29: proto.StateOfChargeProfileValue
	(*StateOfCharge)(nil),                    // 30: proto.StateOfCharge
	(*VEPUpdatesByVIN)(nil),                  // 31: proto.VEPUpdatesByVIN
	(*DebugMessage)(nil),                     // 32: proto.DebugMessage
	(*VehicleStatus)(nil),                    // 33: proto.VehicleStatus
	(*PushMessage)(nil),                      // 34: proto.PushMessage
	(*TrackingEvent)(nil),                    // 35: proto.TrackingEvent
	(*PayloadValue)(nil),                     // 36: proto.PayloadValue
	(*AcknowledgeVEPRequest)(nil),            // 37: proto.AcknowledgeVEPRequest
	(*AcknowledgeVEPUpdatesByVIN)(nil),       // 38: proto.AcknowledgeVEPUpdatesByVIN
	(*ConfigurePingInterval)(nil),            // 39: proto.ConfigurePingInterval
	(*AcknowledgeVehicleUpdated)(nil),        // 40: proto.AcknowledgeVehicleUpdated
	(*AcknowledgePreferredDealerChange)(nil), // 41: proto.AcknowledgePreferredDealerChange
	(*VehicleUpdated)(nil),                   // 42: proto.VehicleUpdated
	(*PreferredDealerChange)(nil),            // 43: proto.PreferredDealerChange
	nil,                                      // 44: proto.VEPUpdate.AttributesEntry
	nil,                                      // 45: proto.VEPUpdatesByVIN.UpdatesEntry
	nil,                                      // 46: proto.VehicleStatus.AttributesEntry
	nil,                                      // 47: proto.TrackingEvent.PayloadEntry
	(TimeProfileDay)(0),                      // 48: proto.TimeProfileDay
	(*ServiceStatusUpdatesByVIN)(nil),        // 49: proto.ServiceStatusUpdatesByVIN
	(*ServiceStatusUpdate)(nil),              // 50: proto.ServiceStatusUpdate
	(*UserDataUpdate)(nil),                   // 51: proto.UserDataUpdate
	(*UserVehicleAuthChangedUpdate)(nil),     // 52: proto.UserVehicleAuthChangedUpdate
	(*UserPictureUpdate)(nil),                // 53: proto.UserPictureUpdate
	(*UserPINUpdate)(nil),                    // 54: proto.UserPINUpdate
	(*AppTwinCommandStatusUpdatesByVIN)(nil), // 55: proto.AppTwinCommandStatusUpdatesByVIN
	(*AppTwinPendingCommandsRequest)(nil),    // 56: proto.AppTwinPendingCommandsRequest
	(*protos.AssignedVehicles)(nil),          // 57: proto.AssignedVehicles
}
var file_vehicle_events_proto_depIdxs = []int32{
	44, // 0: proto.VEPUpdate.attributes:type_name -> proto.VEPUpdate.AttributesEntry
	2,  // 1: proto.VehicleAttributeStatus.combustion_consumption_unit:type_name -> proto.VehicleAttributeStatus.CombustionConsumptionUnit
	4,  // 2: proto.VehicleAttributeStatus.gas_consumption_unit:type_name -> proto.VehicleAttributeStatus.GasConsumptionUnit
	3,  // 3: proto.VehicleAttributeStatus.electricity_consumption_unit:type_name -> proto.VehicleAttributeStatus.ElectricityConsumptionUnit
	5,  // 4: proto.VehicleAttributeStatus.speed_distance_unit:type_name -> proto.VehicleAttributeStatus.SpeedDistanceUnit
	6,  // 5: proto.VehicleAttributeStatus.speed_unit:type_name -> proto.VehicleAttributeStatus.SpeedUnit
	7,  // 6: proto.VehicleAttributeStatus.distance_unit:type_name -> proto.VehicleAttributeStatus.DistanceUnit
	8,  // 7: proto.VehicleAttributeStatus.temperature_unit:type_name -> proto.VehicleAttributeStatus.TemperatureUnit
	9,  // 8: proto.VehicleAttributeStatus.pressure_unit:type_name -> proto.VehicleAttributeStatus.PressureUnit
	10, // 9: proto.VehicleAttributeStatus.ratio_unit:type_name -> proto.VehicleAttributeStatus.RatioUnit
	11, // 10: proto.VehicleAttributeStatus.clock_hour_unit:type_name -> proto.VehicleAttributeStatus.ClockHourUnit
	24, // 11: proto.VehicleAttributeStatus.temperature_points_value:type_name -> proto.TemperaturePointsValue
	26, // 12: proto.VehicleAttributeStatus.weekday_tariff_value:type_name -> proto.WeekdayTariffValue
	27, // 13: proto.VehicleAttributeStatus.weekend_tariff_value:type_name -> proto.WeekendTariffValue
	29, // 14: proto.VehicleAttributeStatus.state_of_charge_profile_value:type_name -> proto.StateOfChargeProfileValue
	22, // 15: proto.VehicleAttributeStatus.weekly_settings_head_unit_value:type_name -> proto.WeeklySettingsHeadUnitValue
	20, // 16: proto.VehicleAttributeStatus.speed_alert_configuration_value:type_name -> proto.SpeedAlertConfigurationValue
	18, // 17: proto.VehicleAttributeStatus.eco_histogram_value:type_name -> proto.EcoHistogramValue
	16, // 18: proto.VehicleAttributeStatus.weekly_profile_value:type_name -> proto.WeeklyProfileValue
	14, // 19: proto.VehicleAttributeStatus.charge_programs_value:type_name -> proto.ChargeProgramsValue
	15, // 20: proto.ChargeProgramsValue.charge_program_parameters:type_name -> proto.ChargeProgramParameters
	0,  // 21: proto.ChargeProgramParameters.charge_program:type_name -> proto.ChargeProgram
	17, // 22: proto.WeeklyProfileValue.time_profiles:type_name -> proto.VVRTimeProfile
	48, // 23: proto.VVRTimeProfile.days:type_name -> proto.TimeProfileDay
	19, // 24: proto.EcoHistogramValue.eco_histogram_bins:type_name -> proto.EcoHistogramBin
	21, // 25: proto.SpeedAlertConfigurationValue.speed_alert_configurations:type_name -> proto.SpeedAlertConfiguration
	23, // 26: proto.WeeklySettingsHeadUnitValue.weekly_settings:type_name -> proto.WeeklySetting
	25, // 27: proto.TemperaturePointsValue.temperature_points:type_name -> proto.TemperaturePoint
	28, // 28: proto.WeekdayTariffValue.tariffs:type_name -> proto.Tariff
	28, // 29: proto.WeekendTariffValue.tariffs:type_name -> proto.Tariff
	30, // 30: proto.StateOfChargeProfileValue.states_of_charge:type_name -> proto.StateOfCharge
	45, // 31: proto.VEPUpdatesByVIN.updates:type_name -> proto.VEPUpdatesByVIN.UpdatesEntry
	46, // 32: proto.VehicleStatus.attributes:type_name -> proto.VehicleStatus.AttributesEntry
	12, // 33: proto.PushMessage.vepUpdate:type_name -> proto.VEPUpdate
	31, // 34: proto.PushMessage.vepUpdates:type_name -> proto.VEPUpdatesByVIN
	32, // 35: proto.PushMessage.debugMessage:type_name -> proto.DebugMessage
	49, // 36: proto.PushMessage.service_status_updates:type_name -> proto.ServiceStatusUpdatesByVIN
	50, // 37: proto.PushMessage.service_status_update:type_name -> proto.ServiceStatusUpdate
	51, // 38: proto.PushMessage.user_data_update:type_name -> proto.UserDataUpdate
	52, // 39: proto.PushMessage.user_vehicle_auth_changed_update:type_name -> proto.UserVehicleAuthChangedUpdate
	53, // 40: proto.PushMessage.user_picture_update:type_name -> proto.UserPictureUpdate
	54, // 41: proto.PushMessage.user_pin_update:type_name -> proto.UserPINUpdate
	42, // 42: proto.PushMessage.vehicle_updated:type_name -> proto.VehicleUpdated
	43, // 43: proto.PushMessage.preferred_dealer_change:type_name -> proto.PreferredDealerChange
	55, // 44: proto.PushMessage.apptwin_command_status_updates_by_vin:type_name -> proto.AppTwinCommandStatusUpdatesByVIN
	56, // 45: proto.PushMessage.apptwin_pending_command_request:type_name -> proto.AppTwinPendingCommandsRequest
	57, // 46: proto.PushMessage.assigned_vehicles:type_name -> proto.AssignedVehicles
	47, // 47: proto.TrackingEvent.payload:type_name -> proto.TrackingEvent.PayloadEntry
	13, // 48: proto.VEPUpdate.AttributesEntry.value:type_name -> proto.VehicleAttributeStatus
	12, // 49: proto.VEPUpdatesByVIN.UpdatesEntry.value:type_name -> proto.VEPUpdate
	13, // 50: proto.VehicleStatus.AttributesEntry.value:type_name -> proto.VehicleAttributeStatus
	36, // 51: proto.TrackingEvent.PayloadEntry.value:type_name -> proto.PayloadValue
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_vehicle_events_proto_init() }
func file_vehicle_events_proto_init() {
	if File_vehicle_events_proto != nil {
		return
	}
	file_service_activation_proto_init()
	file_user_events_proto_init()
	file_vehicle_commands_proto_init()
	file_vehicleapi_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vehicle_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VEPUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleAttributeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeProgramsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeProgramParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeeklyProfileValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VVRTimeProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcoHistogramValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcoHistogramBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedAlertConfigurationValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedAlertConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeeklySettingsHeadUnitValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeeklySetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperaturePointsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperaturePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeekdayTariffValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeekendTariffValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tariff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateOfChargeProfileValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateOfCharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VEPUpdatesByVIN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeVEPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeVEPUpdatesByVIN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurePingInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeVehicleUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgePreferredDealerChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_events_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreferredDealerChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vehicle_events_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*VehicleAttributeStatus_CombustionConsumptionUnit_)(nil),
		(*VehicleAttributeStatus_GasConsumptionUnit_)(nil),
		(*VehicleAttributeStatus_ElectricityConsumptionUnit_)(nil),
		(*VehicleAttributeStatus_SpeedDistanceUnit_)(nil),
		(*VehicleAttributeStatus_SpeedUnit_)(nil),
		(*VehicleAttributeStatus_DistanceUnit_)(nil),
		(*VehicleAttributeStatus_TemperatureUnit_)(nil),
		(*VehicleAttributeStatus_PressureUnit_)(nil),
		(*VehicleAttributeStatus_RatioUnit_)(nil),
		(*VehicleAttributeStatus_ClockHourUnit_)(nil),
		(*VehicleAttributeStatus_IntValue)(nil),
		(*VehicleAttributeStatus_BoolValue)(nil),
		(*VehicleAttributeStatus_StringValue)(nil),
		(*VehicleAttributeStatus_DoubleValue)(nil),
		(*VehicleAttributeStatus_NilValue)(nil),
		(*VehicleAttributeStatus_UnsupportedValue)(nil),
		(*VehicleAttributeStatus_TemperaturePointsValue)(nil),
		(*VehicleAttributeStatus_WeekdayTariffValue)(nil),
		(*VehicleAttributeStatus_WeekendTariffValue)(nil),
		(*VehicleAttributeStatus_StateOfChargeProfileValue)(nil),
		(*VehicleAttributeStatus_WeeklySettingsHeadUnitValue)(nil),
		(*VehicleAttributeStatus_SpeedAlertConfigurationValue)(nil),
		(*VehicleAttributeStatus_EcoHistogramValue)(nil),
		(*VehicleAttributeStatus_WeeklyProfileValue)(nil),
		(*VehicleAttributeStatus_ChargeProgramsValue)(nil),
	}
	file_vehicle_events_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*PushMessage_VepUpdate)(nil),
		(*PushMessage_VepUpdates)(nil),
		(*PushMessage_DebugMessage)(nil),
		(*PushMessage_ServiceStatusUpdates)(nil),
		(*PushMessage_ServiceStatusUpdate)(nil),
		(*PushMessage_UserDataUpdate)(nil),
		(*PushMessage_UserVehicleAuthChangedUpdate)(nil),
		(*PushMessage_UserPictureUpdate)(nil),
		(*PushMessage_UserPinUpdate)(nil),
		(*PushMessage_VehicleUpdated)(nil),
		(*PushMessage_PreferredDealerChange)(nil),
		(*PushMessage_ApptwinCommandStatusUpdatesByVin)(nil),
		(*PushMessage_ApptwinPendingCommandRequest)(nil),
		(*PushMessage_AssignedVehicles)(nil),
	}
	file_vehicle_events_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*PayloadValue_StringValue)(nil),
		(*PayloadValue_IntValue)(nil),
		(*PayloadValue_BoolValue)(nil),
		(*PayloadValue_DoubleValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vehicle_events_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vehicle_events_proto_goTypes,
		DependencyIndexes: file_vehicle_events_proto_depIdxs,
		EnumInfos:         file_vehicle_events_proto_enumTypes,
		MessageInfos:      file_vehicle_events_proto_msgTypes,
	}.Build()
	File_vehicle_events_proto = out.File
	file_vehicle_events_proto_rawDesc = nil
	file_vehicle_events_proto_goTypes = nil
	file_vehicle_events_proto_depIdxs = nil
}
