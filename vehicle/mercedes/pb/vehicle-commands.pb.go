// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: vehicle-commands.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Door int32

const (
	// the lowercase versions are for json (de)serialization purposes only. The upper case version should be the preferred
	// enum values to be used in code.
	// These definitions need to come before upper case versions
	Door_unknown_door   Door = 0
	Door_frontleft      Door = 1
	Door_frontright     Door = 2
	Door_rearleft       Door = 3
	Door_rearright      Door = 4
	Door_trunk          Door = 5
	Door_fuelflap       Door = 6
	Door_chargeflap     Door = 7
	Door_chargecoupler  Door = 8
	Door_UNKNOWN_DOOR   Door = 0
	Door_FRONT_LEFT     Door = 1
	Door_FRONT_RIGHT    Door = 2
	Door_REAR_LEFT      Door = 3
	Door_REAR_RIGHT     Door = 4
	Door_TRUNK          Door = 5
	Door_FUEL_FLAP      Door = 6
	Door_CHARGE_FLAP    Door = 7
	Door_CHARGE_COUPLER Door = 8
)

// Enum value maps for Door.
var (
	Door_name = map[int32]string{
		0: "unknown_door",
		1: "frontleft",
		2: "frontright",
		3: "rearleft",
		4: "rearright",
		5: "trunk",
		6: "fuelflap",
		7: "chargeflap",
		8: "chargecoupler",
		// Duplicate value: 0: "UNKNOWN_DOOR",
		// Duplicate value: 1: "FRONT_LEFT",
		// Duplicate value: 2: "FRONT_RIGHT",
		// Duplicate value: 3: "REAR_LEFT",
		// Duplicate value: 4: "REAR_RIGHT",
		// Duplicate value: 5: "TRUNK",
		// Duplicate value: 6: "FUEL_FLAP",
		// Duplicate value: 7: "CHARGE_FLAP",
		// Duplicate value: 8: "CHARGE_COUPLER",
	}
	Door_value = map[string]int32{
		"unknown_door":   0,
		"frontleft":      1,
		"frontright":     2,
		"rearleft":       3,
		"rearright":      4,
		"trunk":          5,
		"fuelflap":       6,
		"chargeflap":     7,
		"chargecoupler":  8,
		"UNKNOWN_DOOR":   0,
		"FRONT_LEFT":     1,
		"FRONT_RIGHT":    2,
		"REAR_LEFT":      3,
		"REAR_RIGHT":     4,
		"TRUNK":          5,
		"FUEL_FLAP":      6,
		"CHARGE_FLAP":    7,
		"CHARGE_COUPLER": 8,
	}
)

func (x Door) Enum() *Door {
	p := new(Door)
	*p = x
	return p
}

func (x Door) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Door) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[0].Descriptor()
}

func (Door) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[0]
}

func (x Door) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Door.Descriptor instead.
func (Door) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{0}
}

type ZEVPreconditioningType int32

const (
	// the lowercase versions are for json parsing purposes only. The upper case version should be the preferred
	// enum values to be used in code.
	// These definitions need to come before upper case versions
	ZEVPreconditioningType_unknown_zev_preconditioning_command_type ZEVPreconditioningType = 0
	ZEVPreconditioningType_immediate                                ZEVPreconditioningType = 1
	ZEVPreconditioningType_departure                                ZEVPreconditioningType = 2
	ZEVPreconditioningType_now                                      ZEVPreconditioningType = 3
	ZEVPreconditioningType_departureWeekly                          ZEVPreconditioningType = 4
	// the uppercase versions are here to have exported values
	// The given preconditioning command type is unknown
	ZEVPreconditioningType_UNKNOWN_ZEV_PRECONDITIONING_COMMAND_TYPE ZEVPreconditioningType = 0
	// starts immediate preconditioning
	ZEVPreconditioningType_IMMEDIATE ZEVPreconditioningType = 1
	// starts preconditioning at departure time (requires a departure time to be provided in ZEVPreconditioningStart)
	ZEVPreconditioningType_DEPARTURE ZEVPreconditioningType = 2
	// start right away (departure time is ignored)
	ZEVPreconditioningType_NOW ZEVPreconditioningType = 3
	// starts preconditioning for a configured weekly profile (does NOT require a departure time to be provided)
	ZEVPreconditioningType_DEPARTURE_WEEKLY ZEVPreconditioningType = 4
)

// Enum value maps for ZEVPreconditioningType.
var (
	ZEVPreconditioningType_name = map[int32]string{
		0: "unknown_zev_preconditioning_command_type",
		1: "immediate",
		2: "departure",
		3: "now",
		4: "departureWeekly",
		// Duplicate value: 0: "UNKNOWN_ZEV_PRECONDITIONING_COMMAND_TYPE",
		// Duplicate value: 1: "IMMEDIATE",
		// Duplicate value: 2: "DEPARTURE",
		// Duplicate value: 3: "NOW",
		// Duplicate value: 4: "DEPARTURE_WEEKLY",
	}
	ZEVPreconditioningType_value = map[string]int32{
		"unknown_zev_preconditioning_command_type": 0,
		"immediate":       1,
		"departure":       2,
		"now":             3,
		"departureWeekly": 4,
		"UNKNOWN_ZEV_PRECONDITIONING_COMMAND_TYPE": 0,
		"IMMEDIATE":        1,
		"DEPARTURE":        2,
		"NOW":              3,
		"DEPARTURE_WEEKLY": 4,
	}
)

func (x ZEVPreconditioningType) Enum() *ZEVPreconditioningType {
	p := new(ZEVPreconditioningType)
	*p = x
	return p
}

func (x ZEVPreconditioningType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZEVPreconditioningType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[1].Descriptor()
}

func (ZEVPreconditioningType) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[1]
}

func (x ZEVPreconditioningType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZEVPreconditioningType.Descriptor instead.
func (ZEVPreconditioningType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{1}
}

type TimeProfileDay int32

const (
	// the short versions are for json (en)coding purposes only. The upper case version should be the preferred
	// enum values to be used in code.
	// These definitions need to come before upper case versions
	TimeProfileDay_Mo        TimeProfileDay = 0
	TimeProfileDay_Tu        TimeProfileDay = 1
	TimeProfileDay_We        TimeProfileDay = 2
	TimeProfileDay_Th        TimeProfileDay = 3
	TimeProfileDay_Fr        TimeProfileDay = 4
	TimeProfileDay_Sa        TimeProfileDay = 5
	TimeProfileDay_Su        TimeProfileDay = 6
	TimeProfileDay_MONDAY    TimeProfileDay = 0
	TimeProfileDay_TUESDAY   TimeProfileDay = 1
	TimeProfileDay_WEDNESDAY TimeProfileDay = 2
	TimeProfileDay_THURSDAY  TimeProfileDay = 3
	TimeProfileDay_FRIDAY    TimeProfileDay = 4
	TimeProfileDay_SATURDAY  TimeProfileDay = 5
	TimeProfileDay_SUNDAY    TimeProfileDay = 6
)

// Enum value maps for TimeProfileDay.
var (
	TimeProfileDay_name = map[int32]string{
		0: "Mo",
		1: "Tu",
		2: "We",
		3: "Th",
		4: "Fr",
		5: "Sa",
		6: "Su",
		// Duplicate value: 0: "MONDAY",
		// Duplicate value: 1: "TUESDAY",
		// Duplicate value: 2: "WEDNESDAY",
		// Duplicate value: 3: "THURSDAY",
		// Duplicate value: 4: "FRIDAY",
		// Duplicate value: 5: "SATURDAY",
		// Duplicate value: 6: "SUNDAY",
	}
	TimeProfileDay_value = map[string]int32{
		"Mo":        0,
		"Tu":        1,
		"We":        2,
		"Th":        3,
		"Fr":        4,
		"Sa":        5,
		"Su":        6,
		"MONDAY":    0,
		"TUESDAY":   1,
		"WEDNESDAY": 2,
		"THURSDAY":  3,
		"FRIDAY":    4,
		"SATURDAY":  5,
		"SUNDAY":    6,
	}
)

func (x TimeProfileDay) Enum() *TimeProfileDay {
	p := new(TimeProfileDay)
	*p = x
	return p
}

func (x TimeProfileDay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeProfileDay) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[2].Descriptor()
}

func (TimeProfileDay) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[2]
}

func (x TimeProfileDay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeProfileDay.Descriptor instead.
func (TimeProfileDay) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{2}
}

type DriveType int32

const (
	DriveType_UNKNOWN_DRIVE_TYPE DriveType = 0
	DriveType_PICK_UP            DriveType = 1
	DriveType_DROP_OFF           DriveType = 2
)

// Enum value maps for DriveType.
var (
	DriveType_name = map[int32]string{
		0: "UNKNOWN_DRIVE_TYPE",
		1: "PICK_UP",
		2: "DROP_OFF",
	}
	DriveType_value = map[string]int32{
		"UNKNOWN_DRIVE_TYPE": 0,
		"PICK_UP":            1,
		"DROP_OFF":           2,
	}
)

func (x DriveType) Enum() *DriveType {
	p := new(DriveType)
	*p = x
	return p
}

func (x DriveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriveType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[3].Descriptor()
}

func (DriveType) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[3]
}

func (x DriveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriveType.Descriptor instead.
func (DriveType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{3}
}

// Temporary backend switch field. Will be removed as soon as all commands are migrated to the VehicleAPI
// This field only needs to be set if the command is supported by both API from our backend. If this field is removed
// don't forget to set the field 36 to reserved.
type CommandRequest_Backend int32

const (
	CommandRequest_VVA        CommandRequest_Backend = 0 // default value
	CommandRequest_VehicleAPI CommandRequest_Backend = 1
)

// Enum value maps for CommandRequest_Backend.
var (
	CommandRequest_Backend_name = map[int32]string{
		0: "VVA",
		1: "VehicleAPI",
	}
	CommandRequest_Backend_value = map[string]int32{
		"VVA":        0,
		"VehicleAPI": 1,
	}
)

func (x CommandRequest_Backend) Enum() *CommandRequest_Backend {
	p := new(CommandRequest_Backend)
	*p = x
	return p
}

func (x CommandRequest_Backend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandRequest_Backend) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[4].Descriptor()
}

func (CommandRequest_Backend) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[4]
}

func (x CommandRequest_Backend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandRequest_Backend.Descriptor instead.
func (CommandRequest_Backend) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{1, 0}
}

type AuxheatConfigure_Selection int32

const (
	AuxheatConfigure_NO_SELECTION AuxheatConfigure_Selection = 0
	AuxheatConfigure_TIME_1       AuxheatConfigure_Selection = 1
	AuxheatConfigure_TIME_2       AuxheatConfigure_Selection = 2
	AuxheatConfigure_TIME_3       AuxheatConfigure_Selection = 3
)

// Enum value maps for AuxheatConfigure_Selection.
var (
	AuxheatConfigure_Selection_name = map[int32]string{
		0: "NO_SELECTION",
		1: "TIME_1",
		2: "TIME_2",
		3: "TIME_3",
	}
	AuxheatConfigure_Selection_value = map[string]int32{
		"NO_SELECTION": 0,
		"TIME_1":       1,
		"TIME_2":       2,
		"TIME_3":       3,
	}
)

func (x AuxheatConfigure_Selection) Enum() *AuxheatConfigure_Selection {
	p := new(AuxheatConfigure_Selection)
	*p = x
	return p
}

func (x AuxheatConfigure_Selection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuxheatConfigure_Selection) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[5].Descriptor()
}

func (AuxheatConfigure_Selection) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[5]
}

func (x AuxheatConfigure_Selection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuxheatConfigure_Selection.Descriptor instead.
func (AuxheatConfigure_Selection) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{6, 0}
}

type ZEVPreconditioningConfigure_DepartureTimeMode int32

const (
	ZEVPreconditioningConfigure_DISABLED         ZEVPreconditioningConfigure_DepartureTimeMode = 0
	ZEVPreconditioningConfigure_SINGLE_DEPARTURE ZEVPreconditioningConfigure_DepartureTimeMode = 1
	ZEVPreconditioningConfigure_WEEKLY_DEPARTURE ZEVPreconditioningConfigure_DepartureTimeMode = 2
)

// Enum value maps for ZEVPreconditioningConfigure_DepartureTimeMode.
var (
	ZEVPreconditioningConfigure_DepartureTimeMode_name = map[int32]string{
		0: "DISABLED",
		1: "SINGLE_DEPARTURE",
		2: "WEEKLY_DEPARTURE",
	}
	ZEVPreconditioningConfigure_DepartureTimeMode_value = map[string]int32{
		"DISABLED":         0,
		"SINGLE_DEPARTURE": 1,
		"WEEKLY_DEPARTURE": 2,
	}
)

func (x ZEVPreconditioningConfigure_DepartureTimeMode) Enum() *ZEVPreconditioningConfigure_DepartureTimeMode {
	p := new(ZEVPreconditioningConfigure_DepartureTimeMode)
	*p = x
	return p
}

func (x ZEVPreconditioningConfigure_DepartureTimeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZEVPreconditioningConfigure_DepartureTimeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[6].Descriptor()
}

func (ZEVPreconditioningConfigure_DepartureTimeMode) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[6]
}

func (x ZEVPreconditioningConfigure_DepartureTimeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZEVPreconditioningConfigure_DepartureTimeMode.Descriptor instead.
func (ZEVPreconditioningConfigure_DepartureTimeMode) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{23, 0}
}

type BatteryChargeProgramConfigure_ChargeProgram int32

const (
	BatteryChargeProgramConfigure_DEFAULT BatteryChargeProgramConfigure_ChargeProgram = 0
	BatteryChargeProgramConfigure_INSTANT BatteryChargeProgramConfigure_ChargeProgram = 1
)

// Enum value maps for BatteryChargeProgramConfigure_ChargeProgram.
var (
	BatteryChargeProgramConfigure_ChargeProgram_name = map[int32]string{
		0: "DEFAULT",
		1: "INSTANT",
	}
	BatteryChargeProgramConfigure_ChargeProgram_value = map[string]int32{
		"DEFAULT": 0,
		"INSTANT": 1,
	}
)

func (x BatteryChargeProgramConfigure_ChargeProgram) Enum() *BatteryChargeProgramConfigure_ChargeProgram {
	p := new(BatteryChargeProgramConfigure_ChargeProgram)
	*p = x
	return p
}

func (x BatteryChargeProgramConfigure_ChargeProgram) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryChargeProgramConfigure_ChargeProgram) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[7].Descriptor()
}

func (BatteryChargeProgramConfigure_ChargeProgram) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[7]
}

func (x BatteryChargeProgramConfigure_ChargeProgram) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatteryChargeProgramConfigure_ChargeProgram.Descriptor instead.
func (BatteryChargeProgramConfigure_ChargeProgram) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{25, 0}
}

type ChargeProgramConfigure_ChargeProgram int32

const (
	ChargeProgramConfigure_DEFAULT_CHARGE_PROGRAM ChargeProgramConfigure_ChargeProgram = 0
	// Instant charge program should not be used
	// INSTANT_CHARGE_PROGRAM = 1;
	ChargeProgramConfigure_HOME_CHARGE_PROGRAM ChargeProgramConfigure_ChargeProgram = 2
	ChargeProgramConfigure_WORK_CHARGE_PROGRAM ChargeProgramConfigure_ChargeProgram = 3
)

// Enum value maps for ChargeProgramConfigure_ChargeProgram.
var (
	ChargeProgramConfigure_ChargeProgram_name = map[int32]string{
		0: "DEFAULT_CHARGE_PROGRAM",
		2: "HOME_CHARGE_PROGRAM",
		3: "WORK_CHARGE_PROGRAM",
	}
	ChargeProgramConfigure_ChargeProgram_value = map[string]int32{
		"DEFAULT_CHARGE_PROGRAM": 0,
		"HOME_CHARGE_PROGRAM":    2,
		"WORK_CHARGE_PROGRAM":    3,
	}
)

func (x ChargeProgramConfigure_ChargeProgram) Enum() *ChargeProgramConfigure_ChargeProgram {
	p := new(ChargeProgramConfigure_ChargeProgram)
	*p = x
	return p
}

func (x ChargeProgramConfigure_ChargeProgram) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeProgramConfigure_ChargeProgram) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[8].Descriptor()
}

func (ChargeProgramConfigure_ChargeProgram) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[8]
}

func (x ChargeProgramConfigure_ChargeProgram) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeProgramConfigure_ChargeProgram.Descriptor instead.
func (ChargeProgramConfigure_ChargeProgram) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{27, 0}
}

type ChargeOptConfigure_Tariff_Rate int32

const (
	ChargeOptConfigure_Tariff_INVALID_PRICE ChargeOptConfigure_Tariff_Rate = 0
	ChargeOptConfigure_Tariff_LOW_PRICE     ChargeOptConfigure_Tariff_Rate = 33
	ChargeOptConfigure_Tariff_NORMAL_PRICE  ChargeOptConfigure_Tariff_Rate = 44
	ChargeOptConfigure_Tariff_HIGH_PRICE    ChargeOptConfigure_Tariff_Rate = 66
)

// Enum value maps for ChargeOptConfigure_Tariff_Rate.
var (
	ChargeOptConfigure_Tariff_Rate_name = map[int32]string{
		0:  "INVALID_PRICE",
		33: "LOW_PRICE",
		44: "NORMAL_PRICE",
		66: "HIGH_PRICE",
	}
	ChargeOptConfigure_Tariff_Rate_value = map[string]int32{
		"INVALID_PRICE": 0,
		"LOW_PRICE":     33,
		"NORMAL_PRICE":  44,
		"HIGH_PRICE":    66,
	}
)

func (x ChargeOptConfigure_Tariff_Rate) Enum() *ChargeOptConfigure_Tariff_Rate {
	p := new(ChargeOptConfigure_Tariff_Rate)
	*p = x
	return p
}

func (x ChargeOptConfigure_Tariff_Rate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeOptConfigure_Tariff_Rate) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[9].Descriptor()
}

func (ChargeOptConfigure_Tariff_Rate) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[9]
}

func (x ChargeOptConfigure_Tariff_Rate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeOptConfigure_Tariff_Rate.Descriptor instead.
func (ChargeOptConfigure_Tariff_Rate) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{29, 0, 0}
}

type TemperatureConfigure_TemperaturePoint_Zone int32

const (
	// the lowercase versions are for json parsing purposes only. The upper case version should be the preferred
	// enum values to be used in code.
	// These definitions need to come before upper case versions
	TemperatureConfigure_TemperaturePoint_unknown       TemperatureConfigure_TemperaturePoint_Zone = 0
	TemperatureConfigure_TemperaturePoint_frontLeft     TemperatureConfigure_TemperaturePoint_Zone = 1
	TemperatureConfigure_TemperaturePoint_frontRight    TemperatureConfigure_TemperaturePoint_Zone = 2
	TemperatureConfigure_TemperaturePoint_frontCenter   TemperatureConfigure_TemperaturePoint_Zone = 3
	TemperatureConfigure_TemperaturePoint_rearLeft      TemperatureConfigure_TemperaturePoint_Zone = 4
	TemperatureConfigure_TemperaturePoint_rearRight     TemperatureConfigure_TemperaturePoint_Zone = 5
	TemperatureConfigure_TemperaturePoint_rearCenter    TemperatureConfigure_TemperaturePoint_Zone = 6
	TemperatureConfigure_TemperaturePoint_rear2Left     TemperatureConfigure_TemperaturePoint_Zone = 7
	TemperatureConfigure_TemperaturePoint_rear2Right    TemperatureConfigure_TemperaturePoint_Zone = 8
	TemperatureConfigure_TemperaturePoint_rear2Center   TemperatureConfigure_TemperaturePoint_Zone = 9
	TemperatureConfigure_TemperaturePoint_UNKNOWN_ZONE  TemperatureConfigure_TemperaturePoint_Zone = 0
	TemperatureConfigure_TemperaturePoint_FRONT_LEFT    TemperatureConfigure_TemperaturePoint_Zone = 1
	TemperatureConfigure_TemperaturePoint_FRONT_RIGHT   TemperatureConfigure_TemperaturePoint_Zone = 2
	TemperatureConfigure_TemperaturePoint_FRONT_CENTER  TemperatureConfigure_TemperaturePoint_Zone = 3
	TemperatureConfigure_TemperaturePoint_REAR_LEFT     TemperatureConfigure_TemperaturePoint_Zone = 4
	TemperatureConfigure_TemperaturePoint_REAR_RIGHT    TemperatureConfigure_TemperaturePoint_Zone = 5
	TemperatureConfigure_TemperaturePoint_REAR_CENTER   TemperatureConfigure_TemperaturePoint_Zone = 6
	TemperatureConfigure_TemperaturePoint_REAR_2_LEFT   TemperatureConfigure_TemperaturePoint_Zone = 7
	TemperatureConfigure_TemperaturePoint_REAR_2_RIGHT  TemperatureConfigure_TemperaturePoint_Zone = 8
	TemperatureConfigure_TemperaturePoint_REAR_2_CENTER TemperatureConfigure_TemperaturePoint_Zone = 9
)

// Enum value maps for TemperatureConfigure_TemperaturePoint_Zone.
var (
	TemperatureConfigure_TemperaturePoint_Zone_name = map[int32]string{
		0: "unknown",
		1: "frontLeft",
		2: "frontRight",
		3: "frontCenter",
		4: "rearLeft",
		5: "rearRight",
		6: "rearCenter",
		7: "rear2Left",
		8: "rear2Right",
		9: "rear2Center",
		// Duplicate value: 0: "UNKNOWN_ZONE",
		// Duplicate value: 1: "FRONT_LEFT",
		// Duplicate value: 2: "FRONT_RIGHT",
		// Duplicate value: 3: "FRONT_CENTER",
		// Duplicate value: 4: "REAR_LEFT",
		// Duplicate value: 5: "REAR_RIGHT",
		// Duplicate value: 6: "REAR_CENTER",
		// Duplicate value: 7: "REAR_2_LEFT",
		// Duplicate value: 8: "REAR_2_RIGHT",
		// Duplicate value: 9: "REAR_2_CENTER",
	}
	TemperatureConfigure_TemperaturePoint_Zone_value = map[string]int32{
		"unknown":       0,
		"frontLeft":     1,
		"frontRight":    2,
		"frontCenter":   3,
		"rearLeft":      4,
		"rearRight":     5,
		"rearCenter":    6,
		"rear2Left":     7,
		"rear2Right":    8,
		"rear2Center":   9,
		"UNKNOWN_ZONE":  0,
		"FRONT_LEFT":    1,
		"FRONT_RIGHT":   2,
		"FRONT_CENTER":  3,
		"REAR_LEFT":     4,
		"REAR_RIGHT":    5,
		"REAR_CENTER":   6,
		"REAR_2_LEFT":   7,
		"REAR_2_RIGHT":  8,
		"REAR_2_CENTER": 9,
	}
)

func (x TemperatureConfigure_TemperaturePoint_Zone) Enum() *TemperatureConfigure_TemperaturePoint_Zone {
	p := new(TemperatureConfigure_TemperaturePoint_Zone)
	*p = x
	return p
}

func (x TemperatureConfigure_TemperaturePoint_Zone) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemperatureConfigure_TemperaturePoint_Zone) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[10].Descriptor()
}

func (TemperatureConfigure_TemperaturePoint_Zone) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[10]
}

func (x TemperatureConfigure_TemperaturePoint_Zone) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemperatureConfigure_TemperaturePoint_Zone.Descriptor instead.
func (TemperatureConfigure_TemperaturePoint_Zone) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{32, 0, 0}
}

type WeekProfileConfigure_WeeklySetHU_Day int32

const (
	WeekProfileConfigure_WeeklySetHU_MONDAY    WeekProfileConfigure_WeeklySetHU_Day = 0
	WeekProfileConfigure_WeeklySetHU_TUESDAY   WeekProfileConfigure_WeeklySetHU_Day = 1
	WeekProfileConfigure_WeeklySetHU_WEDNESDAY WeekProfileConfigure_WeeklySetHU_Day = 2
	WeekProfileConfigure_WeeklySetHU_THURSDAY  WeekProfileConfigure_WeeklySetHU_Day = 3
	WeekProfileConfigure_WeeklySetHU_FRIDAY    WeekProfileConfigure_WeeklySetHU_Day = 4
	WeekProfileConfigure_WeeklySetHU_SATURDAY  WeekProfileConfigure_WeeklySetHU_Day = 5
	WeekProfileConfigure_WeeklySetHU_SUNDAY    WeekProfileConfigure_WeeklySetHU_Day = 6
)

// Enum value maps for WeekProfileConfigure_WeeklySetHU_Day.
var (
	WeekProfileConfigure_WeeklySetHU_Day_name = map[int32]string{
		0: "MONDAY",
		1: "TUESDAY",
		2: "WEDNESDAY",
		3: "THURSDAY",
		4: "FRIDAY",
		5: "SATURDAY",
		6: "SUNDAY",
	}
	WeekProfileConfigure_WeeklySetHU_Day_value = map[string]int32{
		"MONDAY":    0,
		"TUESDAY":   1,
		"WEDNESDAY": 2,
		"THURSDAY":  3,
		"FRIDAY":    4,
		"SATURDAY":  5,
		"SUNDAY":    6,
	}
)

func (x WeekProfileConfigure_WeeklySetHU_Day) Enum() *WeekProfileConfigure_WeeklySetHU_Day {
	p := new(WeekProfileConfigure_WeeklySetHU_Day)
	*p = x
	return p
}

func (x WeekProfileConfigure_WeeklySetHU_Day) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeekProfileConfigure_WeeklySetHU_Day) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[11].Descriptor()
}

func (WeekProfileConfigure_WeeklySetHU_Day) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[11]
}

func (x WeekProfileConfigure_WeeklySetHU_Day) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeekProfileConfigure_WeeklySetHU_Day.Descriptor instead.
func (WeekProfileConfigure_WeeklySetHU_Day) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{33, 0, 0}
}

// Only allowed for RAMSES
type SigPosStart_HornType int32

const (
	SigPosStart_HORN_OFF         SigPosStart_HornType = 0
	SigPosStart_HORN_LOW_VOLUME  SigPosStart_HornType = 1
	SigPosStart_HORN_HIGH_VOLUME SigPosStart_HornType = 2
)

// Enum value maps for SigPosStart_HornType.
var (
	SigPosStart_HornType_name = map[int32]string{
		0: "HORN_OFF",
		1: "HORN_LOW_VOLUME",
		2: "HORN_HIGH_VOLUME",
	}
	SigPosStart_HornType_value = map[string]int32{
		"HORN_OFF":         0,
		"HORN_LOW_VOLUME":  1,
		"HORN_HIGH_VOLUME": 2,
	}
)

func (x SigPosStart_HornType) Enum() *SigPosStart_HornType {
	p := new(SigPosStart_HornType)
	*p = x
	return p
}

func (x SigPosStart_HornType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigPosStart_HornType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[12].Descriptor()
}

func (SigPosStart_HornType) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[12]
}

func (x SigPosStart_HornType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigPosStart_HornType.Descriptor instead.
func (SigPosStart_HornType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{36, 0}
}

// Only allowed for RAMSES
type SigPosStart_LightType int32

const (
	SigPosStart_LIGHT_OFF         SigPosStart_LightType = 0
	SigPosStart_DIPPED_HEAD_LIGHT SigPosStart_LightType = 1
	SigPosStart_WARNING_LIGHT     SigPosStart_LightType = 2
)

// Enum value maps for SigPosStart_LightType.
var (
	SigPosStart_LightType_name = map[int32]string{
		0: "LIGHT_OFF",
		1: "DIPPED_HEAD_LIGHT",
		2: "WARNING_LIGHT",
	}
	SigPosStart_LightType_value = map[string]int32{
		"LIGHT_OFF":         0,
		"DIPPED_HEAD_LIGHT": 1,
		"WARNING_LIGHT":     2,
	}
)

func (x SigPosStart_LightType) Enum() *SigPosStart_LightType {
	p := new(SigPosStart_LightType)
	*p = x
	return p
}

func (x SigPosStart_LightType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigPosStart_LightType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[13].Descriptor()
}

func (SigPosStart_LightType) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[13]
}

func (x SigPosStart_LightType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigPosStart_LightType.Descriptor instead.
func (SigPosStart_LightType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{36, 1}
}

type SigPosStart_SigposType int32

const (
	SigPosStart_LIGHT_ONLY     SigPosStart_SigposType = 0
	SigPosStart_HORN_ONLY      SigPosStart_SigposType = 1 // Only allowed for RAMSES
	SigPosStart_LIGHT_AND_HORN SigPosStart_SigposType = 2 // Only allowed for RAMSES
	SigPosStart_PANIC_ALARM    SigPosStart_SigposType = 3 // Only allowed for HERMES
)

// Enum value maps for SigPosStart_SigposType.
var (
	SigPosStart_SigposType_name = map[int32]string{
		0: "LIGHT_ONLY",
		1: "HORN_ONLY",
		2: "LIGHT_AND_HORN",
		3: "PANIC_ALARM",
	}
	SigPosStart_SigposType_value = map[string]int32{
		"LIGHT_ONLY":     0,
		"HORN_ONLY":      1,
		"LIGHT_AND_HORN": 2,
		"PANIC_ALARM":    3,
	}
)

func (x SigPosStart_SigposType) Enum() *SigPosStart_SigposType {
	p := new(SigPosStart_SigposType)
	*p = x
	return p
}

func (x SigPosStart_SigposType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigPosStart_SigposType) Descriptor() protoreflect.EnumDescriptor {
	return file_vehicle_commands_proto_enumTypes[14].Descriptor()
}

func (SigPosStart_SigposType) Type() protoreflect.EnumType {
	return &file_vehicle_commands_proto_enumTypes[14]
}

func (x SigPosStart_SigposType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigPosStart_SigposType.Descriptor instead.
func (SigPosStart_SigposType) EnumDescriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{36, 2}
}

// Acknowledge the CommandRequest reached the apptwin actor
// Websocket <- Apptwin
type AcknowledgeCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *AcknowledgeCommandRequest) Reset() {
	*x = AcknowledgeCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeCommandRequest) ProtoMessage() {}

func (x *AcknowledgeCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeCommandRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeCommandRequest) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{0}
}

func (x *AcknowledgeCommandRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// After the command was issued at VVA based on this
// command request the call will get a command request
// correlation message which matches the request id
// with the process id.
// Sending direction: App - BFF -> AppTwin
type CommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vin string `protobuf:"bytes,1,opt,name=vin,proto3" json:"vin,omitempty"`
	// Set this id to correlate a CommandStatus
	// with this command request.
	RequestId string                 `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Backend   CommandRequest_Backend `protobuf:"varint,36,opt,name=backend,proto3,enum=proto.CommandRequest_Backend" json:"backend,omitempty"`
	// Types that are assignable to Command:
	//
	//	*CommandRequest_AuxheatStart
	//	*CommandRequest_AuxheatStop
	//	*CommandRequest_AuxheatConfigure
	//	*CommandRequest_DoorsLock
	//	*CommandRequest_DoorsUnlock
	//	*CommandRequest_SunroofOpen
	//	*CommandRequest_SunroofClose
	//	*CommandRequest_SunroofLift
	//	*CommandRequest_SunroofMove
	//	*CommandRequest_WindowsOpen
	//	*CommandRequest_WindowsClose
	//	*CommandRequest_WindowsVentilate
	//	*CommandRequest_WindowsMove
	//	*CommandRequest_EngineStart
	//	*CommandRequest_EngineStop
	//	*CommandRequest_ZevPreconditioningStart
	//	*CommandRequest_ZevPreconditioningStop
	//	*CommandRequest_ZevPreconditionConfigure
	//	*CommandRequest_ZevPreconditionConfigureSeats
	//	*CommandRequest_SpeedalertStart
	//	*CommandRequest_SpeedalertStop
	//	*CommandRequest_BatteryChargeProgram
	//	*CommandRequest_BatteryMaxSoc
	//	*CommandRequest_ChargeProgramConfigure
	//	*CommandRequest_ChargeControlConfigure
	//	*CommandRequest_ChargeOptConfigure
	//	*CommandRequest_ChargeOptStart
	//	*CommandRequest_ChargeOptStop
	//	*CommandRequest_TemperatureConfigure
	//	*CommandRequest_WeekProfileConfigure
	//	*CommandRequest_WeekProfileConfigureV2
	//	*CommandRequest_SigposStart
	//	*CommandRequest_TheftalarmConfirmDamagedetection
	//	*CommandRequest_TheftalarmDeselectDamagedetection
	//	*CommandRequest_TheftalarmDeselectInterior
	//	*CommandRequest_TheftalarmDeselectTow
	//	*CommandRequest_TheftalarmSelectDamagedetection
	//	*CommandRequest_TheftalarmSelectInterior
	//	*CommandRequest_TheftalarmSelectTow
	//	*CommandRequest_TheftalarmStart
	//	*CommandRequest_TheftalarmStop
	//	*CommandRequest_AutomaticValetParkingActivate
	//	*CommandRequest_ChargeFlapUnlock
	//	*CommandRequest_ChargeCouplerUnlock
	//	*CommandRequest_DeactivateVehicleKeys
	//	*CommandRequest_ActivateVehicleKeys
	Command isCommandRequest_Command `protobuf_oneof:"command"`
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{1}
}

func (x *CommandRequest) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *CommandRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CommandRequest) GetBackend() CommandRequest_Backend {
	if x != nil {
		return x.Backend
	}
	return CommandRequest_VVA
}

func (m *CommandRequest) GetCommand() isCommandRequest_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *CommandRequest) GetAuxheatStart() *AuxheatStart {
	if x, ok := x.GetCommand().(*CommandRequest_AuxheatStart); ok {
		return x.AuxheatStart
	}
	return nil
}

func (x *CommandRequest) GetAuxheatStop() *AuxheatStop {
	if x, ok := x.GetCommand().(*CommandRequest_AuxheatStop); ok {
		return x.AuxheatStop
	}
	return nil
}

func (x *CommandRequest) GetAuxheatConfigure() *AuxheatConfigure {
	if x, ok := x.GetCommand().(*CommandRequest_AuxheatConfigure); ok {
		return x.AuxheatConfigure
	}
	return nil
}

func (x *CommandRequest) GetDoorsLock() *DoorsLock {
	if x, ok := x.GetCommand().(*CommandRequest_DoorsLock); ok {
		return x.DoorsLock
	}
	return nil
}

func (x *CommandRequest) GetDoorsUnlock() *DoorsUnlock {
	if x, ok := x.GetCommand().(*CommandRequest_DoorsUnlock); ok {
		return x.DoorsUnlock
	}
	return nil
}

func (x *CommandRequest) GetSunroofOpen() *SunroofOpen {
	if x, ok := x.GetCommand().(*CommandRequest_SunroofOpen); ok {
		return x.SunroofOpen
	}
	return nil
}

func (x *CommandRequest) GetSunroofClose() *SunroofClose {
	if x, ok := x.GetCommand().(*CommandRequest_SunroofClose); ok {
		return x.SunroofClose
	}
	return nil
}

func (x *CommandRequest) GetSunroofLift() *SunroofLift {
	if x, ok := x.GetCommand().(*CommandRequest_SunroofLift); ok {
		return x.SunroofLift
	}
	return nil
}

func (x *CommandRequest) GetSunroofMove() *SunroofMove {
	if x, ok := x.GetCommand().(*CommandRequest_SunroofMove); ok {
		return x.SunroofMove
	}
	return nil
}

func (x *CommandRequest) GetWindowsOpen() *WindowsOpen {
	if x, ok := x.GetCommand().(*CommandRequest_WindowsOpen); ok {
		return x.WindowsOpen
	}
	return nil
}

func (x *CommandRequest) GetWindowsClose() *WindowsClose {
	if x, ok := x.GetCommand().(*CommandRequest_WindowsClose); ok {
		return x.WindowsClose
	}
	return nil
}

func (x *CommandRequest) GetWindowsVentilate() *WindowsVentilate {
	if x, ok := x.GetCommand().(*CommandRequest_WindowsVentilate); ok {
		return x.WindowsVentilate
	}
	return nil
}

func (x *CommandRequest) GetWindowsMove() *WindowsMove {
	if x, ok := x.GetCommand().(*CommandRequest_WindowsMove); ok {
		return x.WindowsMove
	}
	return nil
}

func (x *CommandRequest) GetEngineStart() *EngineStart {
	if x, ok := x.GetCommand().(*CommandRequest_EngineStart); ok {
		return x.EngineStart
	}
	return nil
}

func (x *CommandRequest) GetEngineStop() *EngineStop {
	if x, ok := x.GetCommand().(*CommandRequest_EngineStop); ok {
		return x.EngineStop
	}
	return nil
}

func (x *CommandRequest) GetZevPreconditioningStart() *ZEVPreconditioningStart {
	if x, ok := x.GetCommand().(*CommandRequest_ZevPreconditioningStart); ok {
		return x.ZevPreconditioningStart
	}
	return nil
}

func (x *CommandRequest) GetZevPreconditioningStop() *ZEVPreconditioningStop {
	if x, ok := x.GetCommand().(*CommandRequest_ZevPreconditioningStop); ok {
		return x.ZevPreconditioningStop
	}
	return nil
}

func (x *CommandRequest) GetZevPreconditionConfigure() *ZEVPreconditioningConfigure {
	if x, ok := x.GetCommand().(*CommandRequest_ZevPreconditionConfigure); ok {
		return x.ZevPreconditionConfigure
	}
	return nil
}

func (x *CommandRequest) GetZevPreconditionConfigureSeats() *ZEVPreconditioningConfigureSeats {
	if x, ok := x.GetCommand().(*CommandRequest_ZevPreconditionConfigureSeats); ok {
		return x.ZevPreconditionConfigureSeats
	}
	return nil
}

func (x *CommandRequest) GetSpeedalertStart() *SpeedalertStart {
	if x, ok := x.GetCommand().(*CommandRequest_SpeedalertStart); ok {
		return x.SpeedalertStart
	}
	return nil
}

func (x *CommandRequest) GetSpeedalertStop() *SpeedalertStop {
	if x, ok := x.GetCommand().(*CommandRequest_SpeedalertStop); ok {
		return x.SpeedalertStop
	}
	return nil
}

func (x *CommandRequest) GetBatteryChargeProgram() *BatteryChargeProgramConfigure {
	if x, ok := x.GetCommand().(*CommandRequest_BatteryChargeProgram); ok {
		return x.BatteryChargeProgram
	}
	return nil
}

func (x *CommandRequest) GetBatteryMaxSoc() *BatteryMaxSocConfigure {
	if x, ok := x.GetCommand().(*CommandRequest_BatteryMaxSoc); ok {
		return x.BatteryMaxSoc
	}
	return nil
}

func (x *CommandRequest) GetChargeProgramConfigure() *ChargeProgramConfigure {
	if x, ok := x.GetCommand().(*CommandRequest_ChargeProgramConfigure); ok {
		return x.ChargeProgramConfigure
	}
	return nil
}

func (x *CommandRequest) GetChargeControlConfigure() *ChargeControlConfigure {
	if x, ok := x.GetCommand().(*CommandRequest_ChargeControlConfigure); ok {
		return x.ChargeControlConfigure
	}
	return nil
}

func (x *CommandRequest) GetChargeOptConfigure() *ChargeOptConfigure {
	if x, ok := x.GetCommand().(*CommandRequest_ChargeOptConfigure); ok {
		return x.ChargeOptConfigure
	}
	return nil
}

func (x *CommandRequest) GetChargeOptStart() *ChargeOptStart {
	if x, ok := x.GetCommand().(*CommandRequest_ChargeOptStart); ok {
		return x.ChargeOptStart
	}
	return nil
}

func (x *CommandRequest) GetChargeOptStop() *ChargeOptStop {
	if x, ok := x.GetCommand().(*CommandRequest_ChargeOptStop); ok {
		return x.ChargeOptStop
	}
	return nil
}

func (x *CommandRequest) GetTemperatureConfigure() *TemperatureConfigure {
	if x, ok := x.GetCommand().(*CommandRequest_TemperatureConfigure); ok {
		return x.TemperatureConfigure
	}
	return nil
}

func (x *CommandRequest) GetWeekProfileConfigure() *WeekProfileConfigure {
	if x, ok := x.GetCommand().(*CommandRequest_WeekProfileConfigure); ok {
		return x.WeekProfileConfigure
	}
	return nil
}

func (x *CommandRequest) GetWeekProfileConfigureV2() *WeekProfileConfigureV2 {
	if x, ok := x.GetCommand().(*CommandRequest_WeekProfileConfigureV2); ok {
		return x.WeekProfileConfigureV2
	}
	return nil
}

func (x *CommandRequest) GetSigposStart() *SigPosStart {
	if x, ok := x.GetCommand().(*CommandRequest_SigposStart); ok {
		return x.SigposStart
	}
	return nil
}

func (x *CommandRequest) GetTheftalarmConfirmDamagedetection() *TheftalarmConfirmDamagedetection {
	if x, ok := x.GetCommand().(*CommandRequest_TheftalarmConfirmDamagedetection); ok {
		return x.TheftalarmConfirmDamagedetection
	}
	return nil
}

func (x *CommandRequest) GetTheftalarmDeselectDamagedetection() *TheftalarmDeselectDamagedetection {
	if x, ok := x.GetCommand().(*CommandRequest_TheftalarmDeselectDamagedetection); ok {
		return x.TheftalarmDeselectDamagedetection
	}
	return nil
}

func (x *CommandRequest) GetTheftalarmDeselectInterior() *TheftalarmDeselectInterior {
	if x, ok := x.GetCommand().(*CommandRequest_TheftalarmDeselectInterior); ok {
		return x.TheftalarmDeselectInterior
	}
	return nil
}

func (x *CommandRequest) GetTheftalarmDeselectTow() *TheftalarmDeselectTow {
	if x, ok := x.GetCommand().(*CommandRequest_TheftalarmDeselectTow); ok {
		return x.TheftalarmDeselectTow
	}
	return nil
}

func (x *CommandRequest) GetTheftalarmSelectDamagedetection() *TheftalarmSelectDamagedetection {
	if x, ok := x.GetCommand().(*CommandRequest_TheftalarmSelectDamagedetection); ok {
		return x.TheftalarmSelectDamagedetection
	}
	return nil
}

func (x *CommandRequest) GetTheftalarmSelectInterior() *TheftalarmSelectInterior {
	if x, ok := x.GetCommand().(*CommandRequest_TheftalarmSelectInterior); ok {
		return x.TheftalarmSelectInterior
	}
	return nil
}

func (x *CommandRequest) GetTheftalarmSelectTow() *TheftalarmSelectTow {
	if x, ok := x.GetCommand().(*CommandRequest_TheftalarmSelectTow); ok {
		return x.TheftalarmSelectTow
	}
	return nil
}

func (x *CommandRequest) GetTheftalarmStart() *TheftalarmStart {
	if x, ok := x.GetCommand().(*CommandRequest_TheftalarmStart); ok {
		return x.TheftalarmStart
	}
	return nil
}

func (x *CommandRequest) GetTheftalarmStop() *TheftalarmStop {
	if x, ok := x.GetCommand().(*CommandRequest_TheftalarmStop); ok {
		return x.TheftalarmStop
	}
	return nil
}

func (x *CommandRequest) GetAutomaticValetParkingActivate() *AutomaticValetParkingActivate {
	if x, ok := x.GetCommand().(*CommandRequest_AutomaticValetParkingActivate); ok {
		return x.AutomaticValetParkingActivate
	}
	return nil
}

func (x *CommandRequest) GetChargeFlapUnlock() *ChargeFlapUnlock {
	if x, ok := x.GetCommand().(*CommandRequest_ChargeFlapUnlock); ok {
		return x.ChargeFlapUnlock
	}
	return nil
}

func (x *CommandRequest) GetChargeCouplerUnlock() *ChargeCouplerUnlock {
	if x, ok := x.GetCommand().(*CommandRequest_ChargeCouplerUnlock); ok {
		return x.ChargeCouplerUnlock
	}
	return nil
}

func (x *CommandRequest) GetDeactivateVehicleKeys() *DeactivateVehicleKeys {
	if x, ok := x.GetCommand().(*CommandRequest_DeactivateVehicleKeys); ok {
		return x.DeactivateVehicleKeys
	}
	return nil
}

func (x *CommandRequest) GetActivateVehicleKeys() *ActivateVehicleKeys {
	if x, ok := x.GetCommand().(*CommandRequest_ActivateVehicleKeys); ok {
		return x.ActivateVehicleKeys
	}
	return nil
}

type isCommandRequest_Command interface {
	isCommandRequest_Command()
}

type CommandRequest_AuxheatStart struct {
	AuxheatStart *AuxheatStart `protobuf:"bytes,2,opt,name=auxheat_start,json=auxheatStart,proto3,oneof"`
}

type CommandRequest_AuxheatStop struct {
	AuxheatStop *AuxheatStop `protobuf:"bytes,3,opt,name=auxheat_stop,json=auxheatStop,proto3,oneof"`
}

type CommandRequest_AuxheatConfigure struct {
	AuxheatConfigure *AuxheatConfigure `protobuf:"bytes,4,opt,name=auxheat_configure,json=auxheatConfigure,proto3,oneof"`
}

type CommandRequest_DoorsLock struct {
	DoorsLock *DoorsLock `protobuf:"bytes,5,opt,name=doors_lock,json=doorsLock,proto3,oneof"`
}

type CommandRequest_DoorsUnlock struct {
	DoorsUnlock *DoorsUnlock `protobuf:"bytes,6,opt,name=doors_unlock,json=doorsUnlock,proto3,oneof"`
}

type CommandRequest_SunroofOpen struct {
	SunroofOpen *SunroofOpen `protobuf:"bytes,9,opt,name=sunroof_open,json=sunroofOpen,proto3,oneof"`
}

type CommandRequest_SunroofClose struct {
	SunroofClose *SunroofClose `protobuf:"bytes,10,opt,name=sunroof_close,json=sunroofClose,proto3,oneof"`
}

type CommandRequest_SunroofLift struct {
	SunroofLift *SunroofLift `protobuf:"bytes,11,opt,name=sunroof_lift,json=sunroofLift,proto3,oneof"`
}

type CommandRequest_SunroofMove struct {
	SunroofMove *SunroofMove `protobuf:"bytes,47,opt,name=sunroof_move,json=sunroofMove,proto3,oneof"`
}

type CommandRequest_WindowsOpen struct {
	WindowsOpen *WindowsOpen `protobuf:"bytes,12,opt,name=windows_open,json=windowsOpen,proto3,oneof"`
}

type CommandRequest_WindowsClose struct {
	WindowsClose *WindowsClose `protobuf:"bytes,13,opt,name=windows_close,json=windowsClose,proto3,oneof"`
}

type CommandRequest_WindowsVentilate struct {
	WindowsVentilate *WindowsVentilate `protobuf:"bytes,43,opt,name=windows_ventilate,json=windowsVentilate,proto3,oneof"`
}

type CommandRequest_WindowsMove struct {
	WindowsMove *WindowsMove `protobuf:"bytes,44,opt,name=windows_move,json=windowsMove,proto3,oneof"`
}

type CommandRequest_EngineStart struct {
	EngineStart *EngineStart `protobuf:"bytes,19,opt,name=engine_start,json=engineStart,proto3,oneof"`
}

type CommandRequest_EngineStop struct {
	EngineStop *EngineStop `protobuf:"bytes,20,opt,name=engine_stop,json=engineStop,proto3,oneof"`
}

type CommandRequest_ZevPreconditioningStart struct {
	ZevPreconditioningStart *ZEVPreconditioningStart `protobuf:"bytes,21,opt,name=zev_preconditioning_start,json=zevPreconditioningStart,proto3,oneof"`
}

type CommandRequest_ZevPreconditioningStop struct {
	ZevPreconditioningStop *ZEVPreconditioningStop `protobuf:"bytes,22,opt,name=zev_preconditioning_stop,json=zevPreconditioningStop,proto3,oneof"`
}

type CommandRequest_ZevPreconditionConfigure struct {
	ZevPreconditionConfigure *ZEVPreconditioningConfigure `protobuf:"bytes,25,opt,name=zev_precondition_configure,json=zevPreconditionConfigure,proto3,oneof"`
}

type CommandRequest_ZevPreconditionConfigureSeats struct {
	ZevPreconditionConfigureSeats *ZEVPreconditioningConfigureSeats `protobuf:"bytes,26,opt,name=zev_precondition_configure_seats,json=zevPreconditionConfigureSeats,proto3,oneof"`
}

type CommandRequest_SpeedalertStart struct {
	SpeedalertStart *SpeedalertStart `protobuf:"bytes,23,opt,name=speedalert_start,json=speedalertStart,proto3,oneof"`
}

type CommandRequest_SpeedalertStop struct {
	SpeedalertStop *SpeedalertStop `protobuf:"bytes,24,opt,name=speedalert_stop,json=speedalertStop,proto3,oneof"`
}

type CommandRequest_BatteryChargeProgram struct {
	BatteryChargeProgram *BatteryChargeProgramConfigure `protobuf:"bytes,27,opt,name=battery_charge_program,json=batteryChargeProgram,proto3,oneof"`
}

type CommandRequest_BatteryMaxSoc struct {
	BatteryMaxSoc *BatteryMaxSocConfigure `protobuf:"bytes,28,opt,name=battery_max_soc,json=batteryMaxSoc,proto3,oneof"`
}

type CommandRequest_ChargeProgramConfigure struct {
	ChargeProgramConfigure *ChargeProgramConfigure `protobuf:"bytes,34,opt,name=charge_program_configure,json=chargeProgramConfigure,proto3,oneof"`
}

type CommandRequest_ChargeControlConfigure struct {
	ChargeControlConfigure *ChargeControlConfigure `protobuf:"bytes,40,opt,name=charge_control_configure,json=chargeControlConfigure,proto3,oneof"`
}

type CommandRequest_ChargeOptConfigure struct {
	ChargeOptConfigure *ChargeOptConfigure `protobuf:"bytes,29,opt,name=charge_opt_configure,json=chargeOptConfigure,proto3,oneof"`
}

type CommandRequest_ChargeOptStart struct {
	ChargeOptStart *ChargeOptStart `protobuf:"bytes,30,opt,name=charge_opt_start,json=chargeOptStart,proto3,oneof"`
}

type CommandRequest_ChargeOptStop struct {
	ChargeOptStop *ChargeOptStop `protobuf:"bytes,31,opt,name=charge_opt_stop,json=chargeOptStop,proto3,oneof"`
}

type CommandRequest_TemperatureConfigure struct {
	TemperatureConfigure *TemperatureConfigure `protobuf:"bytes,32,opt,name=temperature_configure,json=temperatureConfigure,proto3,oneof"`
}

type CommandRequest_WeekProfileConfigure struct {
	WeekProfileConfigure *WeekProfileConfigure `protobuf:"bytes,33,opt,name=week_profile_configure,json=weekProfileConfigure,proto3,oneof"`
}

type CommandRequest_WeekProfileConfigureV2 struct {
	WeekProfileConfigureV2 *WeekProfileConfigureV2 `protobuf:"bytes,41,opt,name=week_profile_configure_v2,json=weekProfileConfigureV2,proto3,oneof"`
}

type CommandRequest_SigposStart struct {
	SigposStart *SigPosStart `protobuf:"bytes,35,opt,name=sigpos_start,json=sigposStart,proto3,oneof"`
}

type CommandRequest_TheftalarmConfirmDamagedetection struct {
	TheftalarmConfirmDamagedetection *TheftalarmConfirmDamagedetection `protobuf:"bytes,8,opt,name=theftalarm_confirm_damagedetection,json=theftalarmConfirmDamagedetection,proto3,oneof"`
}

type CommandRequest_TheftalarmDeselectDamagedetection struct {
	TheftalarmDeselectDamagedetection *TheftalarmDeselectDamagedetection `protobuf:"bytes,14,opt,name=theftalarm_deselect_damagedetection,json=theftalarmDeselectDamagedetection,proto3,oneof"`
}

type CommandRequest_TheftalarmDeselectInterior struct {
	TheftalarmDeselectInterior *TheftalarmDeselectInterior `protobuf:"bytes,15,opt,name=theftalarm_deselect_interior,json=theftalarmDeselectInterior,proto3,oneof"`
}

type CommandRequest_TheftalarmDeselectTow struct {
	TheftalarmDeselectTow *TheftalarmDeselectTow `protobuf:"bytes,16,opt,name=theftalarm_deselect_tow,json=theftalarmDeselectTow,proto3,oneof"`
}

type CommandRequest_TheftalarmSelectDamagedetection struct {
	TheftalarmSelectDamagedetection *TheftalarmSelectDamagedetection `protobuf:"bytes,17,opt,name=theftalarm_select_damagedetection,json=theftalarmSelectDamagedetection,proto3,oneof"`
}

type CommandRequest_TheftalarmSelectInterior struct {
	TheftalarmSelectInterior *TheftalarmSelectInterior `protobuf:"bytes,18,opt,name=theftalarm_select_interior,json=theftalarmSelectInterior,proto3,oneof"`
}

type CommandRequest_TheftalarmSelectTow struct {
	TheftalarmSelectTow *TheftalarmSelectTow `protobuf:"bytes,37,opt,name=theftalarm_select_tow,json=theftalarmSelectTow,proto3,oneof"`
}

type CommandRequest_TheftalarmStart struct {
	TheftalarmStart *TheftalarmStart `protobuf:"bytes,38,opt,name=theftalarm_start,json=theftalarmStart,proto3,oneof"`
}

type CommandRequest_TheftalarmStop struct {
	TheftalarmStop *TheftalarmStop `protobuf:"bytes,39,opt,name=theftalarm_stop,json=theftalarmStop,proto3,oneof"`
}

type CommandRequest_AutomaticValetParkingActivate struct {
	AutomaticValetParkingActivate *AutomaticValetParkingActivate `protobuf:"bytes,42,opt,name=automatic_valet_parking_activate,json=automaticValetParkingActivate,proto3,oneof"`
}

type CommandRequest_ChargeFlapUnlock struct {
	ChargeFlapUnlock *ChargeFlapUnlock `protobuf:"bytes,45,opt,name=charge_flap_unlock,json=chargeFlapUnlock,proto3,oneof"`
}

type CommandRequest_ChargeCouplerUnlock struct {
	ChargeCouplerUnlock *ChargeCouplerUnlock `protobuf:"bytes,46,opt,name=charge_coupler_unlock,json=chargeCouplerUnlock,proto3,oneof"`
}

type CommandRequest_DeactivateVehicleKeys struct {
	DeactivateVehicleKeys *DeactivateVehicleKeys `protobuf:"bytes,48,opt,name=deactivate_vehicle_keys,json=deactivateVehicleKeys,proto3,oneof"`
}

type CommandRequest_ActivateVehicleKeys struct {
	ActivateVehicleKeys *ActivateVehicleKeys `protobuf:"bytes,49,opt,name=activate_vehicle_keys,json=activateVehicleKeys,proto3,oneof"`
}

func (*CommandRequest_AuxheatStart) isCommandRequest_Command() {}

func (*CommandRequest_AuxheatStop) isCommandRequest_Command() {}

func (*CommandRequest_AuxheatConfigure) isCommandRequest_Command() {}

func (*CommandRequest_DoorsLock) isCommandRequest_Command() {}

func (*CommandRequest_DoorsUnlock) isCommandRequest_Command() {}

func (*CommandRequest_SunroofOpen) isCommandRequest_Command() {}

func (*CommandRequest_SunroofClose) isCommandRequest_Command() {}

func (*CommandRequest_SunroofLift) isCommandRequest_Command() {}

func (*CommandRequest_SunroofMove) isCommandRequest_Command() {}

func (*CommandRequest_WindowsOpen) isCommandRequest_Command() {}

func (*CommandRequest_WindowsClose) isCommandRequest_Command() {}

func (*CommandRequest_WindowsVentilate) isCommandRequest_Command() {}

func (*CommandRequest_WindowsMove) isCommandRequest_Command() {}

func (*CommandRequest_EngineStart) isCommandRequest_Command() {}

func (*CommandRequest_EngineStop) isCommandRequest_Command() {}

func (*CommandRequest_ZevPreconditioningStart) isCommandRequest_Command() {}

func (*CommandRequest_ZevPreconditioningStop) isCommandRequest_Command() {}

func (*CommandRequest_ZevPreconditionConfigure) isCommandRequest_Command() {}

func (*CommandRequest_ZevPreconditionConfigureSeats) isCommandRequest_Command() {}

func (*CommandRequest_SpeedalertStart) isCommandRequest_Command() {}

func (*CommandRequest_SpeedalertStop) isCommandRequest_Command() {}

func (*CommandRequest_BatteryChargeProgram) isCommandRequest_Command() {}

func (*CommandRequest_BatteryMaxSoc) isCommandRequest_Command() {}

func (*CommandRequest_ChargeProgramConfigure) isCommandRequest_Command() {}

func (*CommandRequest_ChargeControlConfigure) isCommandRequest_Command() {}

func (*CommandRequest_ChargeOptConfigure) isCommandRequest_Command() {}

func (*CommandRequest_ChargeOptStart) isCommandRequest_Command() {}

func (*CommandRequest_ChargeOptStop) isCommandRequest_Command() {}

func (*CommandRequest_TemperatureConfigure) isCommandRequest_Command() {}

func (*CommandRequest_WeekProfileConfigure) isCommandRequest_Command() {}

func (*CommandRequest_WeekProfileConfigureV2) isCommandRequest_Command() {}

func (*CommandRequest_SigposStart) isCommandRequest_Command() {}

func (*CommandRequest_TheftalarmConfirmDamagedetection) isCommandRequest_Command() {}

func (*CommandRequest_TheftalarmDeselectDamagedetection) isCommandRequest_Command() {}

func (*CommandRequest_TheftalarmDeselectInterior) isCommandRequest_Command() {}

func (*CommandRequest_TheftalarmDeselectTow) isCommandRequest_Command() {}

func (*CommandRequest_TheftalarmSelectDamagedetection) isCommandRequest_Command() {}

func (*CommandRequest_TheftalarmSelectInterior) isCommandRequest_Command() {}

func (*CommandRequest_TheftalarmSelectTow) isCommandRequest_Command() {}

func (*CommandRequest_TheftalarmStart) isCommandRequest_Command() {}

func (*CommandRequest_TheftalarmStop) isCommandRequest_Command() {}

func (*CommandRequest_AutomaticValetParkingActivate) isCommandRequest_Command() {}

func (*CommandRequest_ChargeFlapUnlock) isCommandRequest_Command() {}

func (*CommandRequest_ChargeCouplerUnlock) isCommandRequest_Command() {}

func (*CommandRequest_DeactivateVehicleKeys) isCommandRequest_Command() {}

func (*CommandRequest_ActivateVehicleKeys) isCommandRequest_Command() {}

type DeactivateVehicleKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin                    string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	ExpirationUnix         int64  `protobuf:"varint,2,opt,name=expiration_unix,json=expirationUnix,proto3" json:"expiration_unix,omitempty"`
	ExpirationSeconds      string `protobuf:"bytes,3,opt,name=expiration_seconds,json=expirationSeconds,proto3" json:"expiration_seconds,omitempty"`
	ExpirationMilliseconds string `protobuf:"bytes,4,opt,name=expiration_milliseconds,json=expirationMilliseconds,proto3" json:"expiration_milliseconds,omitempty"`
}

func (x *DeactivateVehicleKeys) Reset() {
	*x = DeactivateVehicleKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateVehicleKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateVehicleKeys) ProtoMessage() {}

func (x *DeactivateVehicleKeys) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateVehicleKeys.ProtoReflect.Descriptor instead.
func (*DeactivateVehicleKeys) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{2}
}

func (x *DeactivateVehicleKeys) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *DeactivateVehicleKeys) GetExpirationUnix() int64 {
	if x != nil {
		return x.ExpirationUnix
	}
	return 0
}

func (x *DeactivateVehicleKeys) GetExpirationSeconds() string {
	if x != nil {
		return x.ExpirationSeconds
	}
	return ""
}

func (x *DeactivateVehicleKeys) GetExpirationMilliseconds() string {
	if x != nil {
		return x.ExpirationMilliseconds
	}
	return ""
}

type ActivateVehicleKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin                    string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	ExpirationUnix         int64  `protobuf:"varint,2,opt,name=expiration_unix,json=expirationUnix,proto3" json:"expiration_unix,omitempty"`
	ExpirationSeconds      string `protobuf:"bytes,3,opt,name=expiration_seconds,json=expirationSeconds,proto3" json:"expiration_seconds,omitempty"`
	ExpirationMilliseconds string `protobuf:"bytes,4,opt,name=expiration_milliseconds,json=expirationMilliseconds,proto3" json:"expiration_milliseconds,omitempty"`
}

func (x *ActivateVehicleKeys) Reset() {
	*x = ActivateVehicleKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateVehicleKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateVehicleKeys) ProtoMessage() {}

func (x *ActivateVehicleKeys) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateVehicleKeys.ProtoReflect.Descriptor instead.
func (*ActivateVehicleKeys) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{3}
}

func (x *ActivateVehicleKeys) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *ActivateVehicleKeys) GetExpirationUnix() int64 {
	if x != nil {
		return x.ExpirationUnix
	}
	return 0
}

func (x *ActivateVehicleKeys) GetExpirationSeconds() string {
	if x != nil {
		return x.ExpirationSeconds
	}
	return ""
}

func (x *ActivateVehicleKeys) GetExpirationMilliseconds() string {
	if x != nil {
		return x.ExpirationMilliseconds
	}
	return ""
}

type AuxheatStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuxheatStart) Reset() {
	*x = AuxheatStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuxheatStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuxheatStart) ProtoMessage() {}

func (x *AuxheatStart) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuxheatStart.ProtoReflect.Descriptor instead.
func (*AuxheatStart) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{4}
}

type AuxheatStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuxheatStop) Reset() {
	*x = AuxheatStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuxheatStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuxheatStop) ProtoMessage() {}

func (x *AuxheatStop) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuxheatStop.ProtoReflect.Descriptor instead.
func (*AuxheatStop) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{5}
}

type AuxheatConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeSelection AuxheatConfigure_Selection `protobuf:"varint,1,opt,name=time_selection,json=auxheattimeselection,proto3,enum=proto.AuxheatConfigure_Selection" json:"time_selection,omitempty"`
	// Minutes from midnight.
	Time_1 int32 `protobuf:"varint,2,opt,name=time_1,json=auxheattime1,proto3" json:"time_1,omitempty"`
	// Minutes from midnight.
	Time_2 int32 `protobuf:"varint,3,opt,name=time_2,json=auxheattime2,proto3" json:"time_2,omitempty"`
	// Minutes from midnight.
	Time_3 int32 `protobuf:"varint,4,opt,name=time_3,json=auxheattime3,proto3" json:"time_3,omitempty"`
}

func (x *AuxheatConfigure) Reset() {
	*x = AuxheatConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuxheatConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuxheatConfigure) ProtoMessage() {}

func (x *AuxheatConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuxheatConfigure.ProtoReflect.Descriptor instead.
func (*AuxheatConfigure) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{6}
}

func (x *AuxheatConfigure) GetTimeSelection() AuxheatConfigure_Selection {
	if x != nil {
		return x.TimeSelection
	}
	return AuxheatConfigure_NO_SELECTION
}

func (x *AuxheatConfigure) GetTime_1() int32 {
	if x != nil {
		return x.Time_1
	}
	return 0
}

func (x *AuxheatConfigure) GetTime_2() int32 {
	if x != nil {
		return x.Time_2
	}
	return 0
}

func (x *AuxheatConfigure) GetTime_3() int32 {
	if x != nil {
		return x.Time_3
	}
	return 0
}

type DoorsLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// doors / flaps to unlock (only supported by TCU type RAMSES)
	// leave empty to target all doors
	Doors []Door `protobuf:"varint,1,rep,packed,name=doors,proto3,enum=proto.Door" json:"doors,omitempty"`
}

func (x *DoorsLock) Reset() {
	*x = DoorsLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorsLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorsLock) ProtoMessage() {}

func (x *DoorsLock) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorsLock.ProtoReflect.Descriptor instead.
func (*DoorsLock) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{7}
}

func (x *DoorsLock) GetDoors() []Door {
	if x != nil {
		return x.Doors
	}
	return nil
}

type DoorsUnlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	// doors / flaps to unlock (only supported by TCU type RAMSES)
	// leave empty to target all doors
	Doors []Door `protobuf:"varint,2,rep,packed,name=doors,proto3,enum=proto.Door" json:"doors,omitempty"`
}

func (x *DoorsUnlock) Reset() {
	*x = DoorsUnlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorsUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorsUnlock) ProtoMessage() {}

func (x *DoorsUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorsUnlock.ProtoReflect.Descriptor instead.
func (*DoorsUnlock) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{8}
}

func (x *DoorsUnlock) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *DoorsUnlock) GetDoors() []Door {
	if x != nil {
		return x.Doors
	}
	return nil
}

type EngineStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *EngineStart) Reset() {
	*x = EngineStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineStart) ProtoMessage() {}

func (x *EngineStart) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineStart.ProtoReflect.Descriptor instead.
func (*EngineStart) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{9}
}

func (x *EngineStart) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type EngineStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EngineStop) Reset() {
	*x = EngineStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineStop) ProtoMessage() {}

func (x *EngineStop) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineStop.ProtoReflect.Descriptor instead.
func (*EngineStop) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{10}
}

type SunroofOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *SunroofOpen) Reset() {
	*x = SunroofOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SunroofOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SunroofOpen) ProtoMessage() {}

func (x *SunroofOpen) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SunroofOpen.ProtoReflect.Descriptor instead.
func (*SunroofOpen) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{11}
}

func (x *SunroofOpen) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type SunroofClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SunroofClose) Reset() {
	*x = SunroofClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SunroofClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SunroofClose) ProtoMessage() {}

func (x *SunroofClose) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SunroofClose.ProtoReflect.Descriptor instead.
func (*SunroofClose) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{12}
}

type SunroofLift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *SunroofLift) Reset() {
	*x = SunroofLift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SunroofLift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SunroofLift) ProtoMessage() {}

func (x *SunroofLift) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SunroofLift.ProtoReflect.Descriptor instead.
func (*SunroofLift) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{13}
}

func (x *SunroofLift) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type SunroofMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin               string                 `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Sunroof           *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=sunroof,proto3" json:"sunroof,omitempty"`
	SunroofBlindFront *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=sunroof_blind_front,json=sunroofblindfront,proto3" json:"sunroof_blind_front,omitempty"`
	SunroofBlindRear  *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=sunroof_blind_rear,json=sunroofblindrear,proto3" json:"sunroof_blind_rear,omitempty"`
}

func (x *SunroofMove) Reset() {
	*x = SunroofMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SunroofMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SunroofMove) ProtoMessage() {}

func (x *SunroofMove) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SunroofMove.ProtoReflect.Descriptor instead.
func (*SunroofMove) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{14}
}

func (x *SunroofMove) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *SunroofMove) GetSunroof() *wrapperspb.Int32Value {
	if x != nil {
		return x.Sunroof
	}
	return nil
}

func (x *SunroofMove) GetSunroofBlindFront() *wrapperspb.Int32Value {
	if x != nil {
		return x.SunroofBlindFront
	}
	return nil
}

func (x *SunroofMove) GetSunroofBlindRear() *wrapperspb.Int32Value {
	if x != nil {
		return x.SunroofBlindRear
	}
	return nil
}

type WindowsOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *WindowsOpen) Reset() {
	*x = WindowsOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsOpen) ProtoMessage() {}

func (x *WindowsOpen) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsOpen.ProtoReflect.Descriptor instead.
func (*WindowsOpen) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{15}
}

func (x *WindowsOpen) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type WindowsClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WindowsClose) Reset() {
	*x = WindowsClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsClose) ProtoMessage() {}

func (x *WindowsClose) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsClose.ProtoReflect.Descriptor instead.
func (*WindowsClose) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{16}
}

type WindowsVentilate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *WindowsVentilate) Reset() {
	*x = WindowsVentilate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsVentilate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsVentilate) ProtoMessage() {}

func (x *WindowsVentilate) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsVentilate.ProtoReflect.Descriptor instead.
func (*WindowsVentilate) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{17}
}

func (x *WindowsVentilate) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type WindowsMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin            string                 `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	FrontLeft      *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=front_left,json=windowfrontleft,proto3" json:"front_left,omitempty"`
	FrontRight     *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=front_right,json=windowfrontright,proto3" json:"front_right,omitempty"`
	RearBlind      *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=rear_blind,json=windowrearblind,proto3" json:"rear_blind,omitempty"`
	RearLeft       *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=rear_left,json=windowrearleft,proto3" json:"rear_left,omitempty"`
	RearLeftBlind  *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=rear_left_blind,json=windowrearleftblind,proto3" json:"rear_left_blind,omitempty"`
	RearRight      *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=rear_right,json=windowrearright,proto3" json:"rear_right,omitempty"`
	RearRightBlind *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=rear_right_blind,json=windowrearrightblind,proto3" json:"rear_right_blind,omitempty"`
}

func (x *WindowsMove) Reset() {
	*x = WindowsMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsMove) ProtoMessage() {}

func (x *WindowsMove) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsMove.ProtoReflect.Descriptor instead.
func (*WindowsMove) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{18}
}

func (x *WindowsMove) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *WindowsMove) GetFrontLeft() *wrapperspb.Int32Value {
	if x != nil {
		return x.FrontLeft
	}
	return nil
}

func (x *WindowsMove) GetFrontRight() *wrapperspb.Int32Value {
	if x != nil {
		return x.FrontRight
	}
	return nil
}

func (x *WindowsMove) GetRearBlind() *wrapperspb.Int32Value {
	if x != nil {
		return x.RearBlind
	}
	return nil
}

func (x *WindowsMove) GetRearLeft() *wrapperspb.Int32Value {
	if x != nil {
		return x.RearLeft
	}
	return nil
}

func (x *WindowsMove) GetRearLeftBlind() *wrapperspb.Int32Value {
	if x != nil {
		return x.RearLeftBlind
	}
	return nil
}

func (x *WindowsMove) GetRearRight() *wrapperspb.Int32Value {
	if x != nil {
		return x.RearRight
	}
	return nil
}

func (x *WindowsMove) GetRearRightBlind() *wrapperspb.Int32Value {
	if x != nil {
		return x.RearRightBlind
	}
	return nil
}

type SpeedalertStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold    int32 `protobuf:"varint,1,opt,name=threshold,json=speedAlertThreshold,proto3" json:"threshold,omitempty"`
	AlertEndTime int64 `protobuf:"varint,2,opt,name=alert_end_time,json=speedAlertEndTime,proto3" json:"alert_end_time,omitempty"`
}

func (x *SpeedalertStart) Reset() {
	*x = SpeedalertStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedalertStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedalertStart) ProtoMessage() {}

func (x *SpeedalertStart) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedalertStart.ProtoReflect.Descriptor instead.
func (*SpeedalertStart) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{19}
}

func (x *SpeedalertStart) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *SpeedalertStart) GetAlertEndTime() int64 {
	if x != nil {
		return x.AlertEndTime
	}
	return 0
}

type SpeedalertStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpeedalertStop) Reset() {
	*x = SpeedalertStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedalertStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedalertStop) ProtoMessage() {}

func (x *SpeedalertStop) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedalertStop.ProtoReflect.Descriptor instead.
func (*SpeedalertStop) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{20}
}

type ZEVPreconditioningStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartureTime int32                  `protobuf:"varint,1,opt,name=departure_time,json=departuretime,proto3" json:"departure_time,omitempty"`
	Type          ZEVPreconditioningType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.ZEVPreconditioningType" json:"type,omitempty"`
}

func (x *ZEVPreconditioningStart) Reset() {
	*x = ZEVPreconditioningStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZEVPreconditioningStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZEVPreconditioningStart) ProtoMessage() {}

func (x *ZEVPreconditioningStart) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZEVPreconditioningStart.ProtoReflect.Descriptor instead.
func (*ZEVPreconditioningStart) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{21}
}

func (x *ZEVPreconditioningStart) GetDepartureTime() int32 {
	if x != nil {
		return x.DepartureTime
	}
	return 0
}

func (x *ZEVPreconditioningStart) GetType() ZEVPreconditioningType {
	if x != nil {
		return x.Type
	}
	return ZEVPreconditioningType_unknown_zev_preconditioning_command_type
}

type ZEVPreconditioningStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ZEVPreconditioningType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.ZEVPreconditioningType" json:"type,omitempty"`
}

func (x *ZEVPreconditioningStop) Reset() {
	*x = ZEVPreconditioningStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZEVPreconditioningStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZEVPreconditioningStop) ProtoMessage() {}

func (x *ZEVPreconditioningStop) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZEVPreconditioningStop.ProtoReflect.Descriptor instead.
func (*ZEVPreconditioningStop) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{22}
}

func (x *ZEVPreconditioningStop) GetType() ZEVPreconditioningType {
	if x != nil {
		return x.Type
	}
	return ZEVPreconditioningType_unknown_zev_preconditioning_command_type
}

// Configure preconditioning
type ZEVPreconditioningConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartureTimeMode ZEVPreconditioningConfigure_DepartureTimeMode `protobuf:"varint,1,opt,name=departure_time_mode,json=departureTimeMode,proto3,enum=proto.ZEVPreconditioningConfigure_DepartureTimeMode" json:"departure_time_mode,omitempty"`
	DepartureTime     int32                                         `protobuf:"varint,3,opt,name=departure_time,json=departuretime,proto3" json:"departure_time,omitempty"`
}

func (x *ZEVPreconditioningConfigure) Reset() {
	*x = ZEVPreconditioningConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZEVPreconditioningConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZEVPreconditioningConfigure) ProtoMessage() {}

func (x *ZEVPreconditioningConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZEVPreconditioningConfigure.ProtoReflect.Descriptor instead.
func (*ZEVPreconditioningConfigure) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{23}
}

func (x *ZEVPreconditioningConfigure) GetDepartureTimeMode() ZEVPreconditioningConfigure_DepartureTimeMode {
	if x != nil {
		return x.DepartureTimeMode
	}
	return ZEVPreconditioningConfigure_DISABLED
}

func (x *ZEVPreconditioningConfigure) GetDepartureTime() int32 {
	if x != nil {
		return x.DepartureTime
	}
	return 0
}

// Configure which seats should be preconditioned.
// Currently, the only available options are to precondition all seats or only the front-left seat
type ZEVPreconditioningConfigureSeats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontLeft  bool `protobuf:"varint,1,opt,name=front_left,json=precondSeatFrontLeft,proto3" json:"front_left,omitempty"`
	FrontRight bool `protobuf:"varint,2,opt,name=front_right,json=precondSeatFrontRight,proto3" json:"front_right,omitempty"`
	RearLeft   bool `protobuf:"varint,3,opt,name=rear_left,json=precondSeatRearLeft,proto3" json:"rear_left,omitempty"`
	RearRight  bool `protobuf:"varint,4,opt,name=rear_right,json=precondSeatRearRight,proto3" json:"rear_right,omitempty"`
}

func (x *ZEVPreconditioningConfigureSeats) Reset() {
	*x = ZEVPreconditioningConfigureSeats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZEVPreconditioningConfigureSeats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZEVPreconditioningConfigureSeats) ProtoMessage() {}

func (x *ZEVPreconditioningConfigureSeats) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZEVPreconditioningConfigureSeats.ProtoReflect.Descriptor instead.
func (*ZEVPreconditioningConfigureSeats) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{24}
}

func (x *ZEVPreconditioningConfigureSeats) GetFrontLeft() bool {
	if x != nil {
		return x.FrontLeft
	}
	return false
}

func (x *ZEVPreconditioningConfigureSeats) GetFrontRight() bool {
	if x != nil {
		return x.FrontRight
	}
	return false
}

func (x *ZEVPreconditioningConfigureSeats) GetRearLeft() bool {
	if x != nil {
		return x.RearLeft
	}
	return false
}

func (x *ZEVPreconditioningConfigureSeats) GetRearRight() bool {
	if x != nil {
		return x.RearRight
	}
	return false
}

// Configure the charge program
type BatteryChargeProgramConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeProgram BatteryChargeProgramConfigure_ChargeProgram `protobuf:"varint,1,opt,name=charge_program,json=chargeprogram,proto3,enum=proto.BatteryChargeProgramConfigure_ChargeProgram" json:"charge_program,omitempty"`
}

func (x *BatteryChargeProgramConfigure) Reset() {
	*x = BatteryChargeProgramConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryChargeProgramConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryChargeProgramConfigure) ProtoMessage() {}

func (x *BatteryChargeProgramConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryChargeProgramConfigure.ProtoReflect.Descriptor instead.
func (*BatteryChargeProgramConfigure) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{25}
}

func (x *BatteryChargeProgramConfigure) GetChargeProgram() BatteryChargeProgramConfigure_ChargeProgram {
	if x != nil {
		return x.ChargeProgram
	}
	return BatteryChargeProgramConfigure_DEFAULT
}

// Configure the maximum value for the state of charge of the HV battery
type BatteryMaxSocConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values need to be between 50 and 100 and divisible by ten
	MaxSoc int32 `protobuf:"varint,1,opt,name=max_soc,json=maxsoc,proto3" json:"max_soc,omitempty"`
}

func (x *BatteryMaxSocConfigure) Reset() {
	*x = BatteryMaxSocConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryMaxSocConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryMaxSocConfigure) ProtoMessage() {}

func (x *BatteryMaxSocConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryMaxSocConfigure.ProtoReflect.Descriptor instead.
func (*BatteryMaxSocConfigure) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{26}
}

func (x *BatteryMaxSocConfigure) GetMaxSoc() int32 {
	if x != nil {
		return x.MaxSoc
	}
	return 0
}

// Select the given charge program and enables the consumer to configure it.
type ChargeProgramConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeProgram ChargeProgramConfigure_ChargeProgram `protobuf:"varint,1,opt,name=charge_program,json=chargeprogram,proto3,enum=proto.ChargeProgramConfigure_ChargeProgram" json:"charge_program,omitempty"`
	// Values need to be between 50 and 100 and divisible by ten
	// Maximum value for the state of charge of the HV battery [in %].
	// Valid value range = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
	MaxSoc *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=max_soc,json=maxsoc,proto3" json:"max_soc,omitempty"`
	// unlock the plug after charging is finished
	// Denotes whether the charge cable should be unlocked automatically if the HV battery is fully charged resp. charged til Max. SoC value.
	// true - unlock automatically, false - do not unlock automatically
	// can only be used if chargeprogram is set to home or work. Otherwise it will be ignored.
	AutoUnlock *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=auto_unlock,json=autounlock,proto3" json:"auto_unlock,omitempty"`
	// automatically switch between home and work program, based on the location of the car
	// Denotes whether location based charging should be used.
	// true - use location based charging, false - do not use location based charging
	// can only be used if chargeprogram is set to home or work. Otherwise it will be ignored.
	LocationBasedCharging *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=location_based_charging,json=locationbasedcharging,proto3" json:"location_based_charging,omitempty"`
	// enable or disable clocktimer
	ClockTimer *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=clock_timer,json=clocktimer,proto3" json:"clock_timer,omitempty"`
	// enable or disable ecocharging
	EcoCharging *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=eco_charging,json=ecocharging,proto3" json:"eco_charging,omitempty"`
}

func (x *ChargeProgramConfigure) Reset() {
	*x = ChargeProgramConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeProgramConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeProgramConfigure) ProtoMessage() {}

func (x *ChargeProgramConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeProgramConfigure.ProtoReflect.Descriptor instead.
func (*ChargeProgramConfigure) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{27}
}

func (x *ChargeProgramConfigure) GetChargeProgram() ChargeProgramConfigure_ChargeProgram {
	if x != nil {
		return x.ChargeProgram
	}
	return ChargeProgramConfigure_DEFAULT_CHARGE_PROGRAM
}

func (x *ChargeProgramConfigure) GetMaxSoc() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxSoc
	}
	return nil
}

func (x *ChargeProgramConfigure) GetAutoUnlock() *wrapperspb.BoolValue {
	if x != nil {
		return x.AutoUnlock
	}
	return nil
}

func (x *ChargeProgramConfigure) GetLocationBasedCharging() *wrapperspb.BoolValue {
	if x != nil {
		return x.LocationBasedCharging
	}
	return nil
}

func (x *ChargeProgramConfigure) GetClockTimer() *wrapperspb.BoolValue {
	if x != nil {
		return x.ClockTimer
	}
	return nil
}

func (x *ChargeProgramConfigure) GetEcoCharging() *wrapperspb.BoolValue {
	if x != nil {
		return x.EcoCharging
	}
	return nil
}

// This is an experimental command
type ChargeControlConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enables/Disables bidrectional charging
	BiChargingEnabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=bi_charging_enabled,json=bidichargingenabled,proto3" json:"bi_charging_enabled,omitempty"`
	// Sets the charging power in kW with a resolution of 0.1 kW. The value has an offset of -100 kW. So
	// a value of 0 is equivalent to -100 kW.
	ChargingPower *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=charging_power,json=chargingpower,proto3" json:"charging_power,omitempty"`
	// must not be above max_soc
	MinSoc *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=min_soc,json=minsoc,proto3" json:"min_soc,omitempty"`
}

func (x *ChargeControlConfigure) Reset() {
	*x = ChargeControlConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeControlConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeControlConfigure) ProtoMessage() {}

func (x *ChargeControlConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeControlConfigure.ProtoReflect.Descriptor instead.
func (*ChargeControlConfigure) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{28}
}

func (x *ChargeControlConfigure) GetBiChargingEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.BiChargingEnabled
	}
	return nil
}

func (x *ChargeControlConfigure) GetChargingPower() *wrapperspb.FloatValue {
	if x != nil {
		return x.ChargingPower
	}
	return nil
}

func (x *ChargeControlConfigure) GetMinSoc() *wrapperspb.Int32Value {
	if x != nil {
		return x.MinSoc
	}
	return nil
}

// Provide functionality to initiate a charge optimization configuration
type ChargeOptConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeekdayTariff []*ChargeOptConfigure_Tariff `protobuf:"bytes,1,rep,name=weekday_tariff,json=weekdaytariff,proto3" json:"weekday_tariff,omitempty"`
	WeekendTariff []*ChargeOptConfigure_Tariff `protobuf:"bytes,2,rep,name=weekend_tariff,json=weekendtariff,proto3" json:"weekend_tariff,omitempty"`
}

func (x *ChargeOptConfigure) Reset() {
	*x = ChargeOptConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeOptConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeOptConfigure) ProtoMessage() {}

func (x *ChargeOptConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeOptConfigure.ProtoReflect.Descriptor instead.
func (*ChargeOptConfigure) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{29}
}

func (x *ChargeOptConfigure) GetWeekdayTariff() []*ChargeOptConfigure_Tariff {
	if x != nil {
		return x.WeekdayTariff
	}
	return nil
}

func (x *ChargeOptConfigure) GetWeekendTariff() []*ChargeOptConfigure_Tariff {
	if x != nil {
		return x.WeekendTariff
	}
	return nil
}

// Provide the functionality to start the charge optimization function in the vehicle
type ChargeOptStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChargeOptStart) Reset() {
	*x = ChargeOptStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeOptStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeOptStart) ProtoMessage() {}

func (x *ChargeOptStart) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeOptStart.ProtoReflect.Descriptor instead.
func (*ChargeOptStart) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{30}
}

// Provide the functionality to stop the charge optimization function in the vehicle
type ChargeOptStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChargeOptStop) Reset() {
	*x = ChargeOptStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeOptStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeOptStop) ProtoMessage() {}

func (x *ChargeOptStop) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeOptStop.ProtoReflect.Descriptor instead.
func (*ChargeOptStop) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{31}
}

// Set the temperature points of the vehicle
type TemperatureConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemperaturePoints []*TemperatureConfigure_TemperaturePoint `protobuf:"bytes,1,rep,name=temperature_points,json=temperaturePoints,proto3" json:"temperature_points,omitempty"`
}

func (x *TemperatureConfigure) Reset() {
	*x = TemperatureConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureConfigure) ProtoMessage() {}

func (x *TemperatureConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureConfigure.ProtoReflect.Descriptor instead.
func (*TemperatureConfigure) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{32}
}

func (x *TemperatureConfigure) GetTemperaturePoints() []*TemperatureConfigure_TemperaturePoint {
	if x != nil {
		return x.TemperaturePoints
	}
	return nil
}

// Set the weekprofile for the weekly departure time settings
type WeekProfileConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeeklySetHu []*WeekProfileConfigure_WeeklySetHU `protobuf:"bytes,1,rep,name=weekly_set_hu,json=weeklySetHU,proto3" json:"weekly_set_hu,omitempty"`
}

func (x *WeekProfileConfigure) Reset() {
	*x = WeekProfileConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeekProfileConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeekProfileConfigure) ProtoMessage() {}

func (x *WeekProfileConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeekProfileConfigure.ProtoReflect.Descriptor instead.
func (*WeekProfileConfigure) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{33}
}

func (x *WeekProfileConfigure) GetWeeklySetHu() []*WeekProfileConfigure_WeeklySetHU {
	if x != nil {
		return x.WeeklySetHu
	}
	return nil
}

// Set the week profile for the weekly departure time settings version 2
type WeekProfileConfigureV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * The whole list of timeProfiles must always be provided
	TimeProfiles []*TimeProfile `protobuf:"bytes,1,rep,name=time_profiles,json=timeprofiles,proto3" json:"time_profiles,omitempty"`
}

func (x *WeekProfileConfigureV2) Reset() {
	*x = WeekProfileConfigureV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeekProfileConfigureV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeekProfileConfigureV2) ProtoMessage() {}

func (x *WeekProfileConfigureV2) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeekProfileConfigureV2.ProtoReflect.Descriptor instead.
func (*WeekProfileConfigureV2) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{34}
}

func (x *WeekProfileConfigureV2) GetTimeProfiles() []*TimeProfile {
	if x != nil {
		return x.TimeProfiles
	}
	return nil
}

type TimeProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// => only if time profile entry is unchanged, do not provide attribute "id" if new profile entry shall be added
	//
	//	If a new time profile shall be added: do not provide the ID => ID will be set by MIC / vehicle
	Identifier *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=identifier,json=id,proto3" json:"identifier,omitempty"`
	// Hour after midnight range [0, 23]
	Hour *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=hour,proto3" json:"hour,omitempty"`
	// Minute after full hour range [0, 59]
	Minute *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=minute,json=min,proto3" json:"minute,omitempty"`
	// Days for which the above time should be applied
	Days []TimeProfileDay `protobuf:"varint,4,rep,packed,name=days,json=day,proto3,enum=proto.TimeProfileDay" json:"days,omitempty"`
	// Whether this profile entry is active or not
	Active *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=active,proto3" json:"active,omitempty"`
	// If a timeProfile is changed or added the respective applicationId must be provided by the SDK
	//
	//	11 = Internal Apps
	//	12 = External Apps
	ApplicationIdentifier int32 `protobuf:"varint,6,opt,name=application_identifier,json=applicationId,proto3" json:"application_identifier,omitempty"`
}

func (x *TimeProfile) Reset() {
	*x = TimeProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeProfile) ProtoMessage() {}

func (x *TimeProfile) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeProfile.ProtoReflect.Descriptor instead.
func (*TimeProfile) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{35}
}

func (x *TimeProfile) GetIdentifier() *wrapperspb.Int32Value {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *TimeProfile) GetHour() *wrapperspb.Int32Value {
	if x != nil {
		return x.Hour
	}
	return nil
}

func (x *TimeProfile) GetMinute() *wrapperspb.Int32Value {
	if x != nil {
		return x.Minute
	}
	return nil
}

func (x *TimeProfile) GetDays() []TimeProfileDay {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *TimeProfile) GetActive() *wrapperspb.BoolValue {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *TimeProfile) GetApplicationIdentifier() int32 {
	if x != nil {
		return x.ApplicationIdentifier
	}
	return 0
}

// Invoke the Remote Vehicle Finder for signalling the vehicle’s position with lights, horn or panic alarm.
type SigPosStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value needs to be between 0 and 30. The default is 0.
	// Only allowed for RAMSES
	HornRepeat int32                 `protobuf:"varint,1,opt,name=horn_repeat,json=hornRepeat,proto3" json:"horn_repeat,omitempty"`
	HornType   SigPosStart_HornType  `protobuf:"varint,2,opt,name=horn_type,json=hornType,proto3,enum=proto.SigPosStart_HornType" json:"horn_type,omitempty"`
	LightType  SigPosStart_LightType `protobuf:"varint,3,opt,name=light_type,json=lightType,proto3,enum=proto.SigPosStart_LightType" json:"light_type,omitempty"`
	// Value needs to be between 0 and 10. It indicates how long the light should be switched on.
	SigposDuration int32                  `protobuf:"varint,4,opt,name=sigpos_duration,json=sigposDuration,proto3" json:"sigpos_duration,omitempty"`
	SigposType     SigPosStart_SigposType `protobuf:"varint,5,opt,name=sigpos_type,json=sigposType,proto3,enum=proto.SigPosStart_SigposType" json:"sigpos_type,omitempty"`
}

func (x *SigPosStart) Reset() {
	*x = SigPosStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigPosStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigPosStart) ProtoMessage() {}

func (x *SigPosStart) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigPosStart.ProtoReflect.Descriptor instead.
func (*SigPosStart) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{36}
}

func (x *SigPosStart) GetHornRepeat() int32 {
	if x != nil {
		return x.HornRepeat
	}
	return 0
}

func (x *SigPosStart) GetHornType() SigPosStart_HornType {
	if x != nil {
		return x.HornType
	}
	return SigPosStart_HORN_OFF
}

func (x *SigPosStart) GetLightType() SigPosStart_LightType {
	if x != nil {
		return x.LightType
	}
	return SigPosStart_LIGHT_OFF
}

func (x *SigPosStart) GetSigposDuration() int32 {
	if x != nil {
		return x.SigposDuration
	}
	return 0
}

func (x *SigPosStart) GetSigposType() SigPosStart_SigposType {
	if x != nil {
		return x.SigposType
	}
	return SigPosStart_LIGHT_ONLY
}

// Confirm the detected parking bump
type TheftalarmConfirmDamagedetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TheftalarmConfirmDamagedetection) Reset() {
	*x = TheftalarmConfirmDamagedetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TheftalarmConfirmDamagedetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheftalarmConfirmDamagedetection) ProtoMessage() {}

func (x *TheftalarmConfirmDamagedetection) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheftalarmConfirmDamagedetection.ProtoReflect.Descriptor instead.
func (*TheftalarmConfirmDamagedetection) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{37}
}

// Provide the functionality to deselect the parking damage detection sensor
type TheftalarmDeselectDamagedetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TheftalarmDeselectDamagedetection) Reset() {
	*x = TheftalarmDeselectDamagedetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TheftalarmDeselectDamagedetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheftalarmDeselectDamagedetection) ProtoMessage() {}

func (x *TheftalarmDeselectDamagedetection) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheftalarmDeselectDamagedetection.ProtoReflect.Descriptor instead.
func (*TheftalarmDeselectDamagedetection) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{38}
}

// Provide the functionality to deselect the interior protection sensor
type TheftalarmDeselectInterior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TheftalarmDeselectInterior) Reset() {
	*x = TheftalarmDeselectInterior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TheftalarmDeselectInterior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheftalarmDeselectInterior) ProtoMessage() {}

func (x *TheftalarmDeselectInterior) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheftalarmDeselectInterior.ProtoReflect.Descriptor instead.
func (*TheftalarmDeselectInterior) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{39}
}

// Provide the functionality to deselect the tow protection sensor
type TheftalarmDeselectTow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TheftalarmDeselectTow) Reset() {
	*x = TheftalarmDeselectTow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TheftalarmDeselectTow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheftalarmDeselectTow) ProtoMessage() {}

func (x *TheftalarmDeselectTow) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheftalarmDeselectTow.ProtoReflect.Descriptor instead.
func (*TheftalarmDeselectTow) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{40}
}

// Provide the functionality to select the parking damage detection sensor
type TheftalarmSelectDamagedetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TheftalarmSelectDamagedetection) Reset() {
	*x = TheftalarmSelectDamagedetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TheftalarmSelectDamagedetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheftalarmSelectDamagedetection) ProtoMessage() {}

func (x *TheftalarmSelectDamagedetection) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheftalarmSelectDamagedetection.ProtoReflect.Descriptor instead.
func (*TheftalarmSelectDamagedetection) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{41}
}

// Provide the functionality to select the interior protection sensor
type TheftalarmSelectInterior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TheftalarmSelectInterior) Reset() {
	*x = TheftalarmSelectInterior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TheftalarmSelectInterior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheftalarmSelectInterior) ProtoMessage() {}

func (x *TheftalarmSelectInterior) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheftalarmSelectInterior.ProtoReflect.Descriptor instead.
func (*TheftalarmSelectInterior) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{42}
}

// Provide the functionality to select the tow protection sensor
type TheftalarmSelectTow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TheftalarmSelectTow) Reset() {
	*x = TheftalarmSelectTow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TheftalarmSelectTow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheftalarmSelectTow) ProtoMessage() {}

func (x *TheftalarmSelectTow) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheftalarmSelectTow.ProtoReflect.Descriptor instead.
func (*TheftalarmSelectTow) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{43}
}

// Provide the functionality to trigger an alarm that lasts for "alarm_duration" seconds
type TheftalarmStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify how many seconds the alarm should be switched on
	AlarmDurationInSeconds int32 `protobuf:"varint,1,opt,name=alarm_duration_in_seconds,json=alarmduration,proto3" json:"alarm_duration_in_seconds,omitempty"`
}

func (x *TheftalarmStart) Reset() {
	*x = TheftalarmStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TheftalarmStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheftalarmStart) ProtoMessage() {}

func (x *TheftalarmStart) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheftalarmStart.ProtoReflect.Descriptor instead.
func (*TheftalarmStart) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{44}
}

func (x *TheftalarmStart) GetAlarmDurationInSeconds() int32 {
	if x != nil {
		return x.AlarmDurationInSeconds
	}
	return 0
}

// Provide the functionality to deactivate an active/ongoing alarm
type TheftalarmStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TheftalarmStop) Reset() {
	*x = TheftalarmStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TheftalarmStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheftalarmStop) ProtoMessage() {}

func (x *TheftalarmStop) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheftalarmStop.ProtoReflect.Descriptor instead.
func (*TheftalarmStop) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{45}
}

type AutomaticValetParkingActivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId string    `protobuf:"bytes,1,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	DriveType DriveType `protobuf:"varint,2,opt,name=drive_type,json=driveType,proto3,enum=proto.DriveType" json:"drive_type,omitempty"`
}

func (x *AutomaticValetParkingActivate) Reset() {
	*x = AutomaticValetParkingActivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomaticValetParkingActivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomaticValetParkingActivate) ProtoMessage() {}

func (x *AutomaticValetParkingActivate) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomaticValetParkingActivate.ProtoReflect.Descriptor instead.
func (*AutomaticValetParkingActivate) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{46}
}

func (x *AutomaticValetParkingActivate) GetBookingId() string {
	if x != nil {
		return x.BookingId
	}
	return ""
}

func (x *AutomaticValetParkingActivate) GetDriveType() DriveType {
	if x != nil {
		return x.DriveType
	}
	return DriveType_UNKNOWN_DRIVE_TYPE
}

type ChargeFlapUnlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChargeFlapUnlock) Reset() {
	*x = ChargeFlapUnlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeFlapUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeFlapUnlock) ProtoMessage() {}

func (x *ChargeFlapUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeFlapUnlock.ProtoReflect.Descriptor instead.
func (*ChargeFlapUnlock) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{47}
}

type ChargeCouplerUnlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChargeCouplerUnlock) Reset() {
	*x = ChargeCouplerUnlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeCouplerUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeCouplerUnlock) ProtoMessage() {}

func (x *ChargeCouplerUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeCouplerUnlock.ProtoReflect.Descriptor instead.
func (*ChargeCouplerUnlock) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{48}
}

type ChargeOptConfigure_Tariff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate ChargeOptConfigure_Tariff_Rate `protobuf:"varint,1,opt,name=rate,proto3,enum=proto.ChargeOptConfigure_Tariff_Rate" json:"rate,omitempty"`
	// Time in seconds after 00:00
	Time int32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ChargeOptConfigure_Tariff) Reset() {
	*x = ChargeOptConfigure_Tariff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeOptConfigure_Tariff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeOptConfigure_Tariff) ProtoMessage() {}

func (x *ChargeOptConfigure_Tariff) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeOptConfigure_Tariff.ProtoReflect.Descriptor instead.
func (*ChargeOptConfigure_Tariff) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{29, 0}
}

func (x *ChargeOptConfigure_Tariff) GetRate() ChargeOptConfigure_Tariff_Rate {
	if x != nil {
		return x.Rate
	}
	return ChargeOptConfigure_Tariff_INVALID_PRICE
}

func (x *ChargeOptConfigure_Tariff) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type TemperatureConfigure_TemperaturePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zone                 TemperatureConfigure_TemperaturePoint_Zone `protobuf:"varint,1,opt,name=zone,proto3,enum=proto.TemperatureConfigure_TemperaturePoint_Zone" json:"zone,omitempty"`
	TemperatureInCelsius float64                                    `protobuf:"fixed64,3,opt,name=temperature_in_celsius,json=temp,proto3" json:"temperature_in_celsius,omitempty"`
}

func (x *TemperatureConfigure_TemperaturePoint) Reset() {
	*x = TemperatureConfigure_TemperaturePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureConfigure_TemperaturePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureConfigure_TemperaturePoint) ProtoMessage() {}

func (x *TemperatureConfigure_TemperaturePoint) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureConfigure_TemperaturePoint.ProtoReflect.Descriptor instead.
func (*TemperatureConfigure_TemperaturePoint) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{32, 0}
}

func (x *TemperatureConfigure_TemperaturePoint) GetZone() TemperatureConfigure_TemperaturePoint_Zone {
	if x != nil {
		return x.Zone
	}
	return TemperatureConfigure_TemperaturePoint_unknown
}

func (x *TemperatureConfigure_TemperaturePoint) GetTemperatureInCelsius() float64 {
	if x != nil {
		return x.TemperatureInCelsius
	}
	return 0
}

type WeekProfileConfigure_WeeklySetHU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day WeekProfileConfigure_WeeklySetHU_Day `protobuf:"varint,1,opt,name=day,proto3,enum=proto.WeekProfileConfigure_WeeklySetHU_Day" json:"day,omitempty"`
	// Time in minutes after 00:00
	Time int32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *WeekProfileConfigure_WeeklySetHU) Reset() {
	*x = WeekProfileConfigure_WeeklySetHU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vehicle_commands_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeekProfileConfigure_WeeklySetHU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeekProfileConfigure_WeeklySetHU) ProtoMessage() {}

func (x *WeekProfileConfigure_WeeklySetHU) ProtoReflect() protoreflect.Message {
	mi := &file_vehicle_commands_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeekProfileConfigure_WeeklySetHU.ProtoReflect.Descriptor instead.
func (*WeekProfileConfigure_WeeklySetHU) Descriptor() ([]byte, []int) {
	return file_vehicle_commands_proto_rawDescGZIP(), []int{33, 0}
}

func (x *WeekProfileConfigure_WeeklySetHU) GetDay() WeekProfileConfigure_WeeklySetHU_Day {
	if x != nil {
		return x.Day
	}
	return WeekProfileConfigure_WeeklySetHU_MONDAY
}

func (x *WeekProfileConfigure_WeeklySetHU) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

var File_vehicle_commands_proto protoreflect.FileDescriptor

var file_vehicle_commands_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x19, 0x41,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xbd, 0x1d, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x61, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x37, 0x0a, 0x0c, 0x61, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x75,
	0x78, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x46, 0x0a, 0x11, 0x61, 0x75, 0x78,
	0x68, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x78,
	0x68, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x61, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f,
	0x6f, 0x72, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x64, 0x6f, 0x6f, 0x72, 0x73,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x5f, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x37, 0x0a,
	0x0c, 0x73, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6e, 0x72,
	0x6f, 0x6f, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x6e, 0x72, 0x6f,
	0x6f, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x75, 0x6e, 0x72, 0x6f, 0x6f,
	0x66, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6c, 0x69,
	0x66, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x4c, 0x69, 0x66, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x4c, 0x69, 0x66, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x73,
	0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6e, 0x72, 0x6f, 0x6f,
	0x66, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66,
	0x4d, 0x6f, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00,
	0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x3a, 0x0a,
	0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x73, 0x5f, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x73, 0x56, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x56, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x6d, 0x6f, 0x76,
	0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x5c, 0x0a, 0x19, 0x7a, 0x65, 0x76,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x45, 0x56, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x17,
	0x7a, 0x65, 0x76, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x18, 0x7a, 0x65, 0x76, 0x5f, 0x70,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x5a, 0x45, 0x56, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x16, 0x7a, 0x65, 0x76, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x62, 0x0a, 0x1a, 0x7a, 0x65, 0x76, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a,
	0x45, 0x56, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x18, 0x7a, 0x65,
	0x76, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x72, 0x0a, 0x20, 0x7a, 0x65, 0x76, 0x5f, 0x70, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x45, 0x56, 0x50, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x1d, 0x7a, 0x65, 0x76,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x40, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x48,
	0x00, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x5c, 0x0a, 0x16, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x14, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x47, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x6f, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x6f, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x6f, 0x63, 0x12, 0x59, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x16, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x12, 0x59, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x16, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x4d,
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x41, 0x0a,
	0x10, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x48,
	0x00, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x12, 0x52, 0x0a, 0x15, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x14,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x16, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x65,
	0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x14, 0x77, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x5a, 0x0a, 0x19, 0x77, 0x65, 0x65,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x56, 0x32, 0x48, 0x00, 0x52, 0x16, 0x77,
	0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x56, 0x32, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x70, 0x6f, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x50, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x70, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x77,
	0x0a, 0x22, 0x74, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x74, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x23, 0x74, 0x68, 0x65, 0x66, 0x74,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x65,
	0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x21, 0x74, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x65, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x1c, 0x74, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x5f, 0x64, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x65, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1a,
	0x74, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x65, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x17, 0x74, 0x68,
	0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x6f, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x65,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x15, 0x74, 0x68, 0x65,
	0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x77, 0x12, 0x74, 0x0a, 0x21, 0x74, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1f, 0x74, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x1a, 0x74, 0x68, 0x65, 0x66,
	0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x18, 0x74, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x15, 0x74, 0x68, 0x65,
	0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x6f, 0x77, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x54, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x13, 0x74, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x77, 0x12, 0x43, 0x0a, 0x10, 0x74,
	0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68,
	0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x74, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x40, 0x0a, 0x0f, 0x74, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x6f, 0x70,
	0x48, 0x00, 0x52, 0x0e, 0x74, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x6f, 0x0a, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x76, 0x61, 0x6c, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x70, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x15,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65,
	0x72, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x13, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x72, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x56,
	0x0a, 0x17, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x48, 0x00, 0x52,
	0x15, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x48, 0x00, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x22, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x56, 0x41, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x50, 0x49, 0x10, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x2d, 0x0a, 0x12,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x0e, 0x0a, 0x0c, 0x41, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22,
	0x0d, 0x0a, 0x0b, 0x41, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x22, 0x80,
	0x02, 0x0a, 0x10, 0x41, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x61, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x31, 0x12, 0x1c, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x61, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x32,
	0x12, 0x1c, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x61, 0x75, 0x78, 0x68, 0x65, 0x61, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x22, 0x41,
	0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x33, 0x10,
	0x03, 0x22, 0x2e, 0x0a, 0x09, 0x44, 0x6f, 0x6f, 0x72, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x21,
	0x0a, 0x05, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x52, 0x05, 0x64, 0x6f, 0x6f, 0x72,
	0x73, 0x22, 0x42, 0x0a, 0x0b, 0x44, 0x6f, 0x6f, 0x72, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x69, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x52, 0x05,
	0x64, 0x6f, 0x6f, 0x72, 0x73, 0x22, 0x1f, 0x0a, 0x0b, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x0c, 0x0a, 0x0a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x6f, 0x70, 0x22, 0x1f, 0x0a, 0x0b, 0x53, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x0b, 0x53, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66,
	0x4c, 0x69, 0x66, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x0b, 0x53, 0x75, 0x6e, 0x72, 0x6f,
	0x6f, 0x66, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x75, 0x6e, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x4b, 0x0a, 0x13, 0x73, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64,
	0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x75, 0x6e, 0x72, 0x6f,
	0x6f, 0x66, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x12,
	0x73, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x72, 0x65, 0x61, 0x72, 0x22, 0x1f, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x0e, 0x0a, 0x0c, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x24, 0x0a, 0x10, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x73, 0x56, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x81,
	0x04, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e,
	0x12, 0x40, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x6c, 0x65,
	0x66, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x72, 0x5f, 0x62,
	0x6c, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x72,
	0x65, 0x61, 0x72, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x72,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x72, 0x65, 0x61, 0x72, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x72,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x72, 0x65, 0x61, 0x72, 0x6c, 0x65, 0x66, 0x74, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x72, 0x65, 0x61, 0x72,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x72, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x72, 0x65, 0x61, 0x72, 0x72, 0x69, 0x67, 0x68, 0x74, 0x62, 0x6c, 0x69,
	0x6e, 0x64, 0x22, 0x64, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x65, 0x64, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x70, 0x65, 0x65, 0x64, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x29, 0x0a,
	0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x22, 0x73, 0x0a, 0x17, 0x5a, 0x45,
	0x56, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x5a, 0x45, 0x56, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x4b, 0x0a, 0x16, 0x5a, 0x45, 0x56, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x5a, 0x45, 0x56, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf9, 0x01, 0x0a,
	0x1b, 0x5a, 0x45, 0x56, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x64, 0x0a, 0x13,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x5a, 0x45, 0x56, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x11, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x11, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x50,
	0x41, 0x52, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x22, 0xca, 0x01, 0x0a, 0x20, 0x5a, 0x45, 0x56,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x65, 0x61, 0x74, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x65, 0x61, 0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x61, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x22, 0x29, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x01, 0x22, 0x31, 0x0a,
	0x16, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x6f, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x73, 0x6f, 0x63,
	0x22, 0x8e, 0x04, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d,
	0x61, 0x78, 0x73, 0x6f, 0x63, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x52, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x64, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x63, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x63, 0x6f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x22, 0x5d, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10,
	0x03, 0x22, 0xe0, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x13,
	0x62, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x62, 0x69, 0x64, 0x69, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x73, 0x6f, 0x63, 0x22, 0xcc, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x77,
	0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2e, 0x54,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x74, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x12, 0x47, 0x0a, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x0d,
	0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x1a, 0xa3, 0x01,
	0x0a, 0x06, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10,
	0x21, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x10, 0x2c, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x10, 0x42, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x22, 0xcd, 0x04, 0x0a, 0x14, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12,
	0x5b, 0x0a, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0xd7, 0x03, 0x0a,
	0x10, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x45, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x5a, 0x6f,
	0x6e, 0x65, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x16, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x73, 0x69,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x22, 0xcf,
	0x02, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x4c, 0x65, 0x66,
	0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x66, 0x74,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10,
	0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10,
	0x06, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x72, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x07,
	0x12, 0x0e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x72, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x08,
	0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x72, 0x32, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10,
	0x09, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x5a, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x46,
	0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x43, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x52, 0x5f, 0x4c,
	0x45, 0x46, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x41, 0x52, 0x5f, 0x52, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x41, 0x52, 0x5f, 0x43, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x41, 0x52, 0x5f, 0x32,
	0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x52, 0x5f,
	0x32, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x41,
	0x52, 0x5f, 0x32, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x09, 0x1a, 0x02, 0x10, 0x01,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xa9, 0x02, 0x0a, 0x14, 0x57, 0x65, 0x65, 0x6b, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12,
	0x4b, 0x0a, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x75,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x48, 0x55, 0x52,
	0x0b, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x48, 0x55, 0x1a, 0xc3, 0x01, 0x0a,
	0x0b, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x48, 0x55, 0x12, 0x3d, 0x0a, 0x03,
	0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x65, 0x74,
	0x48, 0x55, 0x2e, 0x44, 0x61, 0x79, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x61, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x55, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41, 0x54, 0x55,
	0x52, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x4e, 0x44, 0x41, 0x59,
	0x10, 0x06, 0x22, 0x51, 0x0a, 0x16, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x56, 0x32, 0x12, 0x37, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44,
	0x61, 0x79, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x16, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xeb, 0x03, 0x0a, 0x0b, 0x53,
	0x69, 0x67, 0x50, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f,
	0x72, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x68, 0x6f, 0x72, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x68,
	0x6f, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x50, 0x6f, 0x73, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x2e, 0x48, 0x6f, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x67, 0x50, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x70, 0x6f, 0x73, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x69, 0x67,
	0x70, 0x6f, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x73,
	0x69, 0x67, 0x70, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x50, 0x6f, 0x73, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x70, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x70, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x08, 0x48,
	0x6f, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x52, 0x4e, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x4f, 0x52, 0x4e, 0x5f, 0x4c, 0x4f,
	0x57, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x4f,
	0x52, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x02,
	0x22, 0x44, 0x0a, 0x09, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x49, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x22, 0x50, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x70, 0x6f, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4f, 0x52, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x48, 0x4f, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x4e, 0x49, 0x43,
	0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x10, 0x03, 0x22, 0x22, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x66,
	0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x21,
	0x54, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x65, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x54, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44,
	0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x22,
	0x17, 0x0a, 0x15, 0x54, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x65, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x77, 0x22, 0x21, 0x0a, 0x1f, 0x54, 0x68, 0x65, 0x66,
	0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1a, 0x0a, 0x18, 0x54,
	0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x54, 0x68, 0x65, 0x66, 0x74,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x77, 0x22, 0x43,
	0x0a, 0x0f, 0x54, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x30, 0x0a, 0x19, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x10, 0x0a, 0x0e, 0x54, 0x68, 0x65, 0x66, 0x74, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x53, 0x74, 0x6f, 0x70, 0x22, 0x6f, 0x0a, 0x1d, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x56, 0x61, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x72, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x2a, 0xa5, 0x02, 0x0a, 0x04, 0x44, 0x6f, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x6f, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x6c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x67, 0x68, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x72, 0x6c, 0x65, 0x66, 0x74, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x72, 0x72, 0x69, 0x67, 0x68, 0x74, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x74, 0x72, 0x75, 0x6e,
	0x6b, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x66, 0x75, 0x65, 0x6c, 0x66, 0x6c, 0x61, 0x70, 0x10,
	0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x66, 0x6c, 0x61, 0x70, 0x10,
	0x07, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x63, 0x6f, 0x75, 0x70, 0x6c,
	0x65, 0x72, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x44, 0x4f, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f,
	0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x52, 0x5f,
	0x4c, 0x45, 0x46, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x41, 0x52, 0x5f, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x45, 0x4c, 0x5f, 0x46, 0x4c, 0x41, 0x50, 0x10, 0x06,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x50, 0x10,
	0x07, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x50,
	0x4c, 0x45, 0x52, 0x10, 0x08, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0xf1, 0x01, 0x0a, 0x16, 0x5a, 0x45,
	0x56, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x7a, 0x65, 0x76, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x10, 0x04, 0x12, 0x2c,
	0x0a, 0x28, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x5a, 0x45, 0x56, 0x5f, 0x50, 0x52,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x45, 0x50, 0x41, 0x52, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f,
	0x57, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x04, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0xa8, 0x01,
	0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x79,
	0x12, 0x06, 0x0a, 0x02, 0x4d, 0x6f, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x75, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x57, 0x65, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x68, 0x10, 0x03,
	0x12, 0x06, 0x0a, 0x02, 0x46, 0x72, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x61, 0x10, 0x05,
	0x12, 0x06, 0x0a, 0x02, 0x53, 0x75, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e, 0x44,
	0x41, 0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x55, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41,
	0x54, 0x55, 0x52, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x4e, 0x44,
	0x41, 0x59, 0x10, 0x06, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x3e, 0x0a, 0x09, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x42, 0x20, 0xd0, 0xe1, 0x1e, 0x01, 0x0a, 0x1a,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x69, 0x6d, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x62, 0x63, 0x61,
	0x72, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_vehicle_commands_proto_rawDescOnce sync.Once
	file_vehicle_commands_proto_rawDescData = file_vehicle_commands_proto_rawDesc
)

func file_vehicle_commands_proto_rawDescGZIP() []byte {
	file_vehicle_commands_proto_rawDescOnce.Do(func() {
		file_vehicle_commands_proto_rawDescData = protoimpl.X.CompressGZIP(file_vehicle_commands_proto_rawDescData)
	})
	return file_vehicle_commands_proto_rawDescData
}

var file_vehicle_commands_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_vehicle_commands_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_vehicle_commands_proto_goTypes = []interface{}{
	(Door)(0),                       // 0: proto.Door
	(ZEVPreconditioningType)(0),     // 1: proto.ZEVPreconditioningType
	(TimeProfileDay)(0),             // 2: proto.TimeProfileDay
	(DriveType)(0),                  // 3: proto.DriveType
	(CommandRequest_Backend)(0),     // 4: proto.CommandRequest.Backend
	(AuxheatConfigure_Selection)(0), // 5: proto.AuxheatConfigure.Selection
	(ZEVPreconditioningConfigure_DepartureTimeMode)(0), // 6: proto.ZEVPreconditioningConfigure.DepartureTimeMode
	(BatteryChargeProgramConfigure_ChargeProgram)(0),   // 7: proto.BatteryChargeProgramConfigure.ChargeProgram
	(ChargeProgramConfigure_ChargeProgram)(0),          // 8: proto.ChargeProgramConfigure.ChargeProgram
	(ChargeOptConfigure_Tariff_Rate)(0),                // 9: proto.ChargeOptConfigure.Tariff.Rate
	(TemperatureConfigure_TemperaturePoint_Zone)(0),    // 10: proto.TemperatureConfigure.TemperaturePoint.Zone
	(WeekProfileConfigure_WeeklySetHU_Day)(0),          // 11: proto.WeekProfileConfigure.WeeklySetHU.Day
	(SigPosStart_HornType)(0),                          // 12: proto.SigPosStart.HornType
	(SigPosStart_LightType)(0),                         // 13: proto.SigPosStart.LightType
	(SigPosStart_SigposType)(0),                        // 14: proto.SigPosStart.SigposType
	(*AcknowledgeCommandRequest)(nil),                  // 15: proto.AcknowledgeCommandRequest
	(*CommandRequest)(nil),                             // 16: proto.CommandRequest
	(*DeactivateVehicleKeys)(nil),                      // 17: proto.DeactivateVehicleKeys
	(*ActivateVehicleKeys)(nil),                        // 18: proto.ActivateVehicleKeys
	(*AuxheatStart)(nil),                               // 19: proto.AuxheatStart
	(*AuxheatStop)(nil),                                // 20: proto.AuxheatStop
	(*AuxheatConfigure)(nil),                           // 21: proto.AuxheatConfigure
	(*DoorsLock)(nil),                                  // 22: proto.DoorsLock
	(*DoorsUnlock)(nil),                                // 23: proto.DoorsUnlock
	(*EngineStart)(nil),                                // 24: proto.EngineStart
	(*EngineStop)(nil),                                 // 25: proto.EngineStop
	(*SunroofOpen)(nil),                                // 26: proto.SunroofOpen
	(*SunroofClose)(nil),                               // 27: proto.SunroofClose
	(*SunroofLift)(nil),                                // 28: proto.SunroofLift
	(*SunroofMove)(nil),                                // 29: proto.SunroofMove
	(*WindowsOpen)(nil),                                // 30: proto.WindowsOpen
	(*WindowsClose)(nil),                               // 31: proto.WindowsClose
	(*WindowsVentilate)(nil),                           // 32: proto.WindowsVentilate
	(*WindowsMove)(nil),                                // 33: proto.WindowsMove
	(*SpeedalertStart)(nil),                            // 34: proto.SpeedalertStart
	(*SpeedalertStop)(nil),                             // 35: proto.SpeedalertStop
	(*ZEVPreconditioningStart)(nil),                    // 36: proto.ZEVPreconditioningStart
	(*ZEVPreconditioningStop)(nil),                     // 37: proto.ZEVPreconditioningStop
	(*ZEVPreconditioningConfigure)(nil),                // 38: proto.ZEVPreconditioningConfigure
	(*ZEVPreconditioningConfigureSeats)(nil),           // 39: proto.ZEVPreconditioningConfigureSeats
	(*BatteryChargeProgramConfigure)(nil),              // 40: proto.BatteryChargeProgramConfigure
	(*BatteryMaxSocConfigure)(nil),                     // 41: proto.BatteryMaxSocConfigure
	(*ChargeProgramConfigure)(nil),                     // 42: proto.ChargeProgramConfigure
	(*ChargeControlConfigure)(nil),                     // 43: proto.ChargeControlConfigure
	(*ChargeOptConfigure)(nil),                         // 44: proto.ChargeOptConfigure
	(*ChargeOptStart)(nil),                             // 45: proto.ChargeOptStart
	(*ChargeOptStop)(nil),                              // 46: proto.ChargeOptStop
	(*TemperatureConfigure)(nil),                       // 47: proto.TemperatureConfigure
	(*WeekProfileConfigure)(nil),                       // 48: proto.WeekProfileConfigure
	(*WeekProfileConfigureV2)(nil),                     // 49: proto.WeekProfileConfigureV2
	(*TimeProfile)(nil),                                // 50: proto.TimeProfile
	(*SigPosStart)(nil),                                // 51: proto.SigPosStart
	(*TheftalarmConfirmDamagedetection)(nil),           // 52: proto.TheftalarmConfirmDamagedetection
	(*TheftalarmDeselectDamagedetection)(nil),          // 53: proto.TheftalarmDeselectDamagedetection
	(*TheftalarmDeselectInterior)(nil),                 // 54: proto.TheftalarmDeselectInterior
	(*TheftalarmDeselectTow)(nil),                      // 55: proto.TheftalarmDeselectTow
	(*TheftalarmSelectDamagedetection)(nil),            // 56: proto.TheftalarmSelectDamagedetection
	(*TheftalarmSelectInterior)(nil),                   // 57: proto.TheftalarmSelectInterior
	(*TheftalarmSelectTow)(nil),                        // 58: proto.TheftalarmSelectTow
	(*TheftalarmStart)(nil),                            // 59: proto.TheftalarmStart
	(*TheftalarmStop)(nil),                             // 60: proto.TheftalarmStop
	(*AutomaticValetParkingActivate)(nil),              // 61: proto.AutomaticValetParkingActivate
	(*ChargeFlapUnlock)(nil),                           // 62: proto.ChargeFlapUnlock
	(*ChargeCouplerUnlock)(nil),                        // 63: proto.ChargeCouplerUnlock
	(*ChargeOptConfigure_Tariff)(nil),                  // 64: proto.ChargeOptConfigure.Tariff
	(*TemperatureConfigure_TemperaturePoint)(nil),      // 65: proto.TemperatureConfigure.TemperaturePoint
	(*WeekProfileConfigure_WeeklySetHU)(nil),           // 66: proto.WeekProfileConfigure.WeeklySetHU
	(*wrapperspb.Int32Value)(nil),                      // 67: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),                       // 68: google.protobuf.BoolValue
	(*wrapperspb.FloatValue)(nil),                      // 69: google.protobuf.FloatValue
}
var file_vehicle_commands_proto_depIdxs = []int32{
	4,  // 0: proto.CommandRequest.backend:type_name -> proto.CommandRequest.Backend
	19, // 1: proto.CommandRequest.auxheat_start:type_name -> proto.AuxheatStart
	20, // 2: proto.CommandRequest.auxheat_stop:type_name -> proto.AuxheatStop
	21, // 3: proto.CommandRequest.auxheat_configure:type_name -> proto.AuxheatConfigure
	22, // 4: proto.CommandRequest.doors_lock:type_name -> proto.DoorsLock
	23, // 5: proto.CommandRequest.doors_unlock:type_name -> proto.DoorsUnlock
	26, // 6: proto.CommandRequest.sunroof_open:type_name -> proto.SunroofOpen
	27, // 7: proto.CommandRequest.sunroof_close:type_name -> proto.SunroofClose
	28, // 8: proto.CommandRequest.sunroof_lift:type_name -> proto.SunroofLift
	29, // 9: proto.CommandRequest.sunroof_move:type_name -> proto.SunroofMove
	30, // 10: proto.CommandRequest.windows_open:type_name -> proto.WindowsOpen
	31, // 11: proto.CommandRequest.windows_close:type_name -> proto.WindowsClose
	32, // 12: proto.CommandRequest.windows_ventilate:type_name -> proto.WindowsVentilate
	33, // 13: proto.CommandRequest.windows_move:type_name -> proto.WindowsMove
	24, // 14: proto.CommandRequest.engine_start:type_name -> proto.EngineStart
	25, // 15: proto.CommandRequest.engine_stop:type_name -> proto.EngineStop
	36, // 16: proto.CommandRequest.zev_preconditioning_start:type_name -> proto.ZEVPreconditioningStart
	37, // 17: proto.CommandRequest.zev_preconditioning_stop:type_name -> proto.ZEVPreconditioningStop
	38, // 18: proto.CommandRequest.zev_precondition_configure:type_name -> proto.ZEVPreconditioningConfigure
	39, // 19: proto.CommandRequest.zev_precondition_configure_seats:type_name -> proto.ZEVPreconditioningConfigureSeats
	34, // 20: proto.CommandRequest.speedalert_start:type_name -> proto.SpeedalertStart
	35, // 21: proto.CommandRequest.speedalert_stop:type_name -> proto.SpeedalertStop
	40, // 22: proto.CommandRequest.battery_charge_program:type_name -> proto.BatteryChargeProgramConfigure
	41, // 23: proto.CommandRequest.battery_max_soc:type_name -> proto.BatteryMaxSocConfigure
	42, // 24: proto.CommandRequest.charge_program_configure:type_name -> proto.ChargeProgramConfigure
	43, // 25: proto.CommandRequest.charge_control_configure:type_name -> proto.ChargeControlConfigure
	44, // 26: proto.CommandRequest.charge_opt_configure:type_name -> proto.ChargeOptConfigure
	45, // 27: proto.CommandRequest.charge_opt_start:type_name -> proto.ChargeOptStart
	46, // 28: proto.CommandRequest.charge_opt_stop:type_name -> proto.ChargeOptStop
	47, // 29: proto.CommandRequest.temperature_configure:type_name -> proto.TemperatureConfigure
	48, // 30: proto.CommandRequest.week_profile_configure:type_name -> proto.WeekProfileConfigure
	49, // 31: proto.CommandRequest.week_profile_configure_v2:type_name -> proto.WeekProfileConfigureV2
	51, // 32: proto.CommandRequest.sigpos_start:type_name -> proto.SigPosStart
	52, // 33: proto.CommandRequest.theftalarm_confirm_damagedetection:type_name -> proto.TheftalarmConfirmDamagedetection
	53, // 34: proto.CommandRequest.theftalarm_deselect_damagedetection:type_name -> proto.TheftalarmDeselectDamagedetection
	54, // 35: proto.CommandRequest.theftalarm_deselect_interior:type_name -> proto.TheftalarmDeselectInterior
	55, // 36: proto.CommandRequest.theftalarm_deselect_tow:type_name -> proto.TheftalarmDeselectTow
	56, // 37: proto.CommandRequest.theftalarm_select_damagedetection:type_name -> proto.TheftalarmSelectDamagedetection
	57, // 38: proto.CommandRequest.theftalarm_select_interior:type_name -> proto.TheftalarmSelectInterior
	58, // 39: proto.CommandRequest.theftalarm_select_tow:type_name -> proto.TheftalarmSelectTow
	59, // 40: proto.CommandRequest.theftalarm_start:type_name -> proto.TheftalarmStart
	60, // 41: proto.CommandRequest.theftalarm_stop:type_name -> proto.TheftalarmStop
	61, // 42: proto.CommandRequest.automatic_valet_parking_activate:type_name -> proto.AutomaticValetParkingActivate
	62, // 43: proto.CommandRequest.charge_flap_unlock:type_name -> proto.ChargeFlapUnlock
	63, // 44: proto.CommandRequest.charge_coupler_unlock:type_name -> proto.ChargeCouplerUnlock
	17, // 45: proto.CommandRequest.deactivate_vehicle_keys:type_name -> proto.DeactivateVehicleKeys
	18, // 46: proto.CommandRequest.activate_vehicle_keys:type_name -> proto.ActivateVehicleKeys
	5,  // 47: proto.AuxheatConfigure.time_selection:type_name -> proto.AuxheatConfigure.Selection
	0,  // 48: proto.DoorsLock.doors:type_name -> proto.Door
	0,  // 49: proto.DoorsUnlock.doors:type_name -> proto.Door
	67, // 50: proto.SunroofMove.sunroof:type_name -> google.protobuf.Int32Value
	67, // 51: proto.SunroofMove.sunroof_blind_front:type_name -> google.protobuf.Int32Value
	67, // 52: proto.SunroofMove.sunroof_blind_rear:type_name -> google.protobuf.Int32Value
	67, // 53: proto.WindowsMove.front_left:type_name -> google.protobuf.Int32Value
	67, // 54: proto.WindowsMove.front_right:type_name -> google.protobuf.Int32Value
	67, // 55: proto.WindowsMove.rear_blind:type_name -> google.protobuf.Int32Value
	67, // 56: proto.WindowsMove.rear_left:type_name -> google.protobuf.Int32Value
	67, // 57: proto.WindowsMove.rear_left_blind:type_name -> google.protobuf.Int32Value
	67, // 58: proto.WindowsMove.rear_right:type_name -> google.protobuf.Int32Value
	67, // 59: proto.WindowsMove.rear_right_blind:type_name -> google.protobuf.Int32Value
	1,  // 60: proto.ZEVPreconditioningStart.type:type_name -> proto.ZEVPreconditioningType
	1,  // 61: proto.ZEVPreconditioningStop.type:type_name -> proto.ZEVPreconditioningType
	6,  // 62: proto.ZEVPreconditioningConfigure.departure_time_mode:type_name -> proto.ZEVPreconditioningConfigure.DepartureTimeMode
	7,  // 63: proto.BatteryChargeProgramConfigure.charge_program:type_name -> proto.BatteryChargeProgramConfigure.ChargeProgram
	8,  // 64: proto.ChargeProgramConfigure.charge_program:type_name -> proto.ChargeProgramConfigure.ChargeProgram
	67, // 65: proto.ChargeProgramConfigure.max_soc:type_name -> google.protobuf.Int32Value
	68, // 66: proto.ChargeProgramConfigure.auto_unlock:type_name -> google.protobuf.BoolValue
	68, // 67: proto.ChargeProgramConfigure.location_based_charging:type_name -> google.protobuf.BoolValue
	68, // 68: proto.ChargeProgramConfigure.clock_timer:type_name -> google.protobuf.BoolValue
	68, // 69: proto.ChargeProgramConfigure.eco_charging:type_name -> google.protobuf.BoolValue
	68, // 70: proto.ChargeControlConfigure.bi_charging_enabled:type_name -> google.protobuf.BoolValue
	69, // 71: proto.ChargeControlConfigure.charging_power:type_name -> google.protobuf.FloatValue
	67, // 72: proto.ChargeControlConfigure.min_soc:type_name -> google.protobuf.Int32Value
	64, // 73: proto.ChargeOptConfigure.weekday_tariff:type_name -> proto.ChargeOptConfigure.Tariff
	64, // 74: proto.ChargeOptConfigure.weekend_tariff:type_name -> proto.ChargeOptConfigure.Tariff
	65, // 75: proto.TemperatureConfigure.temperature_points:type_name -> proto.TemperatureConfigure.TemperaturePoint
	66, // 76: proto.WeekProfileConfigure.weekly_set_hu:type_name -> proto.WeekProfileConfigure.WeeklySetHU
	50, // 77: proto.WeekProfileConfigureV2.time_profiles:type_name -> proto.TimeProfile
	67, // 78: proto.TimeProfile.identifier:type_name -> google.protobuf.Int32Value
	67, // 79: proto.TimeProfile.hour:type_name -> google.protobuf.Int32Value
	67, // 80: proto.TimeProfile.minute:type_name -> google.protobuf.Int32Value
	2,  // 81: proto.TimeProfile.days:type_name -> proto.TimeProfileDay
	68, // 82: proto.TimeProfile.active:type_name -> google.protobuf.BoolValue
	12, // 83: proto.SigPosStart.horn_type:type_name -> proto.SigPosStart.HornType
	13, // 84: proto.SigPosStart.light_type:type_name -> proto.SigPosStart.LightType
	14, // 85: proto.SigPosStart.sigpos_type:type_name -> proto.SigPosStart.SigposType
	3,  // 86: proto.AutomaticValetParkingActivate.drive_type:type_name -> proto.DriveType
	9,  // 87: proto.ChargeOptConfigure.Tariff.rate:type_name -> proto.ChargeOptConfigure.Tariff.Rate
	10, // 88: proto.TemperatureConfigure.TemperaturePoint.zone:type_name -> proto.TemperatureConfigure.TemperaturePoint.Zone
	11, // 89: proto.WeekProfileConfigure.WeeklySetHU.day:type_name -> proto.WeekProfileConfigure.WeeklySetHU.Day
	90, // [90:90] is the sub-list for method output_type
	90, // [90:90] is the sub-list for method input_type
	90, // [90:90] is the sub-list for extension type_name
	90, // [90:90] is the sub-list for extension extendee
	0,  // [0:90] is the sub-list for field type_name
}

func init() { file_vehicle_commands_proto_init() }
func file_vehicle_commands_proto_init() {
	if File_vehicle_commands_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vehicle_commands_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateVehicleKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateVehicleKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuxheatStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuxheatStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuxheatConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorsLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorsUnlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SunroofOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SunroofClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SunroofLift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SunroofMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsVentilate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedalertStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedalertStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZEVPreconditioningStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZEVPreconditioningStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZEVPreconditioningConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZEVPreconditioningConfigureSeats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryChargeProgramConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryMaxSocConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeProgramConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeControlConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeOptConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeOptStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeOptStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeekProfileConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeekProfileConfigureV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigPosStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TheftalarmConfirmDamagedetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TheftalarmDeselectDamagedetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TheftalarmDeselectInterior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TheftalarmDeselectTow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TheftalarmSelectDamagedetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TheftalarmSelectInterior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TheftalarmSelectTow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TheftalarmStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TheftalarmStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomaticValetParkingActivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeFlapUnlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeCouplerUnlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeOptConfigure_Tariff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureConfigure_TemperaturePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vehicle_commands_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeekProfileConfigure_WeeklySetHU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vehicle_commands_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CommandRequest_AuxheatStart)(nil),
		(*CommandRequest_AuxheatStop)(nil),
		(*CommandRequest_AuxheatConfigure)(nil),
		(*CommandRequest_DoorsLock)(nil),
		(*CommandRequest_DoorsUnlock)(nil),
		(*CommandRequest_SunroofOpen)(nil),
		(*CommandRequest_SunroofClose)(nil),
		(*CommandRequest_SunroofLift)(nil),
		(*CommandRequest_SunroofMove)(nil),
		(*CommandRequest_WindowsOpen)(nil),
		(*CommandRequest_WindowsClose)(nil),
		(*CommandRequest_WindowsVentilate)(nil),
		(*CommandRequest_WindowsMove)(nil),
		(*CommandRequest_EngineStart)(nil),
		(*CommandRequest_EngineStop)(nil),
		(*CommandRequest_ZevPreconditioningStart)(nil),
		(*CommandRequest_ZevPreconditioningStop)(nil),
		(*CommandRequest_ZevPreconditionConfigure)(nil),
		(*CommandRequest_ZevPreconditionConfigureSeats)(nil),
		(*CommandRequest_SpeedalertStart)(nil),
		(*CommandRequest_SpeedalertStop)(nil),
		(*CommandRequest_BatteryChargeProgram)(nil),
		(*CommandRequest_BatteryMaxSoc)(nil),
		(*CommandRequest_ChargeProgramConfigure)(nil),
		(*CommandRequest_ChargeControlConfigure)(nil),
		(*CommandRequest_ChargeOptConfigure)(nil),
		(*CommandRequest_ChargeOptStart)(nil),
		(*CommandRequest_ChargeOptStop)(nil),
		(*CommandRequest_TemperatureConfigure)(nil),
		(*CommandRequest_WeekProfileConfigure)(nil),
		(*CommandRequest_WeekProfileConfigureV2)(nil),
		(*CommandRequest_SigposStart)(nil),
		(*CommandRequest_TheftalarmConfirmDamagedetection)(nil),
		(*CommandRequest_TheftalarmDeselectDamagedetection)(nil),
		(*CommandRequest_TheftalarmDeselectInterior)(nil),
		(*CommandRequest_TheftalarmDeselectTow)(nil),
		(*CommandRequest_TheftalarmSelectDamagedetection)(nil),
		(*CommandRequest_TheftalarmSelectInterior)(nil),
		(*CommandRequest_TheftalarmSelectTow)(nil),
		(*CommandRequest_TheftalarmStart)(nil),
		(*CommandRequest_TheftalarmStop)(nil),
		(*CommandRequest_AutomaticValetParkingActivate)(nil),
		(*CommandRequest_ChargeFlapUnlock)(nil),
		(*CommandRequest_ChargeCouplerUnlock)(nil),
		(*CommandRequest_DeactivateVehicleKeys)(nil),
		(*CommandRequest_ActivateVehicleKeys)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vehicle_commands_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vehicle_commands_proto_goTypes,
		DependencyIndexes: file_vehicle_commands_proto_depIdxs,
		EnumInfos:         file_vehicle_commands_proto_enumTypes,
		MessageInfos:      file_vehicle_commands_proto_msgTypes,
	}.Build()
	File_vehicle_commands_proto = out.File
	file_vehicle_commands_proto_rawDesc = nil
	file_vehicle_commands_proto_goTypes = nil
	file_vehicle_commands_proto_depIdxs = nil
}
