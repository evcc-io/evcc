// Code generated by "enumer -type StationStatus -trimprefix StationStatus -transform=lower -json"; DO NOT EDIT.

package ocpp

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _StationStatusName = "unknownconfiguredconnected"

var _StationStatusIndex = [...]uint8{0, 7, 17, 26}

const _StationStatusLowerName = "unknownconfiguredconnected"

func (i StationStatus) String() string {
	if i < 0 || i >= StationStatus(len(_StationStatusIndex)-1) {
		return fmt.Sprintf("StationStatus(%d)", i)
	}
	return _StationStatusName[_StationStatusIndex[i]:_StationStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StationStatusNoOp() {
	var x [1]struct{}
	_ = x[StationStatusUnknown-(0)]
	_ = x[StationStatusConfigured-(1)]
	_ = x[StationStatusConnected-(2)]
}

var _StationStatusValues = []StationStatus{StationStatusUnknown, StationStatusConfigured, StationStatusConnected}

var _StationStatusNameToValueMap = map[string]StationStatus{
	_StationStatusName[0:7]:        StationStatusUnknown,
	_StationStatusLowerName[0:7]:   StationStatusUnknown,
	_StationStatusName[7:17]:       StationStatusConfigured,
	_StationStatusLowerName[7:17]:  StationStatusConfigured,
	_StationStatusName[17:26]:      StationStatusConnected,
	_StationStatusLowerName[17:26]: StationStatusConnected,
}

var _StationStatusNames = []string{
	_StationStatusName[0:7],
	_StationStatusName[7:17],
	_StationStatusName[17:26],
}

// StationStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StationStatusString(s string) (StationStatus, error) {
	if val, ok := _StationStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StationStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StationStatus values", s)
}

// StationStatusValues returns all values of the enum
func StationStatusValues() []StationStatus {
	return _StationStatusValues
}

// StationStatusStrings returns a slice of all String values of the enum
func StationStatusStrings() []string {
	strs := make([]string, len(_StationStatusNames))
	copy(strs, _StationStatusNames)
	return strs
}

// IsAStationStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StationStatus) IsAStationStatus() bool {
	for _, v := range _StationStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for StationStatus
func (i StationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for StationStatus
func (i *StationStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("StationStatus should be a string, got %s", data)
	}

	var err error
	*i, err = StationStatusString(s)
	return err
}
