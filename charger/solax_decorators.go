package charger

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateSolax(base *Solax, phaseSwitcher func(int) error, phaseGetter func() (int, error)) api.Charger {
	switch {
	case phaseSwitcher == nil:
		return base

	case phaseGetter == nil && phaseSwitcher != nil:
		return &struct {
			*Solax
			api.PhaseSwitcher
		}{
			Solax: base,
			PhaseSwitcher: &decorateSolaxPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case phaseGetter != nil && phaseSwitcher != nil:
		return &struct {
			*Solax
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Solax: base,
			PhaseGetter: &decorateSolaxPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateSolaxPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}
	}

	return nil
}

type decorateSolaxPhaseGetterImpl struct {
	phaseGetter func() (int, error)
}

func (impl *decorateSolaxPhaseGetterImpl) GetPhases() (int, error) {
	return impl.phaseGetter()
}

type decorateSolaxPhaseSwitcherImpl struct {
	phaseSwitcher func(int) error
}

func (impl *decorateSolaxPhaseSwitcherImpl) Phases1p3p(p0 int) error {
	return impl.phaseSwitcher(p0)
}
