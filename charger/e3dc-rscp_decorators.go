package charger

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateE3dc(base *E3dc, phaseSwitcher func(int) error, phaseGetter func() (int, error), phasePowers func() (float64, float64, float64, error)) api.Charger {
	switch {
	case phasePowers == nil && phaseSwitcher == nil:
		return base

	case phaseGetter == nil && phasePowers == nil && phaseSwitcher != nil:
		return &struct {
			*E3dc
			api.PhaseSwitcher
		}{
			E3dc: base,
			PhaseSwitcher: &decorateE3dcPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case phaseGetter != nil && phasePowers == nil && phaseSwitcher != nil:
		return &struct {
			*E3dc
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			E3dc: base,
			PhaseGetter: &decorateE3dcPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateE3dcPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case phasePowers != nil && phaseSwitcher == nil:
		return &struct {
			*E3dc
			api.PhasePowers
		}{
			E3dc: base,
			PhasePowers: &decorateE3dcPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case phaseGetter == nil && phasePowers != nil && phaseSwitcher != nil:
		return &struct {
			*E3dc
			api.PhasePowers
			api.PhaseSwitcher
		}{
			E3dc: base,
			PhasePowers: &decorateE3dcPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseSwitcher: &decorateE3dcPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case phaseGetter != nil && phasePowers != nil && phaseSwitcher != nil:
		return &struct {
			*E3dc
			api.PhaseGetter
			api.PhasePowers
			api.PhaseSwitcher
		}{
			E3dc: base,
			PhaseGetter: &decorateE3dcPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhasePowers: &decorateE3dcPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseSwitcher: &decorateE3dcPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}
	}

	return nil
}

type decorateE3dcPhaseGetterImpl struct {
	phaseGetter func() (int, error)
}

func (impl *decorateE3dcPhaseGetterImpl) GetPhases() (int, error) {
	return impl.phaseGetter()
}

type decorateE3dcPhasePowersImpl struct {
	phasePowers func() (float64, float64, float64, error)
}

func (impl *decorateE3dcPhasePowersImpl) Powers() (float64, float64, float64, error) {
	return impl.phasePowers()
}

type decorateE3dcPhaseSwitcherImpl struct {
	phaseSwitcher func(int) error
}

func (impl *decorateE3dcPhaseSwitcherImpl) Phases1p3p(p0 int) error {
	return impl.phaseSwitcher(p0)
}
