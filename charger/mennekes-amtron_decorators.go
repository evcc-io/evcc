package charger

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateMennekesAmtron(base *MennekesAmtron, meter func() (float64, error), phaseCurrents func() (float64, float64, float64, error), phaseVoltages func() (float64, float64, float64, error), meterEnergy func() (float64, error), battery func() (float64, error), identifier func() (string, error)) api.Charger {
	switch {
	case battery == nil && identifier == nil && meter == nil:
		return base

	case battery == nil && identifier == nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Meter
		}{
			MennekesAmtron: base,
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
		}

	case battery == nil && identifier == nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Meter
			api.PhaseCurrents
		}{
			MennekesAmtron: base,
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && identifier == nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Meter
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && identifier == nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Meter
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && identifier == nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Meter
			api.MeterEnergy
		}{
			MennekesAmtron: base,
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case battery == nil && identifier == nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
		}{
			MennekesAmtron: base,
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && identifier == nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Meter
			api.MeterEnergy
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && identifier == nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && identifier == nil && meter == nil:
		return &struct {
			*MennekesAmtron
			api.Battery
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
		}

	case battery != nil && identifier == nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Meter
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
		}

	case battery != nil && identifier == nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Meter
			api.PhaseCurrents
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && identifier == nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Meter
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && identifier == nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Meter
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && identifier == nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Meter
			api.MeterEnergy
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case battery != nil && identifier == nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && identifier == nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Meter
			api.MeterEnergy
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && identifier == nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && identifier != nil && meter == nil:
		return &struct {
			*MennekesAmtron
			api.Identifier
		}{
			MennekesAmtron: base,
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
		}

	case battery == nil && identifier != nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Identifier
			api.Meter
		}{
			MennekesAmtron: base,
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
		}

	case battery == nil && identifier != nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Identifier
			api.Meter
			api.PhaseCurrents
		}{
			MennekesAmtron: base,
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && identifier != nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Identifier
			api.Meter
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && identifier != nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && identifier != nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Identifier
			api.Meter
			api.MeterEnergy
		}{
			MennekesAmtron: base,
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case battery == nil && identifier != nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Identifier
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
		}{
			MennekesAmtron: base,
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && identifier != nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Identifier
			api.Meter
			api.MeterEnergy
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && identifier != nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Identifier
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && identifier != nil && meter == nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Identifier
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
		}

	case battery != nil && identifier != nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Identifier
			api.Meter
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
		}

	case battery != nil && identifier != nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Identifier
			api.Meter
			api.PhaseCurrents
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && identifier != nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Identifier
			api.Meter
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && identifier != nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && identifier != nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Identifier
			api.Meter
			api.MeterEnergy
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case battery != nil && identifier != nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseVoltages == nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Identifier
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && identifier != nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Identifier
			api.Meter
			api.MeterEnergy
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && identifier != nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseVoltages != nil:
		return &struct {
			*MennekesAmtron
			api.Battery
			api.Identifier
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			MennekesAmtron: base,
			Battery: &decorateMennekesAmtronBatteryImpl{
				battery: battery,
			},
			Identifier: &decorateMennekesAmtronIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateMennekesAmtronMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateMennekesAmtronMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decorateMennekesAmtronPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMennekesAmtronPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}
	}

	return nil
}

type decorateMennekesAmtronBatteryImpl struct {
	battery func() (float64, error)
}

func (impl *decorateMennekesAmtronBatteryImpl) Soc() (float64, error) {
	return impl.battery()
}

type decorateMennekesAmtronIdentifierImpl struct {
	identifier func() (string, error)
}

func (impl *decorateMennekesAmtronIdentifierImpl) Identify() (string, error) {
	return impl.identifier()
}

type decorateMennekesAmtronMeterImpl struct {
	meter func() (float64, error)
}

func (impl *decorateMennekesAmtronMeterImpl) CurrentPower() (float64, error) {
	return impl.meter()
}

type decorateMennekesAmtronMeterEnergyImpl struct {
	meterEnergy func() (float64, error)
}

func (impl *decorateMennekesAmtronMeterEnergyImpl) TotalEnergy() (float64, error) {
	return impl.meterEnergy()
}

type decorateMennekesAmtronPhaseCurrentsImpl struct {
	phaseCurrents func() (float64, float64, float64, error)
}

func (impl *decorateMennekesAmtronPhaseCurrentsImpl) Currents() (float64, float64, float64, error) {
	return impl.phaseCurrents()
}

type decorateMennekesAmtronPhaseVoltagesImpl struct {
	phaseVoltages func() (float64, float64, float64, error)
}

func (impl *decorateMennekesAmtronPhaseVoltagesImpl) Voltages() (float64, float64, float64, error) {
	return impl.phaseVoltages()
}
