package meter

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateHomeAssistant(base *HomeAssistant, meterEnergy func() (float64, error), phaseCurrents func() (float64, float64, float64, error), phaseVoltages func() (float64, float64, float64, error), battery func() (float64, error)) api.Meter {
	switch {
	case battery == nil && meterEnergy == nil && phaseCurrents == nil && phaseVoltages == nil:
		return base

	case battery == nil && meterEnergy != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			*HomeAssistant
			api.MeterEnergy
		}{
			HomeAssistant: base,
			MeterEnergy: &decorateHomeAssistantMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case battery == nil && meterEnergy == nil && phaseCurrents != nil && phaseVoltages == nil:
		return &struct {
			*HomeAssistant
			api.PhaseCurrents
		}{
			HomeAssistant: base,
			PhaseCurrents: &decorateHomeAssistantPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && meterEnergy != nil && phaseCurrents != nil && phaseVoltages == nil:
		return &struct {
			*HomeAssistant
			api.MeterEnergy
			api.PhaseCurrents
		}{
			HomeAssistant: base,
			MeterEnergy: &decorateHomeAssistantMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decorateHomeAssistantPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && meterEnergy == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			*HomeAssistant
			api.PhaseVoltages
		}{
			HomeAssistant: base,
			PhaseVoltages: &decorateHomeAssistantPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && meterEnergy != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			*HomeAssistant
			api.MeterEnergy
			api.PhaseVoltages
		}{
			HomeAssistant: base,
			MeterEnergy: &decorateHomeAssistantMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateHomeAssistantPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && meterEnergy == nil && phaseCurrents != nil && phaseVoltages != nil:
		return &struct {
			*HomeAssistant
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			HomeAssistant: base,
			PhaseCurrents: &decorateHomeAssistantPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateHomeAssistantPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && meterEnergy != nil && phaseCurrents != nil && phaseVoltages != nil:
		return &struct {
			*HomeAssistant
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			HomeAssistant: base,
			MeterEnergy: &decorateHomeAssistantMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decorateHomeAssistantPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateHomeAssistantPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && meterEnergy == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			*HomeAssistant
			api.Battery
		}{
			HomeAssistant: base,
			Battery: &decorateHomeAssistantBatteryImpl{
				battery: battery,
			},
		}

	case battery != nil && meterEnergy != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			*HomeAssistant
			api.Battery
			api.MeterEnergy
		}{
			HomeAssistant: base,
			Battery: &decorateHomeAssistantBatteryImpl{
				battery: battery,
			},
			MeterEnergy: &decorateHomeAssistantMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case battery != nil && meterEnergy == nil && phaseCurrents != nil && phaseVoltages == nil:
		return &struct {
			*HomeAssistant
			api.Battery
			api.PhaseCurrents
		}{
			HomeAssistant: base,
			Battery: &decorateHomeAssistantBatteryImpl{
				battery: battery,
			},
			PhaseCurrents: &decorateHomeAssistantPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && meterEnergy != nil && phaseCurrents != nil && phaseVoltages == nil:
		return &struct {
			*HomeAssistant
			api.Battery
			api.MeterEnergy
			api.PhaseCurrents
		}{
			HomeAssistant: base,
			Battery: &decorateHomeAssistantBatteryImpl{
				battery: battery,
			},
			MeterEnergy: &decorateHomeAssistantMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decorateHomeAssistantPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && meterEnergy == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			*HomeAssistant
			api.Battery
			api.PhaseVoltages
		}{
			HomeAssistant: base,
			Battery: &decorateHomeAssistantBatteryImpl{
				battery: battery,
			},
			PhaseVoltages: &decorateHomeAssistantPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && meterEnergy != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			*HomeAssistant
			api.Battery
			api.MeterEnergy
			api.PhaseVoltages
		}{
			HomeAssistant: base,
			Battery: &decorateHomeAssistantBatteryImpl{
				battery: battery,
			},
			MeterEnergy: &decorateHomeAssistantMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateHomeAssistantPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && meterEnergy == nil && phaseCurrents != nil && phaseVoltages != nil:
		return &struct {
			*HomeAssistant
			api.Battery
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			HomeAssistant: base,
			Battery: &decorateHomeAssistantBatteryImpl{
				battery: battery,
			},
			PhaseCurrents: &decorateHomeAssistantPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateHomeAssistantPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && meterEnergy != nil && phaseCurrents != nil && phaseVoltages != nil:
		return &struct {
			*HomeAssistant
			api.Battery
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			HomeAssistant: base,
			Battery: &decorateHomeAssistantBatteryImpl{
				battery: battery,
			},
			MeterEnergy: &decorateHomeAssistantMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decorateHomeAssistantPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateHomeAssistantPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}
	}

	return nil
}

type decorateHomeAssistantBatteryImpl struct {
	battery func() (float64, error)
}

func (impl *decorateHomeAssistantBatteryImpl) Soc() (float64, error) {
	return impl.battery()
}

type decorateHomeAssistantMeterEnergyImpl struct {
	meterEnergy func() (float64, error)
}

func (impl *decorateHomeAssistantMeterEnergyImpl) TotalEnergy() (float64, error) {
	return impl.meterEnergy()
}

type decorateHomeAssistantPhaseCurrentsImpl struct {
	phaseCurrents func() (float64, float64, float64, error)
}

func (impl *decorateHomeAssistantPhaseCurrentsImpl) Currents() (float64, float64, float64, error) {
	return impl.phaseCurrents()
}

type decorateHomeAssistantPhaseVoltagesImpl struct {
	phaseVoltages func() (float64, float64, float64, error)
}

func (impl *decorateHomeAssistantPhaseVoltagesImpl) Voltages() (float64, float64, float64, error) {
	return impl.phaseVoltages()
}
