package meter

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateRCT(
	base *RCT,
	meterEnergy func() (float64, error),
	zeroFeedin func(bool) error,
	battery func() (float64, error),
	batteryController func(api.BatteryMode) error,
	batteryCapacity func() float64,
) api.Meter {
	type composed struct{ *RCT }
	var result any = &composed{base}

	if meterEnergy != nil {
		result = struct {
			any
			api.MeterEnergy
		}{
			any:         result,
			MeterEnergy: &decorateRCTMeterEnergyImpl{meterEnergy},
		}
	}
	if zeroFeedin != nil {
		result = struct {
			any
			api.FeedinDisableController
		}{
			any:                     result,
			FeedinDisableController: &decorateRCTFeedinDisableControllerImpl{zeroFeedin},
		}
	}
	if battery != nil {
		result = struct {
			any
			api.Battery
		}{
			any:    result,
			Battery: &decorateRCTBatteryImpl{battery},
		}
	}
	if batteryController != nil {
		result = struct {
			any
			api.BatteryController
		}{
			any:               result,
			BatteryController: &decorateRCTBatteryControllerImpl{batteryController},
		}
	}
	if batteryCapacity != nil {
		result = struct {
			any
			api.BatteryCapacity
		}{
			any:             result,
			BatteryCapacity: &decorateRCTBatteryCapacityImpl{batteryCapacity},
		}
	}

	return result.(api.Meter)
}

type decorateRCTBatteryImpl struct {
	battery func() (float64, error)
}

func (impl *decorateRCTBatteryImpl) Soc() (float64, error) {
	return impl.battery()
}

type decorateRCTBatteryCapacityImpl struct {
	batteryCapacity func() float64
}

func (impl *decorateRCTBatteryCapacityImpl) Capacity() float64 {
	return impl.batteryCapacity()
}

type decorateRCTBatteryControllerImpl struct {
	batteryController func(api.BatteryMode) error
}

func (impl *decorateRCTBatteryControllerImpl) SetBatteryMode(p0 api.BatteryMode) error {
	return impl.batteryController(p0)
}

type decorateRCTMeterEnergyImpl struct {
	meterEnergy func() (float64, error)
}

func (impl *decorateRCTMeterEnergyImpl) TotalEnergy() (float64, error) {
	return impl.meterEnergy()
}

type decorateRCTFeedinDisableControllerImpl struct {
	zeroFeedin func(bool) error
}

func (impl *decorateRCTFeedinDisableControllerImpl) FeedinDisableLimitEnable(b bool) error {
	return impl.zeroFeedin(b)
}
